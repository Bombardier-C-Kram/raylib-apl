:Namespace rlgl
⍝ THIS TEXT HAS BEEN AUTOGENERATED

__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__ ← 0 ⎕FIX (⊃1⎕NPARTS''),'../parse-raylib-apl/setup.apln'
⎕ ← __PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.R
'' ⎕NS ('__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.',⊢)¨__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.⎕NL ¯3
'' ⎕NS ('__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.',⊢)¨__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.⎕NL ¯2
'' ⎕NS ('__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.',⊢)¨__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__.⎕NL ¯9
⎕EX '__PLEASE_DO_NOT_REPLACE_EXISTING_VAR__' '__PLEASE_DO_NOT_REPLACE_EXISTING_VAR2__'

RLGLVersionString                         ← '4.5'             ⍝
RL_DEFAULT_BATCH_BUFFER_ELEMENTS          ← 8192              ⍝
RL_DEFAULT_BATCH_BUFFERS                  ← 1                 ⍝ Default number of batch buffers (multi-buffering)
RL_DEFAULT_BATCH_DRAWCALLS                ← 256               ⍝ Default number of batch draw calls (by state changes: mode, texture)
RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS        ← 4                 ⍝ Maximum number of textures units that can be activated on batch drawing (SetShaderValueTexture())
RL_MAX_MATRIX_STACK_SIZE                  ← 32                ⍝ Maximum size of Matrix stack
RL_MAX_SHADER_LOCATIONS                   ← 32                ⍝ Maximum number of shader locations supported
RL_CULL_DISTANCE_NEAR                     ← 0.01              ⍝ Default near cull distance
RL_CULL_DISTANCE_FAR                      ← 1000              ⍝ Default far cull distance
RL_TEXTURE_WRAP_S                         ← 10242             ⍝ GL_TEXTURE_WRAP_S
RL_TEXTURE_WRAP_T                         ← 10243             ⍝ GL_TEXTURE_WRAP_T
RL_TEXTURE_MAG_FILTER                     ← 10240             ⍝ GL_TEXTURE_MAG_FILTER
RL_TEXTURE_MIN_FILTER                     ← 10241             ⍝ GL_TEXTURE_MIN_FILTER
RL_TEXTURE_FILTER_NEAREST                 ← 9728              ⍝ GL_NEAREST
RL_TEXTURE_FILTER_LINEAR                  ← 9729              ⍝ GL_LINEAR
RL_TEXTURE_FILTER_MIP_NEAREST             ← 9984              ⍝ GL_NEAREST_MIPMAP_NEAREST
RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR      ← 9986              ⍝ GL_NEAREST_MIPMAP_LINEAR
RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST      ← 9985              ⍝ GL_LINEAR_MIPMAP_NEAREST
RL_TEXTURE_FILTER_MIP_LINEAR              ← 9987              ⍝ GL_LINEAR_MIPMAP_LINEAR
RL_TEXTURE_FILTER_ANISOTROPIC             ← 12288             ⍝ Anisotropic filter (custom identifier)
RL_TEXTURE_MIPMAP_BIAS_RATIO              ← 16384             ⍝ Texture mipmap bias, percentage ratio (custom identifier)
RL_TEXTURE_WRAP_REPEAT                    ← 10497             ⍝ GL_REPEAT
RL_TEXTURE_WRAP_CLAMP                     ← 33071             ⍝ GL_CLAMP_TO_EDGE
RL_TEXTURE_WRAP_MIRROR_REPEAT             ← 33648             ⍝ GL_MIRRORED_REPEAT
RL_TEXTURE_WRAP_MIRROR_CLAMP              ← 34626             ⍝ GL_MIRROR_CLAMP_EXT
RL_MODELVIEW                              ← 5888              ⍝ GL_MODELVIEW
RL_PROJECTION                             ← 5889              ⍝ GL_PROJECTION
RL_TEXTURE                                ← 5890              ⍝ GL_TEXTURE
RL_LINES                                  ← 1                 ⍝ GL_LINES
RL_TRIANGLES                              ← 4                 ⍝ GL_TRIANGLES
RL_QUADS                                  ← 7                 ⍝ GL_QUADS
RL_UNSIGNED_BYTE                          ← 5121              ⍝ GL_UNSIGNED_BYTE
RL_FLOAT                                  ← 5126              ⍝ GL_FLOAT
RL_STREAM_DRAW                            ← 35040             ⍝ GL_STREAM_DRAW
RL_STREAM_READ                            ← 35041             ⍝ GL_STREAM_READ
RL_STREAM_COPY                            ← 35042             ⍝ GL_STREAM_COPY
RL_STATIC_DRAW                            ← 35044             ⍝ GL_STATIC_DRAW
RL_STATIC_READ                            ← 35045             ⍝ GL_STATIC_READ
RL_STATIC_COPY                            ← 35046             ⍝ GL_STATIC_COPY
RL_DYNAMIC_DRAW                           ← 35048             ⍝ GL_DYNAMIC_DRAW
RL_DYNAMIC_READ                           ← 35049             ⍝ GL_DYNAMIC_READ
RL_DYNAMIC_COPY                           ← 35050             ⍝ GL_DYNAMIC_COPY
RL_FRAGMENT_SHADER                        ← 35632             ⍝ GL_FRAGMENT_SHADER
RL_VERTEX_SHADER                          ← 35633             ⍝ GL_VERTEX_SHADER
RL_COMPUTE_SHADER                         ← 37305             ⍝ GL_COMPUTE_SHADER
RLZERO                                    ← 0                 ⍝ GL_ZERO
RL_ONE                                    ← 1                 ⍝ GL_ONE
RL_SRC_COLOR                              ← 768               ⍝ GL_SRC_COLOR
RL_ONE_MINUS_SRC_COLOR                    ← 769               ⍝ GL_ONE_MINUS_SRC_COLOR
RL_SRC_ALPHA                              ← 770               ⍝ GL_SRC_ALPHA
RL_ONE_MINUS_SRC_ALPHA                    ← 771               ⍝ GL_ONE_MINUS_SRC_ALPHA
RL_DST_ALPHA                              ← 772               ⍝ GL_DST_ALPHA
RL_ONE_MINUS_DST_ALPHA                    ← 773               ⍝ GL_ONE_MINUS_DST_ALPHA
RL_DST_COLOR                              ← 774               ⍝ GL_DST_COLOR
RL_ONE_MINUS_DST_COLOR                    ← 775               ⍝ GL_ONE_MINUS_DST_COLOR
RL_SRC_ALPHA_SATURATE                     ← 776               ⍝ GL_SRC_ALPHA_SATURATE
RL_CONSTANT_COLOR                         ← 32769             ⍝ GL_CONSTANT_COLOR
RL_ONE_MINUS_CONSTANT_COLOR               ← 32770             ⍝ GL_ONE_MINUS_CONSTANT_COLOR
RL_CONSTANT_ALPHA                         ← 32771             ⍝ GL_CONSTANT_ALPHA
RL_ONE_MINUS_CONSTANT_ALPHA               ← 32772             ⍝ GL_ONE_MINUS_CONSTANT_ALPHA
RL_FUNC_ADD                               ← 32774             ⍝ GL_FUNC_ADD
RL_MIN                                    ← 32775             ⍝ GL_MIN
RL_MAX                                    ← 32776             ⍝ GL_MAX
RL_FUNC_SUBTRACT                          ← 32778             ⍝ GL_FUNC_SUBTRACT
RL_FUNC_REVERSE_SUBTRACT                  ← 32779             ⍝ GL_FUNC_REVERSE_SUBTRACT
RL_BLEND_EQUATION                         ← 32777             ⍝ GL_BLEND_EQUATION
RL_BLEND_EQUATION_RGB                     ← 32777             ⍝ GL_BLEND_EQUATION_RGB   // (Same as BLEND_EQUATION)
RL_BLEND_EQUATION_ALPHA                   ← 34877             ⍝ GL_BLEND_EQUATION_ALPHA
RL_BLEND_DST_RGB                          ← 32968             ⍝ GL_BLEND_DST_RGB
RL_BLEND_SRC_RGB                          ← 32969             ⍝ GL_BLEND_SRC_RGB
RL_BLEND_DST_ALPHA                        ← 32970             ⍝ GL_BLEND_DST_ALPHA
RL_BLEND_SRC_ALPHA                        ← 32971             ⍝ GL_BLEND_SRC_ALPHA
RL_BLEND_COLOR                            ← 32773             ⍝ GL_BLEND_COLOR
GL_SHADING_LANGUAGE_VERSION               ← 35724             ⍝
GL_COMPRESSED_RGB_S3TC_DXT1_EXT           ← 33776             ⍝
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT          ← 33777             ⍝
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT          ← 33778             ⍝
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT          ← 33779             ⍝
GL_ETC1_RGB8_OES                          ← 36196             ⍝
GL_COMPRESSED_RGB8_ETC2                   ← 37492             ⍝
GL_COMPRESSED_RGBA8_ETC2_EAC              ← 37496             ⍝
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG        ← 35840             ⍝
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG       ← 35842             ⍝
GL_COMPRESSED_RGBA_ASTC_4x4_KHR           ← 37808             ⍝
GL_COMPRESSED_RGBA_ASTC_8x8_KHR           ← 37815             ⍝
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT         ← 34047             ⍝
GL_TEXTURE_MAX_ANISOTROPY_EXT             ← 34046             ⍝
GL_UNSIGNED_SHORT_5_6_5                   ← 33635             ⍝
GL_UNSIGNED_SHORT_5_5_5_1                 ← 32820             ⍝
GL_UNSIGNED_SHORT_4_4_4_4                 ← 32819             ⍝
GL_LUMINANCE                              ← 6409              ⍝
GL_LUMINANCE_ALPHA                        ← 6410              ⍝
RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION    ← 'vertexPosition'  ⍝ Bound by default to shader location: 0
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD    ← 'vertexTexCoord'  ⍝ Bound by default to shader location: 1
RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL      ← 'vertexNormal'    ⍝ Bound by default to shader location: 2
RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR       ← 'vertexColor'     ⍝ Bound by default to shader location: 3
RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT     ← 'vertexTangent'   ⍝ Bound by default to shader location: 4
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2   ← 'vertexTexCoord2' ⍝ Bound by default to shader location: 5
RL_DEFAULT_SHADER_UNIFORM_NAME_MVP        ← 'mvp'             ⍝ model-view-projection matrix
RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW       ← 'matView'         ⍝ view matrix
RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION ← 'matProjection'   ⍝ projection matrix
RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL      ← 'matModel'        ⍝ model matrix
RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL     ← 'matNormal'       ⍝ normal matrix (transpose(inverse(matModelView))
RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR      ← 'colDiffuse'      ⍝ color diffuse (base tint color, multiplied by texture color)
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0 ← 'texture0'        ⍝ texture0 (texture slot active 0)
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1 ← 'texture1'        ⍝ texture1 (texture slot active 1)
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2 ← 'texture2'        ⍝ texture2 (texture slot active 2)

:Namespace rlGlVersion ⍝ OpenGL version
  RL_OPENGL_11    ← 1  ⍝ OpenGL 1.1
  RL_OPENGL_21    ← 2  ⍝ OpenGL 2.1 (GLSL 120)
  RL_OPENGL_33    ← 3  ⍝ OpenGL 3.3 (GLSL 330)
  RL_OPENGL_43    ← 4  ⍝ OpenGL 4.3 (using GLSL 330)
  RL_OPENGL_ES_20 ← 5  ⍝ OpenGL ES 2.0 (GLSL 100)
  RL_OPENGL_ES_30 ← 6  ⍝ OpenGL ES 3.0 (GLSL 300 es)
:EndNamespace

:Namespace rlTraceLogLevel ⍝ Trace log level
  RL_LOG_ALL     ← 0  ⍝ Display all logs
  RL_LOG_TRACE   ← 1  ⍝ Trace logging, intended for internal use only
  RL_LOG_DEBUG   ← 2  ⍝ Debug logging, used for internal debugging, it should be disabled on release builds
  RL_LOG_INFO    ← 3  ⍝ Info logging, used for program execution info
  RL_LOG_WARNING ← 4  ⍝ Warning logging, used on recoverable failures
  RL_LOG_ERROR   ← 5  ⍝ Error logging, used on unrecoverable failures
  RL_LOG_FATAL   ← 6  ⍝ Fatal logging, used to abort program: exit(EXIT_FAILURE)
  RL_LOG_NONE    ← 7  ⍝ Disable logging
:EndNamespace

:Namespace rlPixelFormat ⍝ Texture pixel formats
  RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ← 1   ⍝ 8 bit per pixel (no alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ← 2   ⍝ 8*2 bpp (2 channels)
  RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5       ← 3   ⍝ 16 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8       ← 4   ⍝ 24 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ← 5   ⍝ 16 bpp (1 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ← 6   ⍝ 16 bpp (4 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ← 7   ⍝ 32 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R32          ← 8   ⍝ 32 bpp (1 channel - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32    ← 9   ⍝ 32*3 bpp (3 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ← 10  ⍝ 32*4 bpp (4 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16          ← 11  ⍝ 16 bpp (1 channel - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16    ← 12  ⍝ 16*3 bpp (3 channels - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ← 13  ⍝ 16*4 bpp (4 channels - half float)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGB       ← 14  ⍝ 4 bpp (no alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA      ← 15  ⍝ 4 bpp (1 bit alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA      ← 16  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA      ← 17  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC1_RGB       ← 18  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_RGB       ← 19  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ← 20  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGB       ← 21  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA      ← 22  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ← 23  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ← 24  ⍝ 2 bpp
:EndNamespace

:Namespace rlTextureFilter ⍝ Texture parameters: filter mode
  RL_TEXTURE_FILTER_POINT           ← 0  ⍝ No filter, just pixel approximation
  RL_TEXTURE_FILTER_BILINEAR        ← 1  ⍝ Linear filtering
  RL_TEXTURE_FILTER_TRILINEAR       ← 2  ⍝ Trilinear filtering (linear with mipmaps)
  RL_TEXTURE_FILTER_ANISOTROPIC_4X  ← 3  ⍝ Anisotropic filtering 4x
  RL_TEXTURE_FILTER_ANISOTROPIC_8X  ← 4  ⍝ Anisotropic filtering 8x
  RL_TEXTURE_FILTER_ANISOTROPIC_16X ← 5  ⍝ Anisotropic filtering 16x
:EndNamespace

:Namespace rlBlendMode ⍝ Color blending modes (pre-defined)
  RL_BLEND_ALPHA             ← 0  ⍝ Blend textures considering alpha (default)
  RL_BLEND_ADDITIVE          ← 1  ⍝ Blend textures adding colors
  RL_BLEND_MULTIPLIED        ← 2  ⍝ Blend textures multiplying colors
  RL_BLEND_ADD_COLORS        ← 3  ⍝ Blend textures adding colors (alternative)
  RL_BLEND_SUBTRACT_COLORS   ← 4  ⍝ Blend textures subtracting colors (alternative)
  RL_BLEND_ALPHA_PREMULTIPLY ← 5  ⍝ Blend premultiplied textures considering alpha
  RL_BLEND_CUSTOM            ← 6  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactors())
  RL_BLEND_CUSTOM_SEPARATE   ← 7  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())
:EndNamespace

:Namespace rlShaderLocationIndex ⍝ Shader location point type
  RL_SHADER_LOC_VERTEX_POSITION   ← 0   ⍝ Shader location: vertex attribute: position
  RL_SHADER_LOC_VERTEX_TEXCOORD01 ← 1   ⍝ Shader location: vertex attribute: texcoord01
  RL_SHADER_LOC_VERTEX_TEXCOORD02 ← 2   ⍝ Shader location: vertex attribute: texcoord02
  RL_SHADER_LOC_VERTEX_NORMAL     ← 3   ⍝ Shader location: vertex attribute: normal
  RL_SHADER_LOC_VERTEX_TANGENT    ← 4   ⍝ Shader location: vertex attribute: tangent
  RL_SHADER_LOC_VERTEX_COLOR      ← 5   ⍝ Shader location: vertex attribute: color
  RL_SHADER_LOC_MATRIX_MVP        ← 6   ⍝ Shader location: matrix uniform: model-view-projection
  RL_SHADER_LOC_MATRIX_VIEW       ← 7   ⍝ Shader location: matrix uniform: view (camera transform)
  RL_SHADER_LOC_MATRIX_PROJECTION ← 8   ⍝ Shader location: matrix uniform: projection
  RL_SHADER_LOC_MATRIX_MODEL      ← 9   ⍝ Shader location: matrix uniform: model (transform)
  RL_SHADER_LOC_MATRIX_NORMAL     ← 10  ⍝ Shader location: matrix uniform: normal
  RL_SHADER_LOC_VECTOR_VIEW       ← 11  ⍝ Shader location: vector uniform: view
  RL_SHADER_LOC_COLOR_DIFFUSE     ← 12  ⍝ Shader location: vector uniform: diffuse color
  RL_SHADER_LOC_COLOR_SPECULAR    ← 13  ⍝ Shader location: vector uniform: specular color
  RL_SHADER_LOC_COLOR_AMBIENT     ← 14  ⍝ Shader location: vector uniform: ambient color
  RL_SHADER_LOC_MAP_ALBEDO        ← 15  ⍝ Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)
  RL_SHADER_LOC_MAP_METALNESS     ← 16  ⍝ Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)
  RL_SHADER_LOC_MAP_NORMAL        ← 17  ⍝ Shader location: sampler2d texture: normal
  RL_SHADER_LOC_MAP_ROUGHNESS     ← 18  ⍝ Shader location: sampler2d texture: roughness
  RL_SHADER_LOC_MAP_OCCLUSION     ← 19  ⍝ Shader location: sampler2d texture: occlusion
  RL_SHADER_LOC_MAP_EMISSION      ← 20  ⍝ Shader location: sampler2d texture: emission
  RL_SHADER_LOC_MAP_HEIGHT        ← 21  ⍝ Shader location: sampler2d texture: height
  RL_SHADER_LOC_MAP_CUBEMAP       ← 22  ⍝ Shader location: samplerCube texture: cubemap
  RL_SHADER_LOC_MAP_IRRADIANCE    ← 23  ⍝ Shader location: samplerCube texture: irradiance
  RL_SHADER_LOC_MAP_PREFILTER     ← 24  ⍝ Shader location: samplerCube texture: prefilter
  RL_SHADER_LOC_MAP_BRDF          ← 25  ⍝ Shader location: sampler2d texture: brdf
:EndNamespace

:Namespace rlShaderUniformDataType ⍝ Shader uniform data type
  RL_SHADER_UNIFORM_FLOAT     ← 0  ⍝ Shader uniform type: float
  RL_SHADER_UNIFORM_VEC2      ← 1  ⍝ Shader uniform type: vec2 (2 float)
  RL_SHADER_UNIFORM_VEC3      ← 2  ⍝ Shader uniform type: vec3 (3 float)
  RL_SHADER_UNIFORM_VEC4      ← 3  ⍝ Shader uniform type: vec4 (4 float)
  RL_SHADER_UNIFORM_INT       ← 4  ⍝ Shader uniform type: int
  RL_SHADER_UNIFORM_IVEC2     ← 5  ⍝ Shader uniform type: ivec2 (2 int)
  RL_SHADER_UNIFORM_IVEC3     ← 6  ⍝ Shader uniform type: ivec3 (3 int)
  RL_SHADER_UNIFORM_IVEC4     ← 7  ⍝ Shader uniform type: ivec4 (4 int)
  RL_SHADER_UNIFORM_SAMPLER2D ← 8  ⍝ Shader uniform type: sampler2d
:EndNamespace

:Namespace rlShaderAttributeDataType ⍝ Shader attribute data types
  RL_SHADER_ATTRIB_FLOAT ← 0  ⍝ Shader attribute type: float
  RL_SHADER_ATTRIB_VEC2  ← 1  ⍝ Shader attribute type: vec2 (2 float)
  RL_SHADER_ATTRIB_VEC3  ← 2  ⍝ Shader attribute type: vec3 (3 float)
  RL_SHADER_ATTRIB_VEC4  ← 3  ⍝ Shader attribute type: vec4 (4 float)
:EndNamespace

:Namespace rlFramebufferAttachType ⍝ Framebuffer attachment type
  RL_ATTACHMENT_COLOR_CHANNEL0 ← 0    ⍝ Framebuffer attachment type: color 0
  RL_ATTACHMENT_COLOR_CHANNEL1 ← 1    ⍝ Framebuffer attachment type: color 1
  RL_ATTACHMENT_COLOR_CHANNEL2 ← 2    ⍝ Framebuffer attachment type: color 2
  RL_ATTACHMENT_COLOR_CHANNEL3 ← 3    ⍝ Framebuffer attachment type: color 3
  RL_ATTACHMENT_COLOR_CHANNEL4 ← 4    ⍝ Framebuffer attachment type: color 4
  RL_ATTACHMENT_COLOR_CHANNEL5 ← 5    ⍝ Framebuffer attachment type: color 5
  RL_ATTACHMENT_COLOR_CHANNEL6 ← 6    ⍝ Framebuffer attachment type: color 6
  RL_ATTACHMENT_COLOR_CHANNEL7 ← 7    ⍝ Framebuffer attachment type: color 7
  RL_ATTACHMENT_DEPTH          ← 100  ⍝ Framebuffer attachment type: depth
  RL_ATTACHMENT_STENCIL        ← 200  ⍝ Framebuffer attachment type: stencil
:EndNamespace

:Namespace rlFramebufferAttachTextureType ⍝ Framebuffer texture attachment type
  RL_ATTACHMENT_CUBEMAP_POSITIVE_X ← 0    ⍝ Framebuffer texture attachment type: cubemap, +X side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_X ← 1    ⍝ Framebuffer texture attachment type: cubemap, -X side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Y ← 2    ⍝ Framebuffer texture attachment type: cubemap, +Y side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y ← 3    ⍝ Framebuffer texture attachment type: cubemap, -Y side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Z ← 4    ⍝ Framebuffer texture attachment type: cubemap, +Z side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z ← 5    ⍝ Framebuffer texture attachment type: cubemap, -Z side
  RL_ATTACHMENT_TEXTURE2D          ← 100  ⍝ Framebuffer texture attachment type: texture2d
  RL_ATTACHMENT_RENDERBUFFER       ← 200  ⍝ Framebuffer texture attachment type: renderbuffer
:EndNamespace

:Namespace rlCullMode ⍝ Face culling mode
  RL_CULL_FACE_FRONT ← 0  ⍝
  RL_CULL_FACE_BACK  ← 1  ⍝
:EndNamespace



Matrix ← ⍬ ⍝ Matrix, 4x4 components, column major, OpenGL style, right handed
  Matrix,←⊂ f ⍝ m0   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f ⍝ m4   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f ⍝ m8   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f ⍝ m12  ⍝ Matrix first row (4 components)
  Matrix,←⊂ f ⍝ m1   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f ⍝ m5   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f ⍝ m9   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f ⍝ m13  ⍝ Matrix second row (4 components)
  Matrix,←⊂ f ⍝ m2   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f ⍝ m6   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f ⍝ m10  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f ⍝ m14  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f ⍝ m3   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f ⍝ m7   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f ⍝ m11  ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f ⍝ m15  ⍝ Matrix fourth row (4 components)

rlVertexBuffer ← ⍬ ⍝ Dynamic vertex buffers (position + texcoords + colors + indices arrays)
  rlVertexBuffer,←⊂ i       ⍝ elementCount  ⍝ Number of elements in the buffer (QUADS)
  rlVertexBuffer,←⊂ '=',f   ⍝ vertices      ⍝ Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  rlVertexBuffer,←⊂ '=',f   ⍝ texcoords     ⍝ Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  rlVertexBuffer,←⊂ ustr    ⍝ colors        ⍝ Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  rlVertexBuffer,←⊂ '=',u   ⍝ indices       ⍝ Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  rlVertexBuffer,←⊂ u       ⍝ vaoId         ⍝ OpenGL Vertex Array Object id
  rlVertexBuffer,←⊂ u,'[4]' ⍝ vboId         ⍝ OpenGL Vertex Buffer Objects id (4 types of vertex data)

rlDrawCall ← ⍬ ⍝ of those state-change happens (this is done in core module)
  rlDrawCall,←⊂ i ⍝ mode             ⍝ Drawing mode: LINES, TRIANGLES, QUADS
  rlDrawCall,←⊂ i ⍝ vertexCount      ⍝ Number of vertex of the draw
  rlDrawCall,←⊂ i ⍝ vertexAlignment  ⍝ Number of vertex required for index alignment (LINES, TRIANGLES)
  rlDrawCall,←⊂ u ⍝ textureId        ⍝ Texture id to be used on the draw -> Use to create new draw call if changes

rlRenderBatch ← ⍬ ⍝ rlRenderBatch type
  rlRenderBatch,←⊂ i                  ⍝ bufferCount    ⍝ Number of vertex buffers (multi-buffering support)
  rlRenderBatch,←⊂ i                  ⍝ currentBuffer  ⍝ Current buffer tracking in case of multi-buffering
  rlRenderBatch,←⊂ '=',rlVertexBuffer ⍝ vertexBuffer   ⍝ Dynamic buffer(s) for vertex data
  rlRenderBatch,←⊂ '=',rlDrawCall     ⍝ draws          ⍝ Draw calls array, depends on textureId
  rlRenderBatch,←⊂ i                  ⍝ drawCounter    ⍝ Draw calls counter
  rlRenderBatch,←⊂ f                  ⍝ currentDepth   ⍝ Current depth value for next draw

rlglData ← ⍬ ⍝
  rlglData,←⊂ '=',rlRenderBatch                        ⍝ currentBatch               ⍝ Current render batch
  rlglData,←⊂ rlRenderBatch                            ⍝ defaultBatch               ⍝ Default internal render batch
  rlglData,←⊂ i                                        ⍝ vertexCounter              ⍝ Current active render batch vertex counter (generic, used for all batches)
  rlglData,←⊂ f                                        ⍝ texcoordx                  ⍝ Current active texture coordinate (added on glVertex*())
  rlglData,←⊂ f                                        ⍝ texcoordy                  ⍝ Current active texture coordinate (added on glVertex*())
  rlglData,←⊂ f                                        ⍝ normalx                    ⍝ Current active normal (added on glVertex*())
  rlglData,←⊂ f                                        ⍝ normaly                    ⍝ Current active normal (added on glVertex*())
  rlglData,←⊂ f                                        ⍝ normalz                    ⍝ Current active normal (added on glVertex*())
  rlglData,←⊂ u1                                       ⍝ colorr                     ⍝ Current active color (added on glVertex*())
  rlglData,←⊂ u1                                       ⍝ colorg                     ⍝ Current active color (added on glVertex*())
  rlglData,←⊂ u1                                       ⍝ colorb                     ⍝ Current active color (added on glVertex*())
  rlglData,←⊂ u1                                       ⍝ colora                     ⍝ Current active color (added on glVertex*())
  rlglData,←⊂ i                                        ⍝ currentMatrixMode          ⍝ Current matrix mode
  rlglData,←⊂ '=',Matrix                               ⍝ currentMatrix              ⍝ Current matrix pointer
  rlglData,←⊂ Matrix                                   ⍝ modelview                  ⍝ Default modelview matrix
  rlglData,←⊂ Matrix                                   ⍝ projection                 ⍝ Default projection matrix
  rlglData,←⊂ Matrix                                   ⍝ transform                  ⍝ Transform matrix to be used with rlTranslate, rlRotate, rlScale
  rlglData,←⊂ bool                                     ⍝ transformRequired          ⍝ Require transform matrix application to current draw-call vertex (if required)
  rlglData,←⊂ Matrix,'[EZIS_KCATS_XIRTAM_XAM_LR]'      ⍝ stack                      ⍝ Matrix stack for push/pop
  rlglData,←⊂ i                                        ⍝ stackCounter               ⍝ Matrix stack counter
  rlglData,←⊂ u                                        ⍝ defaultTextureId           ⍝ Default texture used on shapes/poly drawing (required by shader)
  rlglData,←⊂ u,'[STINU_ERUTXET_XAM_HCTAB_TLUAFED_LR]' ⍝ activeTextureId            ⍝ Active texture ids to be enabled on batch drawing (0 active by default)
  rlglData,←⊂ u                                        ⍝ defaultVShaderId           ⍝ Default vertex shader id (used by default shader program)
  rlglData,←⊂ u                                        ⍝ defaultFShaderId           ⍝ Default fragment shader id (used by default shader program)
  rlglData,←⊂ u                                        ⍝ defaultShaderId            ⍝ Default shader program id, supports vertex color and diffuse texture
  rlglData,←⊂ '=',i                                    ⍝ defaultShaderLocs          ⍝ Default shader locations pointer to be used on rendering
  rlglData,←⊂ u                                        ⍝ currentShaderId            ⍝ Current shader id to be used on rendering (by default, defaultShaderId)
  rlglData,←⊂ '=',i                                    ⍝ currentShaderLocs          ⍝ Current shader locations pointer to be used on rendering (by default, defaultShaderLocs)
  rlglData,←⊂ bool                                     ⍝ stereoRender               ⍝ Stereo rendering flag
  rlglData,←⊂ Matrix,'[2]'                             ⍝ projectionStereo           ⍝ VR stereo rendering eyes projection matrices
  rlglData,←⊂ Matrix,'[2]'                             ⍝ viewOffsetStereo           ⍝ VR stereo rendering eyes view offset matrices
  rlglData,←⊂ i                                        ⍝ currentBlendMode           ⍝ Blending mode active
  rlglData,←⊂ i                                        ⍝ glBlendSrcFactor           ⍝ Blending source factor
  rlglData,←⊂ i                                        ⍝ glBlendDstFactor           ⍝ Blending destination factor
  rlglData,←⊂ i                                        ⍝ glBlendEquation            ⍝ Blending equation
  rlglData,←⊂ i                                        ⍝ glBlendSrcFactorRGB        ⍝ Blending source RGB factor
  rlglData,←⊂ i                                        ⍝ glBlendDestFactorRGB       ⍝ Blending destination RGB factor
  rlglData,←⊂ i                                        ⍝ glBlendSrcFactorAlpha      ⍝ Blending source alpha factor
  rlglData,←⊂ i                                        ⍝ glBlendDestFactorAlpha     ⍝ Blending destination alpha factor
  rlglData,←⊂ i                                        ⍝ glBlendEquationRGB         ⍝ Blending equation for RGB
  rlglData,←⊂ i                                        ⍝ glBlendEquationAlpha       ⍝ Blending equation for alpha
  rlglData,←⊂ bool                                     ⍝ glCustomBlendModeModified  ⍝ Custom blending factor and equation modification status
  rlglData,←⊂ i                                        ⍝ framebufferWidth           ⍝ Current framebuffer width
  rlglData,←⊂ i                                        ⍝ framebufferHeight          ⍝ Current framebuffer height

⍝ Mode is either 3:All changes, 2:only manual changes 1:only automatic changes, or 0: no changes
∇{mode} Init pathToBinaryArg
:If ⍬≡pathToBinaryArg
  pathToBinaryArg ← {⍵:'../libtemp-c-raylib.so'⋄'..\raylib.dll'}'Linux'≡'-64'~⍨⊃#⎕WG'APLVersion'
:Endif
pathToBinary ← pathToBinaryArg
:If 0=⎕NC 'mode'
  mode ← 3 ⍝ Default is All changes
:EndIf

'rlMatrixModeRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlMatrixMode'                       (,⊂ i                     )) ⍝ mode                                                                 ⍝ Choose the current matrix to be transformed
'rlPushMatrixRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlPushMatrix'                       (⍬                        )) ⍝                                                                      ⍝ Push the current matrix to stack
'rlPopMatrixRAYLIB'                       (⎕NA⊢⎕NA⍤⊢)               R('rlPopMatrix'                        (⍬                        )) ⍝                                                                      ⍝ Pop latest inserted matrix from stack
'rlLoadIdentityRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlLoadIdentity'                     (⍬                        )) ⍝                                                                      ⍝ Reset current matrix to identity matrix
'rlTranslatefRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlTranslatef'                       (f f f                    )) ⍝ x y z                                                                ⍝ Multiply the current matrix by a translation matrix
'rlRotatefRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlRotatef'                          (f f f f                  )) ⍝ angle x y z                                                          ⍝ Multiply the current matrix by a rotation matrix
'rlScalefRAYLIB'                          (⎕NA⊢⎕NA⍤⊢)               R('rlScalef'                           (f f f                    )) ⍝ x y z                                                                ⍝ Multiply the current matrix by a scaling matrix
'rlMultMatrixfRAYLIB'                     (⎕NA⊢⎕NA⍤⊢)               R('rlMultMatrixf'                      (,⊂ ('=',f)               )) ⍝ matf                                                                 ⍝ Multiply the current matrix by another matrix
'rlFrustumRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlFrustum'                          (f8 f8 f8 f8 f8 f8        )) ⍝ left right bottom top znear zfar                                     ⍝
'rlOrthoRAYLIB'                           (⎕NA⊢⎕NA⍤⊢)               R('rlOrtho'                            (f8 f8 f8 f8 f8 f8        )) ⍝ left right bottom top znear zfar                                     ⍝
'rlViewportRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlViewport'                         (i i i i                  )) ⍝ x y width height                                                     ⍝ Set the viewport area
'rlBeginRAYLIB'                           (⎕NA⊢⎕NA⍤⊢)               R('rlBegin'                            (,⊂ i                     )) ⍝ mode                                                                 ⍝ Initialize drawing mode (how to organize vertex)
'rlEndRAYLIB'                             (⎕NA⊢⎕NA⍤⊢)               R('rlEnd'                              (⍬                        )) ⍝                                                                      ⍝ Finish vertex providing
'rlVertex2iRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlVertex2i'                         (i i                      )) ⍝ x y                                                                  ⍝ Define one vertex (position) - 2 int
'rlVertex2fRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlVertex2f'                         (f f                      )) ⍝ x y                                                                  ⍝ Define one vertex (position) - 2 float
'rlVertex3fRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlVertex3f'                         (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (position) - 3 float
'rlTexCoord2fRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlTexCoord2f'                       (f f                      )) ⍝ x y                                                                  ⍝ Define one vertex (texture coordinate) - 2 float
'rlNormal3fRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlNormal3f'                         (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (normal) - 3 float
'rlColor4ubRAYLIB'                        (⎕NA⊢⎕NA⍤⊢)               R('rlColor4ub'                         (u1 u1 u1 u1              )) ⍝ r g b a                                                              ⍝ Define one vertex (color) - 4 byte
'rlColor3fRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlColor3f'                          (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (color) - 3 float
'rlColor4fRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlColor4f'                          (f f f f                  )) ⍝ x y z w                                                              ⍝ Define one vertex (color) - 4 float
'rlEnableVertexArrayRAYLIB'               (⎕NA⊢⎕NA⍤⊢) bool          R('rlEnableVertexArray'                (,⊂ u                     )) ⍝ vaoId                                                                ⍝ Enable vertex array (VAO, if supported)
'rlEnableVertexArrayRetPtrRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlEnableVertexArrayRetPtr'          (('>',bool) u             )) ⍝ vaoId                                                                ⍝ Enable vertex array (VAO, if supported)
'rlDisableVertexArrayRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlDisableVertexArray'               (⍬                        )) ⍝                                                                      ⍝ Disable vertex array (VAO, if supported)
'rlEnableVertexBufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlEnableVertexBuffer'               (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable vertex buffer (VBO)
'rlDisableVertexBufferRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlDisableVertexBuffer'              (⍬                        )) ⍝                                                                      ⍝ Disable vertex buffer (VBO)
'rlEnableVertexBufferElementRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlEnableVertexBufferElement'        (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable vertex buffer element (VBO element)
'rlDisableVertexBufferElementRAYLIB'      (⎕NA⊢⎕NA⍤⊢)               R('rlDisableVertexBufferElement'       (⍬                        )) ⍝                                                                      ⍝ Disable vertex buffer element (VBO element)
'rlEnableVertexAttributeRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlEnableVertexAttribute'            (,⊂ u                     )) ⍝ index                                                                ⍝ Enable vertex attribute index
'rlDisableVertexAttributeRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlDisableVertexAttribute'           (,⊂ u                     )) ⍝ index                                                                ⍝ Disable vertex attribute index
'rlActiveTextureSlotRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlActiveTextureSlot'                (,⊂ i                     )) ⍝ slot                                                                 ⍝ Select and active a texture slot
'rlEnableTextureRAYLIB'                   (⎕NA⊢⎕NA⍤⊢)               R('rlEnableTexture'                    (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable texture
'rlDisableTextureRAYLIB'                  (⎕NA⊢⎕NA⍤⊢)               R('rlDisableTexture'                   (⍬                        )) ⍝                                                                      ⍝ Disable texture
'rlEnableTextureCubemapRAYLIB'            (⎕NA⊢⎕NA⍤⊢)               R('rlEnableTextureCubemap'             (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable texture cubemap
'rlDisableTextureCubemapRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlDisableTextureCubemap'            (⍬                        )) ⍝                                                                      ⍝ Disable texture cubemap
'rlTextureParametersRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlTextureParameters'                (u i i                    )) ⍝ id param value                                                       ⍝ Set texture parameters (filter, wrap)
'rlCubemapParametersRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlCubemapParameters'                (u i i                    )) ⍝ id param value                                                       ⍝ Set cubemap parameters (filter, wrap)
'rlEnableShaderRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlEnableShader'                     (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable shader program
'rlDisableShaderRAYLIB'                   (⎕NA⊢⎕NA⍤⊢)               R('rlDisableShader'                    (⍬                        )) ⍝                                                                      ⍝ Disable shader program
'rlEnableFramebufferRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlEnableFramebuffer'                (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable render texture (fbo)
'rlDisableFramebufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlDisableFramebuffer'               (⍬                        )) ⍝                                                                      ⍝ Disable render texture (fbo), return to default framebuffer
'rlActiveDrawBuffersRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlActiveDrawBuffers'                (,⊂ i                     )) ⍝ count                                                                ⍝ Activate multiple draw color buffers
'rlBlitFramebufferRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlBlitFramebuffer'                  (i i i i i i i i i        )) ⍝ srcX srcY srcWidth srcHeight dstX dstY dstWidth dstHeight bufferMask ⍝ Blit active framebuffer to main framebuffer
'rlEnableColorBlendRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlEnableColorBlend'                 (⍬                        )) ⍝                                                                      ⍝ Enable color blending
'rlDisableColorBlendRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlDisableColorBlend'                (⍬                        )) ⍝                                                                      ⍝ Disable color blending
'rlEnableDepthTestRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlEnableDepthTest'                  (⍬                        )) ⍝                                                                      ⍝ Enable depth test
'rlDisableDepthTestRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlDisableDepthTest'                 (⍬                        )) ⍝                                                                      ⍝ Disable depth test
'rlEnableDepthMaskRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlEnableDepthMask'                  (⍬                        )) ⍝                                                                      ⍝ Enable depth write
'rlDisableDepthMaskRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlDisableDepthMask'                 (⍬                        )) ⍝                                                                      ⍝ Disable depth write
'rlEnableBackfaceCullingRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlEnableBackfaceCulling'            (⍬                        )) ⍝                                                                      ⍝ Enable backface culling
'rlDisableBackfaceCullingRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlDisableBackfaceCulling'           (⍬                        )) ⍝                                                                      ⍝ Disable backface culling
'rlSetCullFaceRAYLIB'                     (⎕NA⊢⎕NA⍤⊢)               R('rlSetCullFace'                      (,⊂ i                     )) ⍝ mode                                                                 ⍝ Set face culling mode
'rlEnableScissorTestRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlEnableScissorTest'                (⍬                        )) ⍝                                                                      ⍝ Enable scissor test
'rlDisableScissorTestRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlDisableScissorTest'               (⍬                        )) ⍝                                                                      ⍝ Disable scissor test
'rlScissorRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlScissor'                          (i i i i                  )) ⍝ x y width height                                                     ⍝ Scissor test
'rlEnableWireModeRAYLIB'                  (⎕NA⊢⎕NA⍤⊢)               R('rlEnableWireMode'                   (⍬                        )) ⍝                                                                      ⍝ Enable wire mode
'rlEnablePointModeRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlEnablePointMode'                  (⍬                        )) ⍝                                                                      ⍝ Enable point mode
'rlDisableWireModeRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlDisableWireMode'                  (⍬                        )) ⍝                                                                      ⍝ Disable wire mode ( and point ) maybe rename
'rlSetLineWidthRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlSetLineWidth'                     (,⊂ f                     )) ⍝ width                                                                ⍝ Set the line drawing width
'rlGetLineWidthRAYLIB'                    (⎕NA⊢⎕NA⍤⊢) f             R('rlGetLineWidth'                     (⍬                        )) ⍝                                                                      ⍝ Get the line drawing width
'rlGetLineWidthRetPtrRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlGetLineWidthRetPtr'               (,⊂ ('>',f)               )) ⍝                                                                      ⍝ Get the line drawing width
'rlEnableSmoothLinesRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlEnableSmoothLines'                (⍬                        )) ⍝                                                                      ⍝ Enable line aliasing
'rlDisableSmoothLinesRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlDisableSmoothLines'               (⍬                        )) ⍝                                                                      ⍝ Disable line aliasing
'rlEnableStereoRenderRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlEnableStereoRender'               (⍬                        )) ⍝                                                                      ⍝ Enable stereo rendering
'rlDisableStereoRenderRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlDisableStereoRender'              (⍬                        )) ⍝                                                                      ⍝ Disable stereo rendering
'rlIsStereoRenderEnabledRAYLIB'           (⎕NA⊢⎕NA⍤⊢) bool          R('rlIsStereoRenderEnabled'            (⍬                        )) ⍝                                                                      ⍝ Check if stereo render is enabled
'rlIsStereoRenderEnabledRetPtrRAYLIB'     (⎕NA⊢⎕NA⍤⊢)               R('rlIsStereoRenderEnabledRetPtr'      (,⊂ ('>',bool)            )) ⍝                                                                      ⍝ Check if stereo render is enabled
'rlClearColorRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlClearColor'                       (u1 u1 u1 u1              )) ⍝ r g b a                                                              ⍝ Clear color buffer with color
'rlClearScreenBuffersRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlClearScreenBuffers'               (⍬                        )) ⍝                                                                      ⍝ Clear used screen buffers (color and depth)
'rlCheckErrorsRAYLIB'                     (⎕NA⊢⎕NA⍤⊢)               R('rlCheckErrors'                      (⍬                        )) ⍝                                                                      ⍝ Check and log OpenGL error codes
'rlSetBlendModeRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlSetBlendMode'                     (,⊂ i                     )) ⍝ mode                                                                 ⍝ Set blending mode
'rlSetBlendFactorsRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlSetBlendFactors'                  (i i i                    )) ⍝ glSrcFactor glDstFactor glEquation                                   ⍝ Set blending mode factor and equation (using OpenGL factors)
'rlSetBlendFactorsSeparateRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlSetBlendFactorsSeparate'          (i i i i i i              )) ⍝ glSrcRGB glDstRGB glSrcAlpha glDstAlpha glEqRGB glEqAlpha            ⍝ Set blending mode factors and equations separately (using OpenGL factors)
'rlglInitRAYLIB'                          (⎕NA⊢⎕NA⍤⊢)               R('rlglInit'                           (i i                      )) ⍝ width height                                                         ⍝ Initialize rlgl (buffers, shaders, textures, states)
'rlglCloseRAYLIB'                         (⎕NA⊢⎕NA⍤⊢)               R('rlglClose'                          (⍬                        )) ⍝                                                                      ⍝ De-initialize rlgl (buffers, shaders, textures)
'rlLoadExtensionsRAYLIB'                  (⎕NA⊢⎕NA⍤⊢)               R('rlLoadExtensions'                   (,⊂ ptr                   )) ⍝ loader                                                               ⍝ Load OpenGL extensions (loader function required)
'rlGetVersionRAYLIB'                      (⎕NA⊢⎕NA⍤⊢) i             R('rlGetVersion'                       (⍬                        )) ⍝                                                                      ⍝ Get current OpenGL version
'rlGetVersionRetPtrRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlGetVersionRetPtr'                 (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get current OpenGL version
'rlSetFramebufferWidthRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlSetFramebufferWidth'              (,⊂ i                     )) ⍝ width                                                                ⍝ Set current framebuffer width
'rlGetFramebufferWidthRAYLIB'             (⎕NA⊢⎕NA⍤⊢) i             R('rlGetFramebufferWidth'              (⍬                        )) ⍝                                                                      ⍝ Get default framebuffer width
'rlGetFramebufferWidthRetPtrRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlGetFramebufferWidthRetPtr'        (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get default framebuffer width
'rlSetFramebufferHeightRAYLIB'            (⎕NA⊢⎕NA⍤⊢)               R('rlSetFramebufferHeight'             (,⊂ i                     )) ⍝ height                                                               ⍝ Set current framebuffer height
'rlGetFramebufferHeightRAYLIB'            (⎕NA⊢⎕NA⍤⊢) i             R('rlGetFramebufferHeight'             (⍬                        )) ⍝                                                                      ⍝ Get default framebuffer height
'rlGetFramebufferHeightRetPtrRAYLIB'      (⎕NA⊢⎕NA⍤⊢)               R('rlGetFramebufferHeightRetPtr'       (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get default framebuffer height
'rlGetTextureIdDefaultRAYLIB'             (⎕NA⊢⎕NA⍤⊢) u             R('rlGetTextureIdDefault'              (⍬                        )) ⍝                                                                      ⍝ Get default texture id
'rlGetTextureIdDefaultRetPtrRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlGetTextureIdDefaultRetPtr'        (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Get default texture id
'rlGetShaderIdDefaultRAYLIB'              (⎕NA⊢⎕NA⍤⊢) u             R('rlGetShaderIdDefault'               (⍬                        )) ⍝                                                                      ⍝ Get default shader id
'rlGetShaderIdDefaultRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlGetShaderIdDefaultRetPtr'         (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Get default shader id
'rlGetShaderLocsDefaultRAYLIB'            (⎕NA⊢⎕NA⍤⊢) ptr           R('rlGetShaderLocsDefault'             (⍬                        )) ⍝                                                                      ⍝ Get default shader locations
'rlGetShaderLocsDefaultRetPtrRAYLIB'      (⎕NA⊢⎕NA⍤⊢)               R('rlGetShaderLocsDefaultRetPtr'       (,⊂ ptr                   )) ⍝                                                                      ⍝ Get default shader locations
'rlLoadRenderBatchRAYLIB'                 (⎕NA⊢⎕NA⍤⊢) rlRenderBatch R('rlLoadRenderBatch'                  (i i                      )) ⍝ numBuffers bufferElements                                            ⍝ Load a render batch system
'rlLoadRenderBatchRetPtrRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlLoadRenderBatchRetPtr'            (('>',rlRenderBatch) i i  )) ⍝ numBuffers bufferElements                                            ⍝ Load a render batch system
'rlUnloadRenderBatchRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadRenderBatch'                (,⊂ rlRenderBatch         )) ⍝ batch                                                                ⍝ Unload render batch system
'rlDrawRenderBatchRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlDrawRenderBatch'                  (,⊂ ('=',rlRenderBatch)   )) ⍝ batch                                                                ⍝ Draw render batch data (Update->Draw->Reset)
'rlSetRenderBatchActiveRAYLIB'            (⎕NA⊢⎕NA⍤⊢)               R('rlSetRenderBatchActive'             (,⊂ ('=',rlRenderBatch)   )) ⍝ batch                                                                ⍝ Set the active render batch for rlgl (NULL for default internal)
'rlDrawRenderBatchActiveRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlDrawRenderBatchActive'            (⍬                        )) ⍝                                                                      ⍝ Update and draw internal render batch
'rlCheckRenderBatchLimitRAYLIB'           (⎕NA⊢⎕NA⍤⊢) bool          R('rlCheckRenderBatchLimit'            (,⊂ i                     )) ⍝ vCount                                                               ⍝ Check internal buffer overflow for a given number of vertex
'rlCheckRenderBatchLimitRetPtrRAYLIB'     (⎕NA⊢⎕NA⍤⊢)               R('rlCheckRenderBatchLimitRetPtr'      (('>',bool) i             )) ⍝ vCount                                                               ⍝ Check internal buffer overflow for a given number of vertex
'rlSetTextureRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlSetTexture'                       (,⊂ u                     )) ⍝ id                                                                   ⍝ Set current texture for render batch and check buffers limits
'rlLoadVertexArrayRAYLIB'                 (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadVertexArray'                  (⍬                        )) ⍝                                                                      ⍝ Load vertex array (vao) if supported
'rlLoadVertexArrayRetPtrRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlLoadVertexArrayRetPtr'            (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Load vertex array (vao) if supported
'rlLoadVertexBufferRAYLIB'                (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadVertexBuffer'                 (ptr i bool               )) ⍝ buffer size dynamic                                                  ⍝ Load a vertex buffer attribute
'rlLoadVertexBufferRetPtrRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlLoadVertexBufferRetPtr'           (('>',u) ptr i bool       )) ⍝ buffer size dynamic                                                  ⍝ Load a vertex buffer attribute
'rlLoadVertexBufferElementRAYLIB'         (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadVertexBufferElement'          (ptr i bool               )) ⍝ buffer size dynamic                                                  ⍝ Load a new attributes element buffer
'rlLoadVertexBufferElementRetPtrRAYLIB'   (⎕NA⊢⎕NA⍤⊢)               R('rlLoadVertexBufferElementRetPtr'    (('>',u) ptr i bool       )) ⍝ buffer size dynamic                                                  ⍝ Load a new attributes element buffer
'rlUpdateVertexBufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlUpdateVertexBuffer'               (u ptr i i                )) ⍝ bufferId data dataSize offset                                        ⍝ Update GPU buffer with new data
'rlUpdateVertexBufferElementsRAYLIB'      (⎕NA⊢⎕NA⍤⊢)               R('rlUpdateVertexBufferElements'       (u ptr i i                )) ⍝ id data dataSize offset                                              ⍝ Update vertex buffer elements with new data
'rlUnloadVertexArrayRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadVertexArray'                (,⊂ u                     )) ⍝ vaoId                                                                ⍝
'rlUnloadVertexBufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadVertexBuffer'               (,⊂ u                     )) ⍝ vboId                                                                ⍝
'rlSetVertexAttributeRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlSetVertexAttribute'               (u i i bool i ptr         )) ⍝ index compSize type normalized stride pointer                        ⍝
'rlSetVertexAttributeDivisorRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlSetVertexAttributeDivisor'        (u i                      )) ⍝ index divisor                                                        ⍝
'rlSetVertexAttributeDefaultRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlSetVertexAttributeDefault'        (i ptr i i                )) ⍝ locIndex value attribType count                                      ⍝ Set vertex attribute default value
'rlDrawVertexArrayRAYLIB'                 (⎕NA⊢⎕NA⍤⊢)               R('rlDrawVertexArray'                  (i i                      )) ⍝ offset count                                                         ⍝
'rlDrawVertexArrayElementsRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlDrawVertexArrayElements'          (i i ptr                  )) ⍝ offset count buffer                                                  ⍝
'rlDrawVertexArrayInstancedRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlDrawVertexArrayInstanced'         (i i i                    )) ⍝ offset count instances                                               ⍝
'rlDrawVertexArrayElementsInstancedRAYLIB'(⎕NA⊢⎕NA⍤⊢)               R('rlDrawVertexArrayElementsInstanced' (i i ptr i                )) ⍝ offset count buffer instances                                        ⍝
'rlLoadTextureRAYLIB'                     (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadTexture'                      (ptr i i i i              )) ⍝ data width height format mipmapCount                                 ⍝ Load texture in GPU
'rlLoadTextureRetPtrRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlLoadTextureRetPtr'                (('>',u) ptr i i i i      )) ⍝ data width height format mipmapCount                                 ⍝ Load texture in GPU
'rlLoadTextureDepthRAYLIB'                (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadTextureDepth'                 (i i bool                 )) ⍝ width height useRenderBuffer                                         ⍝ Load depth texture/renderbuffer (to be attached to fbo)
'rlLoadTextureDepthRetPtrRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlLoadTextureDepthRetPtr'           (('>',u) i i bool         )) ⍝ width height useRenderBuffer                                         ⍝ Load depth texture/renderbuffer (to be attached to fbo)
'rlLoadTextureCubemapRAYLIB'              (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadTextureCubemap'               (ptr i i                  )) ⍝ data size format                                                     ⍝ Load texture cubemap
'rlLoadTextureCubemapRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlLoadTextureCubemapRetPtr'         (('>',u) ptr i i          )) ⍝ data size format                                                     ⍝ Load texture cubemap
'rlUpdateTextureRAYLIB'                   (⎕NA⊢⎕NA⍤⊢)               R('rlUpdateTexture'                    (u i i i i i ptr          )) ⍝ id offsetX offsetY width height format data                          ⍝ Update GPU texture with new data
'rlGetGlTextureFormatsRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlGetGlTextureFormats'              (i ('=',u) ('=',u) ('=',u))) ⍝ format glInternalFormat glFormat glType                              ⍝ Get OpenGL internal formats
'rlGetPixelFormatNameRAYLIB'              (⎕NA⊢⎕NA⍤⊢) (ptr⊣str)     R('rlGetPixelFormatName'               (,⊂ u                     )) ⍝ format                                                               ⍝ Get name string for pixel format
'rlGetPixelFormatNameRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlGetPixelFormatNameRetPtr'         (('>',str) u              )) ⍝ format                                                               ⍝ Get name string for pixel format
'rlUnloadTextureRAYLIB'                   (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadTexture'                    (,⊂ u                     )) ⍝ id                                                                   ⍝ Unload texture from GPU memory
'rlGenTextureMipmapsRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlGenTextureMipmaps'                (u i i i ('=',i)          )) ⍝ id width height format mipmaps                                       ⍝ Generate mipmap data for selected texture
'rlReadTexturePixelsRAYLIB'               (⎕NA⊢⎕NA⍤⊢) ptr           R('rlReadTexturePixels'                (u i i i                  )) ⍝ id width height format                                               ⍝ Read texture pixel data
'rlReadTexturePixelsRetPtrRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlReadTexturePixelsRetPtr'          (('>',ptr) u i i i        )) ⍝ id width height format                                               ⍝ Read texture pixel data
'rlReadScreenPixelsRAYLIB'                (⎕NA⊢⎕NA⍤⊢) (ptr⊣ustr)    R('rlReadScreenPixels'                 (i i                      )) ⍝ width height                                                         ⍝ Read screen pixel data (color buffer)
'rlReadScreenPixelsRetPtrRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlReadScreenPixelsRetPtr'           (('>',ustr) i i           )) ⍝ width height                                                         ⍝ Read screen pixel data (color buffer)
'rlLoadFramebufferRAYLIB'                 (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadFramebuffer'                  (i i                      )) ⍝ width height                                                         ⍝ Load an empty framebuffer
'rlLoadFramebufferRetPtrRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlLoadFramebufferRetPtr'            (('>',u) i i              )) ⍝ width height                                                         ⍝ Load an empty framebuffer
'rlFramebufferAttachRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlFramebufferAttach'                (u u i i i                )) ⍝ fboId texId attachType texType mipLevel                              ⍝ Attach texture/renderbuffer to a framebuffer
'rlFramebufferCompleteRAYLIB'             (⎕NA⊢⎕NA⍤⊢) bool          R('rlFramebufferComplete'              (,⊂ u                     )) ⍝ id                                                                   ⍝ Verify framebuffer is complete
'rlFramebufferCompleteRetPtrRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlFramebufferCompleteRetPtr'        (('>',bool) u             )) ⍝ id                                                                   ⍝ Verify framebuffer is complete
'rlUnloadFramebufferRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadFramebuffer'                (,⊂ u                     )) ⍝ id                                                                   ⍝ Delete framebuffer from GPU
'rlLoadShaderCodeRAYLIB'                  (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadShaderCode'                   (str str                  )) ⍝ vsCode fsCode                                                        ⍝ Load shader from code strings
'rlLoadShaderCodeRetPtrRAYLIB'            (⎕NA⊢⎕NA⍤⊢)               R('rlLoadShaderCodeRetPtr'             (('>',u) str str          )) ⍝ vsCode fsCode                                                        ⍝ Load shader from code strings
'rlCompileShaderRAYLIB'                   (⎕NA⊢⎕NA⍤⊢) u             R('rlCompileShader'                    (str i                    )) ⍝ shaderCode type                                                      ⍝ Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
'rlCompileShaderRetPtrRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlCompileShaderRetPtr'              (('>',u) str i            )) ⍝ shaderCode type                                                      ⍝ Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
'rlLoadShaderProgramRAYLIB'               (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadShaderProgram'                (u u                      )) ⍝ vShaderId fShaderId                                                  ⍝ Load custom shader program
'rlLoadShaderProgramRetPtrRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlLoadShaderProgramRetPtr'          (('>',u) u u              )) ⍝ vShaderId fShaderId                                                  ⍝ Load custom shader program
'rlUnloadShaderProgramRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadShaderProgram'              (,⊂ u                     )) ⍝ id                                                                   ⍝ Unload shader program
'rlGetLocationUniformRAYLIB'              (⎕NA⊢⎕NA⍤⊢) i             R('rlGetLocationUniform'               (u str                    )) ⍝ shaderId uniformName                                                 ⍝ Get shader location uniform
'rlGetLocationUniformRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlGetLocationUniformRetPtr'         (('>',i) u str            )) ⍝ shaderId uniformName                                                 ⍝ Get shader location uniform
'rlGetLocationAttribRAYLIB'               (⎕NA⊢⎕NA⍤⊢) i             R('rlGetLocationAttrib'                (u str                    )) ⍝ shaderId attribName                                                  ⍝ Get shader location attribute
'rlGetLocationAttribRetPtrRAYLIB'         (⎕NA⊢⎕NA⍤⊢)               R('rlGetLocationAttribRetPtr'          (('>',i) u str            )) ⍝ shaderId attribName                                                  ⍝ Get shader location attribute
'rlSetUniformRAYLIB'                      (⎕NA⊢⎕NA⍤⊢)               R('rlSetUniform'                       (i ptr i i                )) ⍝ locIndex value uniformType count                                     ⍝ Set shader value uniform
'rlSetUniformMatrixRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlSetUniformMatrix'                 (i Matrix                 )) ⍝ locIndex mat                                                         ⍝ Set shader value matrix
'rlSetUniformSamplerRAYLIB'               (⎕NA⊢⎕NA⍤⊢)               R('rlSetUniformSampler'                (i u                      )) ⍝ locIndex textureId                                                   ⍝ Set shader value sampler
'rlSetShaderRAYLIB'                       (⎕NA⊢⎕NA⍤⊢)               R('rlSetShader'                        (u ('=',i)                )) ⍝ id locs                                                              ⍝ Set shader currently active (id and locations)
'rlLoadComputeShaderProgramRAYLIB'        (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadComputeShaderProgram'         (,⊂ u                     )) ⍝ shaderId                                                             ⍝ Load compute shader program
'rlLoadComputeShaderProgramRetPtrRAYLIB'  (⎕NA⊢⎕NA⍤⊢)               R('rlLoadComputeShaderProgramRetPtr'   (('>',u) u                )) ⍝ shaderId                                                             ⍝ Load compute shader program
'rlComputeShaderDispatchRAYLIB'           (⎕NA⊢⎕NA⍤⊢)               R('rlComputeShaderDispatch'            (u u u                    )) ⍝ groupX groupY groupZ                                                 ⍝ Dispatch compute shader (equivalent to *draw* for graphics pipeline)
'rlLoadShaderBufferRAYLIB'                (⎕NA⊢⎕NA⍤⊢) u             R('rlLoadShaderBuffer'                 (u ptr i                  )) ⍝ size data usageHint                                                  ⍝ Load shader storage buffer object (SSBO)
'rlLoadShaderBufferRetPtrRAYLIB'          (⎕NA⊢⎕NA⍤⊢)               R('rlLoadShaderBufferRetPtr'           (('>',u) u ptr i          )) ⍝ size data usageHint                                                  ⍝ Load shader storage buffer object (SSBO)
'rlUnloadShaderBufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlUnloadShaderBuffer'               (,⊂ u                     )) ⍝ ssboId                                                               ⍝ Unload shader storage buffer object (SSBO)
'rlUpdateShaderBufferRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlUpdateShaderBuffer'               (u ptr u u                )) ⍝ id data dataSize offset                                              ⍝ Update SSBO buffer data
'rlBindShaderBufferRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlBindShaderBuffer'                 (u u                      )) ⍝ id index                                                             ⍝ Bind SSBO buffer
'rlReadShaderBufferRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlReadShaderBuffer'                 (u ptr u u                )) ⍝ id dest count offset                                                 ⍝ Read SSBO buffer data (GPU->CPU)
'rlCopyShaderBufferRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlCopyShaderBuffer'                 (u u u u u                )) ⍝ destId srcId destOffset srcOffset count                              ⍝ Copy SSBO data between buffers
'rlGetShaderBufferSizeRAYLIB'             (⎕NA⊢⎕NA⍤⊢) u             R('rlGetShaderBufferSize'              (,⊂ u                     )) ⍝ id                                                                   ⍝ Get SSBO buffer size
'rlGetShaderBufferSizeRetPtrRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlGetShaderBufferSizeRetPtr'        (('>',u) u                )) ⍝ id                                                                   ⍝ Get SSBO buffer size
'rlBindImageTextureRAYLIB'                (⎕NA⊢⎕NA⍤⊢)               R('rlBindImageTexture'                 (u u i bool               )) ⍝ id index format readonly                                             ⍝ Bind image texture
'rlGetMatrixModelviewRAYLIB'              (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixModelview'               (⍬                        )) ⍝                                                                      ⍝ Get internal modelview matrix
'rlGetMatrixModelviewRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixModelviewRetPtr'         (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal modelview matrix
'rlGetMatrixProjectionRAYLIB'             (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixProjection'              (⍬                        )) ⍝                                                                      ⍝ Get internal projection matrix
'rlGetMatrixProjectionRetPtrRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixProjectionRetPtr'        (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal projection matrix
'rlGetMatrixTransformRAYLIB'              (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixTransform'               (⍬                        )) ⍝                                                                      ⍝ Get internal accumulated transform matrix
'rlGetMatrixTransformRetPtrRAYLIB'        (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixTransformRetPtr'         (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal accumulated transform matrix
'rlGetMatrixProjectionStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixProjectionStereo'        (,⊂ i                     )) ⍝ eye                                                                  ⍝ Get internal projection matrix for stereo render (selected eye)
'rlGetMatrixProjectionStereoRetPtrRAYLIB' (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixProjectionStereoRetPtr'  (('>',Matrix) i           )) ⍝ eye                                                                  ⍝ Get internal projection matrix for stereo render (selected eye)
'rlGetMatrixViewOffsetStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixViewOffsetStereo'        (,⊂ i                     )) ⍝ eye                                                                  ⍝ Get internal view offset matrix for stereo render (selected eye)
'rlGetMatrixViewOffsetStereoRetPtrRAYLIB' (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixViewOffsetStereoRetPtr'  (('>',Matrix) i           )) ⍝ eye                                                                  ⍝ Get internal view offset matrix for stereo render (selected eye)
'rlSetMatrixProjectionRAYLIB'             (⎕NA⊢⎕NA⍤⊢)               R('rlSetMatrixProjection'              (,⊂ Matrix                )) ⍝ proj                                                                 ⍝ Set a custom projection matrix (replaces internal projection matrix)
'rlSetMatrixModelviewRAYLIB'              (⎕NA⊢⎕NA⍤⊢)               R('rlSetMatrixModelview'               (,⊂ Matrix                )) ⍝ view                                                                 ⍝ Set a custom modelview matrix (replaces internal modelview matrix)
'rlSetMatrixProjectionStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlSetMatrixProjectionStereo'        (Matrix Matrix            )) ⍝ right left                                                           ⍝ Set eyes projection matrices for stereo rendering
'rlSetMatrixViewOffsetStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢)               R('rlSetMatrixViewOffsetStereo'        (Matrix Matrix            )) ⍝ right left                                                           ⍝ Set eyes view offsets matrices for stereo rendering
'rlLoadDrawCubeRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlLoadDrawCube'                     (⍬                        )) ⍝                                                                      ⍝ Load and draw a cube
'rlLoadDrawQuadRAYLIB'                    (⎕NA⊢⎕NA⍤⊢)               R('rlLoadDrawQuad'                     (⍬                        )) ⍝                                                                      ⍝ Load and draw a quad
'rlGetMatrixProjectionStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixProjectionStereo'        (,⊂ i                     )) ⍝ eye                                                                  ⍝
'rlGetMatrixProjectionStereoRetPtrRAYLIB' (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixProjectionStereoRetPtr'  (('>',Matrix) i           )) ⍝ eye                                                                  ⍝
'rlGetMatrixViewOffsetStereoRAYLIB'       (⎕NA⊢⎕NA⍤⊢) Matrix        R('rlGetMatrixViewOffsetStereo'        (,⊂ i                     )) ⍝ eye                                                                  ⍝
'rlGetMatrixViewOffsetStereoRetPtrRAYLIB' (⎕NA⊢⎕NA⍤⊢)               R('rlGetMatrixViewOffsetStereoRetPtr'  (('>',Matrix) i           )) ⍝ eye                                                                  ⍝
AfterDefaultDefinitions mode
∇
:EndNamespace