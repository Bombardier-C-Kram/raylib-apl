
:Namespace raylib
⍝ THIS TEXT HAS BEEN AUTOGENERATED

⍝ Makes an importer that improves the ffi function creation syntax
∇ OutputStr ← {outType} MakeImporter (pathToBin funcName inpTypes)
    ;NestedStructToStr ;NestedStructToStrReturn
  ⍝ outType's default is ''
  :If 0=⎕NC'outType'
    outType←''
  :EndIf

  NestedStructToStr ← {
    2=+/∧\'<=>'∊⍨⍵ : '=P'
    1≥|≡⍵:⍵
    structTypes ← PadStruct ⍵/⍨m←×|≡¨⍵
    (left right) ← {n←⍵∊'[]',⎕D⋄((~n)/⍵)(n/⍵)}(~m)/⍵
    structTypes ← ∇¨structTypes
    structTypes ← (⊂,'P')@('<=>'∊⍨⊃¨)structTypes
    left,right,⍨'{','}',⍨1↓⊃,/' ',¨structTypes
  }
  NestedStructToStrReturn ← {
    ((,'=')≢1↑⍵)∧1≥|≡⍵:⍵
    ptr
  }
  OutputStr ← (NestedStructToStrReturn outType),' ',pathToBin,'|',funcName,⊃,/' ',¨NestedStructToStr¨inpTypes
∇

⍝ predefined C types
bool ← 'I1'
c    ← 'I1'
i    ← 'I4'
f    ← 'F4'
u    ← 'U4'
i1   ← 'I1'
u1   ← 'U1'
u8   ← 'U8'
str  ← '=0C1'
ustr ← '=C1'
ptr  ← ,'P'
f8   ← 'F8'
i8   ← 'I8'
u2   ← 'U2'

R ← {⍺←''⋄⍺ MakeImporter (⊂pathToRaylibBinary),⍵}

types ← (i u i1 ptr f8 i8 u2 f u1 u8 'F4[2]' 'F4[4]' 'U1[32]' 'I4[4]')
sizes ← (4 4  1 8    8  8  2 4  1  8   8       8       8        8    )
maxAllignment ← 8

∇ r ← StructPaddingNeeded fieldSizes
    ;alignedStructSizes
    ;lastSize
  alignedStructSizes ← ,0
  :For size :In fieldSizes
    lastSize ← ⊃⌽alignedStructSizes
    :If maxAllignment < size+lastSize
      alignedStructSizes ,← size
    :Else
      alignedStructSizes ↓⍨← ¯1
      alignedStructSizes ,← maxAllignment,lastSize+size
    :EndIf
  :EndFor
  alignedStructSizes ↓⍨← 1
  r ← maxAllignment-alignedStructSizes
∇

∇ r ← PadStruct struct
    ;nestMask;structSizes
  struct ~← '[]',⎕D ⍝ TODO check if this part is able to be removed. I added this to remove list literals, but why were they there to begin with?
  ptrsMask ← '<=>'∊⍨⊃¨struct
  nestMask ← (~ptrsMask)∧1<|≡¨struct
  knownLengthsMask ← ptrsMask∨nestMask
  structSizes ← 0⍨¨struct
  (knownLengthsMask/structSizes) ← 8
  struct ← ,¨⊂¨struct
  :If ∨/(≢sizes)<types⍳⊃¨(~knownLengthsMask)/struct
    1⊃⍬⊣⎕←'Length of type unknown, please add to types list in this script: ',{⍵/⍨(≢types)<types⍳⍵}⊃¨(~knownLengthsMask)/struct
  :EndIf
  ((~knownLengthsMask)/structSizes) ← sizes[types⍳⊃¨(~knownLengthsMask)/struct]
  :If ∨/0=structSizes
    1⊃⍬⊣⎕←'Byte lengths of some types/structs were unacounted for: ',struct/⍨0=structSizes
  :EndIf
  :If ∨/nestMask
    (nestMask/struct) ← ⊂¨PadStruct¨⊃¨nestMask/struct
  :EndIf
  r ← ⊃,/ struct,¨⍴∘(⊂'U1')¨StructPaddingNeeded structSizes
∇

⍝ ┌────────────────────────────────┐
⍝ │ End of setup for easy ffi.     │
⍝ │ Begining of autogenerated ffi. │
⍝ └────────────────────────────────┘
rAYGUI_VERSION_MAJOR ← 4     ⍝
rAYGUI_VERSION_MINOR ← 0     ⍝
rAYGUI_VERSION_PATCH ← 0     ⍝
rAYGUI_VERSION       ← '4.0' ⍝
sCROLLBAR_LEFT_SIDE  ← 0     ⍝
sCROLLBAR_RIGHT_SIDE ← 1     ⍝

:Namespace guiState ⍝ Gui control state
  sTATE_NORMAL   ← 0  ⍝
  sTATE_FOCUSED  ← 1  ⍝
  sTATE_PRESSED  ← 2  ⍝
  sTATE_DISABLED ← 3  ⍝
:EndNamespace

:Namespace guiTextAlignment ⍝ Gui control text alignment
  tEXT_ALIGN_LEFT   ← 0  ⍝
  tEXT_ALIGN_CENTER ← 1  ⍝
  tEXT_ALIGN_RIGHT  ← 2  ⍝
:EndNamespace

:Namespace guiTextAlignmentVertical ⍝ Gui control text alignment vertical
  tEXT_ALIGN_TOP    ← 0  ⍝
  tEXT_ALIGN_MIDDLE ← 1  ⍝
  tEXT_ALIGN_BOTTOM ← 2  ⍝
:EndNamespace

:Namespace guiTextWrapMode ⍝ Gui control text wrap mode
  tEXT_WRAP_NONE ← 0  ⍝
  tEXT_WRAP_CHAR ← 1  ⍝
  tEXT_WRAP_WORD ← 2  ⍝
:EndNamespace

:Namespace guiControl ⍝ Gui controls
  dEFAULT     ← 0   ⍝
  lABEL       ← 1   ⍝ Used also for: LABELBUTTON
  bUTTON      ← 2   ⍝
  tOGGLE      ← 3   ⍝ Used also for: TOGGLEGROUP
  sLIDER      ← 4   ⍝ Used also for: SLIDERBAR, TOGGLESLIDER
  pROGRESSBAR ← 5   ⍝
  cHECKBOX    ← 6   ⍝
  cOMBOBOX    ← 7   ⍝
  dROPDOWNBOX ← 8   ⍝
  tEXTBOX     ← 9   ⍝ Used also for: TEXTBOXMULTI
  vALUEBOX    ← 10  ⍝
  sPINNER     ← 11  ⍝ Uses: BUTTON, VALUEBOX
  lISTVIEW    ← 12  ⍝
  cOLORPICKER ← 13  ⍝
  sCROLLBAR   ← 14  ⍝
  sTATUSBAR   ← 15  ⍝
:EndNamespace

:Namespace guiControlProperty ⍝ Gui base properties for every control
  bORDER_COLOR_NORMAL   ← 0   ⍝ Control border color in STATE_NORMAL
  bASE_COLOR_NORMAL     ← 1   ⍝ Control base color in STATE_NORMAL
  tEXT_COLOR_NORMAL     ← 2   ⍝ Control text color in STATE_NORMAL
  bORDER_COLOR_FOCUSED  ← 3   ⍝ Control border color in STATE_FOCUSED
  bASE_COLOR_FOCUSED    ← 4   ⍝ Control base color in STATE_FOCUSED
  tEXT_COLOR_FOCUSED    ← 5   ⍝ Control text color in STATE_FOCUSED
  bORDER_COLOR_PRESSED  ← 6   ⍝ Control border color in STATE_PRESSED
  bASE_COLOR_PRESSED    ← 7   ⍝ Control base color in STATE_PRESSED
  tEXT_COLOR_PRESSED    ← 8   ⍝ Control text color in STATE_PRESSED
  bORDER_COLOR_DISABLED ← 9   ⍝ Control border color in STATE_DISABLED
  bASE_COLOR_DISABLED   ← 10  ⍝ Control base color in STATE_DISABLED
  tEXT_COLOR_DISABLED   ← 11  ⍝ Control text color in STATE_DISABLED
  bORDER_WIDTH          ← 12  ⍝ Control border size, 0 for no border
  tEXT_PADDING          ← 13  ⍝ Control text padding, not considering border
  tEXT_ALIGNMENT        ← 14  ⍝ Control text horizontal alignment inside control text bound (after border and padding)
:EndNamespace

:Namespace guiDefaultProperty ⍝ DEFAULT extended properties
  tEXT_SIZE               ← 16  ⍝ Text size (glyphs max height)
  tEXT_SPACING            ← 17  ⍝ Text spacing between glyphs
  lINE_COLOR              ← 18  ⍝ Line control color
  bACKGROUND_COLOR        ← 19  ⍝ Background color
  tEXT_LINE_SPACING       ← 20  ⍝ Text spacing between lines
  tEXT_ALIGNMENT_VERTICAL ← 21  ⍝ Text vertical alignment inside text bounds (after border and padding)
  tEXT_WRAP_MODE          ← 22  ⍝ Text wrap-mode inside text bounds
:EndNamespace

:Namespace guiToggleProperty ⍝ Toggle/ToggleGroup
  gROUP_PADDING ← 16  ⍝ ToggleGroup separation between toggles
:EndNamespace

:Namespace guiSliderProperty ⍝ Slider/SliderBar
  sLIDER_WIDTH   ← 16  ⍝ Slider size of internal bar
  sLIDER_PADDING ← 17  ⍝ Slider/SliderBar internal bar padding
:EndNamespace

:Namespace guiProgressBarProperty ⍝ ProgressBar
  pROGRESS_PADDING ← 16  ⍝ ProgressBar internal padding
:EndNamespace

:Namespace guiScrollBarProperty ⍝ ScrollBar
  aRROWS_SIZE           ← 16  ⍝ ScrollBar arrows size
  aRROWS_VISIBLE        ← 17  ⍝ ScrollBar arrows visible
  sCROLL_SLIDER_PADDING ← 18  ⍝ ScrollBar slider internal padding
  sCROLL_SLIDER_SIZE    ← 19  ⍝ ScrollBar slider size
  sCROLL_PADDING        ← 20  ⍝ ScrollBar scroll padding from arrows
  sCROLL_SPEED          ← 21  ⍝ ScrollBar scrolling speed
:EndNamespace

:Namespace guiCheckBoxProperty ⍝ CheckBox
  cHECK_PADDING ← 16  ⍝ CheckBox internal check padding
:EndNamespace

:Namespace guiComboBoxProperty ⍝ ComboBox
  cOMBO_BUTTON_WIDTH   ← 16  ⍝ ComboBox right button width
  cOMBO_BUTTON_SPACING ← 17  ⍝ ComboBox button separation
:EndNamespace

:Namespace guiDropdownBoxProperty ⍝ DropdownBox
  aRROW_PADDING          ← 16  ⍝ DropdownBox arrow separation from border and items
  dROPDOWN_ITEMS_SPACING ← 17  ⍝ DropdownBox items separation
:EndNamespace

:Namespace guiTextBoxProperty ⍝ TextBox/TextBoxMulti/ValueBox/Spinner
  tEXT_READONLY ← 16  ⍝ TextBox in read-only mode: 0-text editable, 1-text no-editable
:EndNamespace

:Namespace guiSpinnerProperty ⍝ Spinner
  sPIN_BUTTON_WIDTH   ← 16  ⍝ Spinner left/right buttons width
  sPIN_BUTTON_SPACING ← 17  ⍝ Spinner buttons separation
:EndNamespace

:Namespace guiListViewProperty ⍝ ListView
  lIST_ITEMS_HEIGHT  ← 16  ⍝ ListView items height
  lIST_ITEMS_SPACING ← 17  ⍝ ListView items separation
  sCROLLBAR_WIDTH    ← 18  ⍝ ListView scrollbar size (usually width)
  sCROLLBAR_SIDE     ← 19  ⍝ ListView scrollbar side (0-SCROLLBAR_LEFT_SIDE, 1-SCROLLBAR_RIGHT_SIDE)
:EndNamespace

:Namespace guiColorPickerProperty ⍝ ColorPicker
  cOLOR_SELECTOR_SIZE      ← 16  ⍝
  hUEBAR_WIDTH             ← 17  ⍝ ColorPicker right hue bar width
  hUEBAR_PADDING           ← 18  ⍝ ColorPicker right hue bar separation from panel
  hUEBAR_SELECTOR_HEIGHT   ← 19  ⍝ ColorPicker right hue bar selector height
  hUEBAR_SELECTOR_OVERFLOW ← 20  ⍝ ColorPicker right hue bar selector overflow
:EndNamespace

:Namespace guiIconName ⍝
  iCON_NONE                    ← 0    ⍝
  iCON_FOLDER_FILE_OPEN        ← 1    ⍝
  iCON_FILE_SAVE_CLASSIC       ← 2    ⍝
  iCON_FOLDER_OPEN             ← 3    ⍝
  iCON_FOLDER_SAVE             ← 4    ⍝
  iCON_FILE_OPEN               ← 5    ⍝
  iCON_FILE_SAVE               ← 6    ⍝
  iCON_FILE_EXPORT             ← 7    ⍝
  iCON_FILE_ADD                ← 8    ⍝
  iCON_FILE_DELETE             ← 9    ⍝
  iCON_FILETYPE_TEXT           ← 10   ⍝
  iCON_FILETYPE_AUDIO          ← 11   ⍝
  iCON_FILETYPE_IMAGE          ← 12   ⍝
  iCON_FILETYPE_PLAY           ← 13   ⍝
  iCON_FILETYPE_VIDEO          ← 14   ⍝
  iCON_FILETYPE_INFO           ← 15   ⍝
  iCON_FILE_COPY               ← 16   ⍝
  iCON_FILE_CUT                ← 17   ⍝
  iCON_FILE_PASTE              ← 18   ⍝
  iCON_CURSOR_HAND             ← 19   ⍝
  iCON_CURSOR_POINTER          ← 20   ⍝
  iCON_CURSOR_CLASSIC          ← 21   ⍝
  iCON_PENCIL                  ← 22   ⍝
  iCON_PENCIL_BIG              ← 23   ⍝
  iCON_BRUSH_CLASSIC           ← 24   ⍝
  iCON_BRUSH_PAINTER           ← 25   ⍝
  iCON_WATER_DROP              ← 26   ⍝
  iCON_COLOR_PICKER            ← 27   ⍝
  iCON_RUBBER                  ← 28   ⍝
  iCON_COLOR_BUCKET            ← 29   ⍝
  iCON_TEXT_T                  ← 30   ⍝
  iCON_TEXT_A                  ← 31   ⍝
  iCON_SCALE                   ← 32   ⍝
  iCON_RESIZE                  ← 33   ⍝
  iCON_FILTER_POINT            ← 34   ⍝
  iCON_FILTER_BILINEAR         ← 35   ⍝
  iCON_CROP                    ← 36   ⍝
  iCON_CROP_ALPHA              ← 37   ⍝
  iCON_SQUARE_TOGGLE           ← 38   ⍝
  iCON_SYMMETRY                ← 39   ⍝
  iCON_SYMMETRY_HORIZONTAL     ← 40   ⍝
  iCON_SYMMETRY_VERTICAL       ← 41   ⍝
  iCON_LENS                    ← 42   ⍝
  iCON_LENS_BIG                ← 43   ⍝
  iCON_EYE_ON                  ← 44   ⍝
  iCON_EYE_OFF                 ← 45   ⍝
  iCON_FILTER_TOP              ← 46   ⍝
  iCON_FILTER                  ← 47   ⍝
  iCON_TARGET_POINT            ← 48   ⍝
  iCON_TARGET_SMALL            ← 49   ⍝
  iCON_TARGET_BIG              ← 50   ⍝
  iCON_TARGET_MOVE             ← 51   ⍝
  iCON_CURSOR_MOVE             ← 52   ⍝
  iCON_CURSOR_SCALE            ← 53   ⍝
  iCON_CURSOR_SCALE_RIGHT      ← 54   ⍝
  iCON_CURSOR_SCALE_LEFT       ← 55   ⍝
  iCON_UNDO                    ← 56   ⍝
  iCON_REDO                    ← 57   ⍝
  iCON_REREDO                  ← 58   ⍝
  iCON_MUTATE                  ← 59   ⍝
  iCON_ROTATE                  ← 60   ⍝
  iCON_REPEAT                  ← 61   ⍝
  iCON_SHUFFLE                 ← 62   ⍝
  iCON_EMPTYBOX                ← 63   ⍝
  iCON_TARGET                  ← 64   ⍝
  iCON_TARGET_SMALL_FILL       ← 65   ⍝
  iCON_TARGET_BIG_FILL         ← 66   ⍝
  iCON_TARGET_MOVE_FILL        ← 67   ⍝
  iCON_CURSOR_MOVE_FILL        ← 68   ⍝
  iCON_CURSOR_SCALE_FILL       ← 69   ⍝
  iCON_CURSOR_SCALE_RIGHT_FILL ← 70   ⍝
  iCON_CURSOR_SCALE_LEFT_FILL  ← 71   ⍝
  iCON_UNDO_FILL               ← 72   ⍝
  iCON_REDO_FILL               ← 73   ⍝
  iCON_REREDO_FILL             ← 74   ⍝
  iCON_MUTATE_FILL             ← 75   ⍝
  iCON_ROTATE_FILL             ← 76   ⍝
  iCON_REPEAT_FILL             ← 77   ⍝
  iCON_SHUFFLE_FILL            ← 78   ⍝
  iCON_EMPTYBOX_SMALL          ← 79   ⍝
  iCON_BOX                     ← 80   ⍝
  iCON_BOX_TOP                 ← 81   ⍝
  iCON_BOX_TOP_RIGHT           ← 82   ⍝
  iCON_BOX_RIGHT               ← 83   ⍝
  iCON_BOX_BOTTOM_RIGHT        ← 84   ⍝
  iCON_BOX_BOTTOM              ← 85   ⍝
  iCON_BOX_BOTTOM_LEFT         ← 86   ⍝
  iCON_BOX_LEFT                ← 87   ⍝
  iCON_BOX_TOP_LEFT            ← 88   ⍝
  iCON_BOX_CENTER              ← 89   ⍝
  iCON_BOX_CIRCLE_MASK         ← 90   ⍝
  iCON_POT                     ← 91   ⍝
  iCON_ALPHA_MULTIPLY          ← 92   ⍝
  iCON_ALPHA_CLEAR             ← 93   ⍝
  iCON_DITHERING               ← 94   ⍝
  iCON_MIPMAPS                 ← 95   ⍝
  iCON_BOX_GRID                ← 96   ⍝
  iCON_GRID                    ← 97   ⍝
  iCON_BOX_CORNERS_SMALL       ← 98   ⍝
  iCON_BOX_CORNERS_BIG         ← 99   ⍝
  iCON_FOUR_BOXES              ← 100  ⍝
  iCON_GRID_FILL               ← 101  ⍝
  iCON_BOX_MULTISIZE           ← 102  ⍝
  iCON_ZOOM_SMALL              ← 103  ⍝
  iCON_ZOOM_MEDIUM             ← 104  ⍝
  iCON_ZOOM_BIG                ← 105  ⍝
  iCON_ZOOM_ALL                ← 106  ⍝
  iCON_ZOOM_CENTER             ← 107  ⍝
  iCON_BOX_DOTS_SMALL          ← 108  ⍝
  iCON_BOX_DOTS_BIG            ← 109  ⍝
  iCON_BOX_CONCENTRIC          ← 110  ⍝
  iCON_BOX_GRID_BIG            ← 111  ⍝
  iCON_OK_TICK                 ← 112  ⍝
  iCON_CROSS                   ← 113  ⍝
  iCON_ARROW_LEFT              ← 114  ⍝
  iCON_ARROW_RIGHT             ← 115  ⍝
  iCON_ARROW_DOWN              ← 116  ⍝
  iCON_ARROW_UP                ← 117  ⍝
  iCON_ARROW_LEFT_FILL         ← 118  ⍝
  iCON_ARROW_RIGHT_FILL        ← 119  ⍝
  iCON_ARROW_DOWN_FILL         ← 120  ⍝
  iCON_ARROW_UP_FILL           ← 121  ⍝
  iCON_AUDIO                   ← 122  ⍝
  iCON_FX                      ← 123  ⍝
  iCON_WAVE                    ← 124  ⍝
  iCON_WAVE_SINUS              ← 125  ⍝
  iCON_WAVE_SQUARE             ← 126  ⍝
  iCON_WAVE_TRIANGULAR         ← 127  ⍝
  iCON_CROSS_SMALL             ← 128  ⍝
  iCON_PLAYER_PREVIOUS         ← 129  ⍝
  iCON_PLAYER_PLAY_BACK        ← 130  ⍝
  iCON_PLAYER_PLAY             ← 131  ⍝
  iCON_PLAYER_PAUSE            ← 132  ⍝
  iCON_PLAYER_STOP             ← 133  ⍝
  iCON_PLAYER_NEXT             ← 134  ⍝
  iCON_PLAYER_RECORD           ← 135  ⍝
  iCON_MAGNET                  ← 136  ⍝
  iCON_LOCK_CLOSE              ← 137  ⍝
  iCON_LOCK_OPEN               ← 138  ⍝
  iCON_CLOCK                   ← 139  ⍝
  iCON_TOOLS                   ← 140  ⍝
  iCON_GEAR                    ← 141  ⍝
  iCON_GEAR_BIG                ← 142  ⍝
  iCON_BIN                     ← 143  ⍝
  iCON_HAND_POINTER            ← 144  ⍝
  iCON_LASER                   ← 145  ⍝
  iCON_COIN                    ← 146  ⍝
  iCON_EXPLOSION               ← 147  ⍝
  iCON_1UP                     ← 148  ⍝
  iCON_PLAYER                  ← 149  ⍝
  iCON_PLAYER_JUMP             ← 150  ⍝
  iCON_KEY                     ← 151  ⍝
  iCON_DEMON                   ← 152  ⍝
  iCON_TEXT_POPUP              ← 153  ⍝
  iCON_GEAR_EX                 ← 154  ⍝
  iCON_CRACK                   ← 155  ⍝
  iCON_CRACK_POINTS            ← 156  ⍝
  iCON_STAR                    ← 157  ⍝
  iCON_DOOR                    ← 158  ⍝
  iCON_EXIT                    ← 159  ⍝
  iCON_MODE_2D                 ← 160  ⍝
  iCON_MODE_3D                 ← 161  ⍝
  iCON_CUBE                    ← 162  ⍝
  iCON_CUBE_FACE_TOP           ← 163  ⍝
  iCON_CUBE_FACE_LEFT          ← 164  ⍝
  iCON_CUBE_FACE_FRONT         ← 165  ⍝
  iCON_CUBE_FACE_BOTTOM        ← 166  ⍝
  iCON_CUBE_FACE_RIGHT         ← 167  ⍝
  iCON_CUBE_FACE_BACK          ← 168  ⍝
  iCON_CAMERA                  ← 169  ⍝
  iCON_SPECIAL                 ← 170  ⍝
  iCON_LINK_NET                ← 171  ⍝
  iCON_LINK_BOXES              ← 172  ⍝
  iCON_LINK_MULTI              ← 173  ⍝
  iCON_LINK                    ← 174  ⍝
  iCON_LINK_BROKE              ← 175  ⍝
  iCON_TEXT_NOTES              ← 176  ⍝
  iCON_NOTEBOOK                ← 177  ⍝
  iCON_SUITCASE                ← 178  ⍝
  iCON_SUITCASE_ZIP            ← 179  ⍝
  iCON_MAILBOX                 ← 180  ⍝
  iCON_MONITOR                 ← 181  ⍝
  iCON_PRINTER                 ← 182  ⍝
  iCON_PHOTO_CAMERA            ← 183  ⍝
  iCON_PHOTO_CAMERA_FLASH      ← 184  ⍝
  iCON_HOUSE                   ← 185  ⍝
  iCON_HEART                   ← 186  ⍝
  iCON_CORNER                  ← 187  ⍝
  iCON_VERTICAL_BARS           ← 188  ⍝
  iCON_VERTICAL_BARS_FILL      ← 189  ⍝
  iCON_LIFE_BARS               ← 190  ⍝
  iCON_INFO                    ← 191  ⍝
  iCON_CROSSLINE               ← 192  ⍝
  iCON_HELP                    ← 193  ⍝
  iCON_FILETYPE_ALPHA          ← 194  ⍝
  iCON_FILETYPE_HOME           ← 195  ⍝
  iCON_LAYERS_VISIBLE          ← 196  ⍝
  iCON_LAYERS                  ← 197  ⍝
  iCON_WINDOW                  ← 198  ⍝
  iCON_HIDPI                   ← 199  ⍝
  iCON_FILETYPE_BINARY         ← 200  ⍝
  iCON_HEX                     ← 201  ⍝
  iCON_SHIELD                  ← 202  ⍝
  iCON_FILE_NEW                ← 203  ⍝
  iCON_FOLDER_ADD              ← 204  ⍝
  iCON_ALARM                   ← 205  ⍝
  iCON_CPU                     ← 206  ⍝
  iCON_ROM                     ← 207  ⍝
  iCON_STEP_OVER               ← 208  ⍝
  iCON_STEP_INTO               ← 209  ⍝
  iCON_STEP_OUT                ← 210  ⍝
  iCON_RESTART                 ← 211  ⍝
  iCON_BREAKPOINT_ON           ← 212  ⍝
  iCON_BREAKPOINT_OFF          ← 213  ⍝
  iCON_BURGER_MENU             ← 214  ⍝
  iCON_CASE_SENSITIVE          ← 215  ⍝
  iCON_REG_EXP                 ← 216  ⍝
  iCON_FOLDER                  ← 217  ⍝
  iCON_FILE                    ← 218  ⍝
  iCON_SAND_TIMER              ← 219  ⍝
  iCON_220                     ← 220  ⍝
  iCON_221                     ← 221  ⍝
  iCON_222                     ← 222  ⍝
  iCON_223                     ← 223  ⍝
  iCON_224                     ← 224  ⍝
  iCON_225                     ← 225  ⍝
  iCON_226                     ← 226  ⍝
  iCON_227                     ← 227  ⍝
  iCON_228                     ← 228  ⍝
  iCON_229                     ← 229  ⍝
  iCON_230                     ← 230  ⍝
  iCON_231                     ← 231  ⍝
  iCON_232                     ← 232  ⍝
  iCON_233                     ← 233  ⍝
  iCON_234                     ← 234  ⍝
  iCON_235                     ← 235  ⍝
  iCON_236                     ← 236  ⍝
  iCON_237                     ← 237  ⍝
  iCON_238                     ← 238  ⍝
  iCON_239                     ← 239  ⍝
  iCON_240                     ← 240  ⍝
  iCON_241                     ← 241  ⍝
  iCON_242                     ← 242  ⍝
  iCON_243                     ← 243  ⍝
  iCON_244                     ← 244  ⍝
  iCON_245                     ← 245  ⍝
  iCON_246                     ← 246  ⍝
  iCON_247                     ← 247  ⍝
  iCON_248                     ← 248  ⍝
  iCON_249                     ← 249  ⍝
  iCON_250                     ← 250  ⍝
  iCON_251                     ← 251  ⍝
  iCON_252                     ← 252  ⍝
  iCON_253                     ← 253  ⍝
  iCON_254                     ← 254  ⍝
  iCON_255                     ← 255  ⍝
:EndNamespace



v2 ← ⍬ ⍝ Vector2 type
  v2,←⊂ f ⍝ x  ⍝
  v2,←⊂ f ⍝ y  ⍝

v3 ← ⍬ ⍝ Vector3 type                 // -- ConvertHSVtoRGB(), ConvertRGBtoHSV()
  v3,←⊂ f ⍝ x  ⍝
  v3,←⊂ f ⍝ y  ⍝
  v3,←⊂ f ⍝ z  ⍝

color ← ⍬ ⍝ Color type, RGBA (32bit)
  color,←⊂ u1 ⍝ r  ⍝
  color,←⊂ u1 ⍝ g  ⍝
  color,←⊂ u1 ⍝ b  ⍝
  color,←⊂ u1 ⍝ a  ⍝

rectangle ← ⍬ ⍝ Rectangle type
  rectangle,←⊂ f ⍝ x       ⍝
  rectangle,←⊂ f ⍝ y       ⍝
  rectangle,←⊂ f ⍝ width   ⍝
  rectangle,←⊂ f ⍝ height  ⍝

texture2D ← ⍬ ⍝ It should be redesigned to be provided by user
  texture2D,←⊂ u ⍝ id       ⍝ OpenGL texture id
  texture2D,←⊂ i ⍝ width    ⍝ Texture base width
  texture2D,←⊂ i ⍝ height   ⍝ Texture base height
  texture2D,←⊂ i ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  texture2D,←⊂ i ⍝ format   ⍝ Data format (PixelFormat type)

image ← ⍬ ⍝ Image, pixel data stored in CPU memory (RAM)
  image,←⊂ ptr ⍝ data     ⍝ Image raw data
  image,←⊂ i   ⍝ width    ⍝ Image base width
  image,←⊂ i   ⍝ height   ⍝ Image base height
  image,←⊂ i   ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  image,←⊂ i   ⍝ format   ⍝ Data format (PixelFormat type)

glyphInfo ← ⍬ ⍝ GlyphInfo, font characters glyphs info
  glyphInfo,←⊂ i     ⍝ value     ⍝ Character value (Unicode)
  glyphInfo,←⊂ i     ⍝ offsetX   ⍝ Character offset X when drawing
  glyphInfo,←⊂ i     ⍝ offsetY   ⍝ Character offset Y when drawing
  glyphInfo,←⊂ i     ⍝ advanceX  ⍝ Character advance position X
  glyphInfo,←⊂ image ⍝ image     ⍝ Character image data

font ← ⍬ ⍝ It should be redesigned to be provided by user
  font,←⊂ i             ⍝ baseSize      ⍝ Base size (default chars height)
  font,←⊂ i             ⍝ glyphCount    ⍝ Number of glyph characters
  font,←⊂ i             ⍝ glyphPadding  ⍝ Padding around the glyph characters
  font,←⊂ texture2D     ⍝ texture       ⍝ Texture atlas containing the glyphs
  font,←⊂ '=',rectangle ⍝ recs          ⍝ Rectangles in texture for the glyphs
  font,←⊂ '=',glyphInfo ⍝ glyphs        ⍝ Glyphs info data

guiStyleProp ← ⍬ ⍝ NOTE: Used when exporting style as code for convenience
  guiStyleProp,←⊂ u2 ⍝ controlId      ⍝ Control identifier
  guiStyleProp,←⊂ u2 ⍝ propertyId     ⍝ Property identifier
  guiStyleProp,←⊂ i  ⍝ propertyValue  ⍝ Property value

guiTextStyle ← ⍬ ⍝ NOTE: Text style is defined by control
  guiTextStyle,←⊂ u ⍝ size         ⍝
  guiTextStyle,←⊂ i ⍝ charSpacing  ⍝
  guiTextStyle,←⊂ i ⍝ lineSpacing  ⍝
  guiTextStyle,←⊂ i ⍝ alignmentH   ⍝
  guiTextStyle,←⊂ i ⍝ alignmentV   ⍝
  guiTextStyle,←⊂ i ⍝ padding      ⍝

∇Start pathToRaylibBinaryArg
:If ⍬≡pathToRaylibBinaryArg
  pathToRaylibBinaryArg ← {⍵:'../libtemp-c-raylib.so'⋄'..\raylib.dll'}'Linux'≡'-64'~⍨⊃#⎕WG'APLVersion'
:Endif
pathToRaylibBinary ← pathToRaylibBinaryArg
⎕NA           R('GuiEnable'               (⍬                                                       )) ⍝                                                                ⍝ Enable gui controls (global state)
⎕NA           R('GuiDisable'              (⍬                                                       )) ⍝                                                                ⍝ Disable gui controls (global state)
⎕NA           R('GuiLock'                 (⍬                                                       )) ⍝                                                                ⍝ Lock gui controls (global state)
⎕NA           R('GuiUnlock'               (⍬                                                       )) ⍝                                                                ⍝ Unlock gui controls (global state)
⎕NA bool      R('GuiIsLocked'             (⍬                                                       )) ⍝                                                                ⍝ Check if gui is locked (global state)
⎕NA           R('GuiIsLockedRetPtr'       (,⊂ ('=',bool)                                           )) ⍝                                                                ⍝ Check if gui is locked (global state)
⎕NA           R('GuiSetAlpha'             (,⊂ f                                                    )) ⍝ alpha                                                          ⍝ Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f
⎕NA           R('GuiSetState'             (,⊂ i                                                    )) ⍝ state                                                          ⍝ Set gui state (global state)
⎕NA i         R('GuiGetState'             (⍬                                                       )) ⍝                                                                ⍝ Get gui state (global state)
⎕NA           R('GuiGetStateRetPtr'       (,⊂ ('=',i)                                              )) ⍝                                                                ⍝ Get gui state (global state)
⎕NA           R('GuiSetFont'              (,⊂ font                                                 )) ⍝ font                                                           ⍝ Set gui custom font (global state)
⎕NA font      R('GuiGetFont'              (⍬                                                       )) ⍝                                                                ⍝ Get gui custom font (global state)
⎕NA           R('GuiGetFontRetPtr'        (,⊂ ('=',font)                                           )) ⍝                                                                ⍝ Get gui custom font (global state)
⎕NA           R('GuiSetStyle'             (i i i                                                   )) ⍝ control property value                                         ⍝ Set one style property
⎕NA i         R('GuiGetStyle'             (i i                                                     )) ⍝ control property                                               ⍝ Get one style property
⎕NA           R('GuiGetStyleRetPtr'       (('=',i) i i                                             )) ⍝ control property                                               ⍝ Get one style property
⎕NA           R('GuiLoadStyle'            (,⊂ str                                                  )) ⍝ fileName                                                       ⍝ Load style file over global style variable (.rgs)
⎕NA           R('GuiLoadStyleDefault'     (⍬                                                       )) ⍝                                                                ⍝ Load style default over global style
⎕NA           R('GuiEnableTooltip'        (⍬                                                       )) ⍝                                                                ⍝ Enable gui tooltips (global state)
⎕NA           R('GuiDisableTooltip'       (⍬                                                       )) ⍝                                                                ⍝ Disable gui tooltips (global state)
⎕NA           R('GuiSetTooltip'           (,⊂ str                                                  )) ⍝ tooltip                                                        ⍝ Set tooltip string
⎕NA (ptr⊣str) R('GuiIconText'             (i str                                                   )) ⍝ iconId text                                                    ⍝ Get text with icon id prepended (if supported)
⎕NA           R('GuiIconTextRetPtr'       (('=',str) i str                                         )) ⍝ iconId text                                                    ⍝ Get text with icon id prepended (if supported)
⎕NA           R('GuiSetIconScale'         (,⊂ i                                                    )) ⍝ scale                                                          ⍝ Set default icon drawing size
⎕NA ptr       R('GuiGetIcons'             (⍬                                                       )) ⍝                                                                ⍝ Get raygui icons data pointer
⎕NA           R('GuiGetIconsRetPtr'       (,⊂ ptr                                                  )) ⍝                                                                ⍝ Get raygui icons data pointer
⎕NA ptr       R('GuiLoadIcons'            (str bool                                                )) ⍝ fileName loadIconsName                                         ⍝ Load raygui icons file (.rgi) into internal icons data
⎕NA           R('GuiLoadIconsRetPtr'      (ptr str bool                                            )) ⍝ fileName loadIconsName                                         ⍝ Load raygui icons file (.rgi) into internal icons data
⎕NA           R('GuiDrawIcon'             (i i i i color                                           )) ⍝ iconId posX posY pixelSize color                               ⍝ Draw icon using pixel size at specified position
⎕NA i         R('GuiWindowBox'            (rectangle str                                           )) ⍝ bounds title                                                   ⍝ Window Box control, shows a window that can be closed
⎕NA           R('GuiWindowBoxRetPtr'      (('=',i) rectangle str                                   )) ⍝ bounds title                                                   ⍝ Window Box control, shows a window that can be closed
⎕NA i         R('GuiGroupBox'             (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Group Box control with text name
⎕NA           R('GuiGroupBoxRetPtr'       (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Group Box control with text name
⎕NA i         R('GuiLine'                 (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Line separator control, could contain text
⎕NA           R('GuiLineRetPtr'           (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Line separator control, could contain text
⎕NA i         R('GuiPanel'                (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Panel control, useful to group controls
⎕NA           R('GuiPanelRetPtr'          (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Panel control, useful to group controls
⎕NA i         R('GuiTabBar'               (rectangle ('=',str) i ('=',i)                           )) ⍝ bounds text count active                                       ⍝ Tab Bar control, returns TAB to be closed or -1
⎕NA           R('GuiTabBarRetPtr'         (('=',i) rectangle ('=',str) i ('=',i)                   )) ⍝ bounds text count active                                       ⍝ Tab Bar control, returns TAB to be closed or -1
⎕NA i         R('GuiScrollPanel'          (rectangle str rectangle ('=',v2) ('=',rectangle)        )) ⍝ bounds text content scroll view                                ⍝ Scroll Panel control
⎕NA           R('GuiScrollPanelRetPtr'    (('=',i) rectangle str rectangle ('=',v2) ('=',rectangle))) ⍝ bounds text content scroll view                                ⍝ Scroll Panel control
⎕NA i         R('GuiLabel'                (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Label control, shows text
⎕NA           R('GuiLabelRetPtr'          (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Label control, shows text
⎕NA i         R('GuiButton'               (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Button control, returns true when clicked
⎕NA           R('GuiButtonRetPtr'         (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Button control, returns true when clicked
⎕NA i         R('GuiLabelButton'          (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Label button control, show true when clicked
⎕NA           R('GuiLabelButtonRetPtr'    (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Label button control, show true when clicked
⎕NA i         R('GuiToggle'               (rectangle str ('=',bool)                                )) ⍝ bounds text active                                             ⍝ Toggle Button control, returns true when active
⎕NA           R('GuiToggleRetPtr'         (('=',i) rectangle str ('=',bool)                        )) ⍝ bounds text active                                             ⍝ Toggle Button control, returns true when active
⎕NA i         R('GuiToggleGroup'          (rectangle str ('=',i)                                   )) ⍝ bounds text active                                             ⍝ Toggle Group control, returns active toggle index
⎕NA           R('GuiToggleGroupRetPtr'    (('=',i) rectangle str ('=',i)                           )) ⍝ bounds text active                                             ⍝ Toggle Group control, returns active toggle index
⎕NA i         R('GuiToggleSlider'         (rectangle str ('=',i)                                   )) ⍝ bounds text active                                             ⍝ Toggle Slider control, returns true when clicked
⎕NA           R('GuiToggleSliderRetPtr'   (('=',i) rectangle str ('=',i)                           )) ⍝ bounds text active                                             ⍝ Toggle Slider control, returns true when clicked
⎕NA i         R('GuiCheckBox'             (rectangle str ('=',bool)                                )) ⍝ bounds text checked                                            ⍝ Check Box control, returns true when active
⎕NA           R('GuiCheckBoxRetPtr'       (('=',i) rectangle str ('=',bool)                        )) ⍝ bounds text checked                                            ⍝ Check Box control, returns true when active
⎕NA i         R('GuiComboBox'             (rectangle str ('=',i)                                   )) ⍝ bounds text active                                             ⍝ Combo Box control, returns selected item index
⎕NA           R('GuiComboBoxRetPtr'       (('=',i) rectangle str ('=',i)                           )) ⍝ bounds text active                                             ⍝ Combo Box control, returns selected item index
⎕NA i         R('GuiDropdownBox'          (rectangle str ('=',i) bool                              )) ⍝ bounds text active editMode                                    ⍝ Dropdown Box control, returns selected item
⎕NA           R('GuiDropdownBoxRetPtr'    (('=',i) rectangle str ('=',i) bool                      )) ⍝ bounds text active editMode                                    ⍝ Dropdown Box control, returns selected item
⎕NA i         R('GuiSpinner'              (rectangle str ('=',i) i i bool                          )) ⍝ bounds text value minValue maxValue editMode                   ⍝ Spinner control, returns selected value
⎕NA           R('GuiSpinnerRetPtr'        (('=',i) rectangle str ('=',i) i i bool                  )) ⍝ bounds text value minValue maxValue editMode                   ⍝ Spinner control, returns selected value
⎕NA i         R('GuiValueBox'             (rectangle str ('=',i) i i bool                          )) ⍝ bounds text value minValue maxValue editMode                   ⍝ Value Box control, updates input text with numbers
⎕NA           R('GuiValueBoxRetPtr'       (('=',i) rectangle str ('=',i) i i bool                  )) ⍝ bounds text value minValue maxValue editMode                   ⍝ Value Box control, updates input text with numbers
⎕NA i         R('GuiTextBox'              (rectangle str i bool                                    )) ⍝ bounds text textSize editMode                                  ⍝ Text Box control, updates input text
⎕NA           R('GuiTextBoxRetPtr'        (('=',i) rectangle str i bool                            )) ⍝ bounds text textSize editMode                                  ⍝ Text Box control, updates input text
⎕NA i         R('GuiSlider'               (rectangle str str ('=',f) f f                           )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Slider control, returns selected value
⎕NA           R('GuiSliderRetPtr'         (('=',i) rectangle str str ('=',f) f f                   )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Slider control, returns selected value
⎕NA i         R('GuiSliderBar'            (rectangle str str ('=',f) f f                           )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Slider Bar control, returns selected value
⎕NA           R('GuiSliderBarRetPtr'      (('=',i) rectangle str str ('=',f) f f                   )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Slider Bar control, returns selected value
⎕NA i         R('GuiProgressBar'          (rectangle str str ('=',f) f f                           )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Progress Bar control, shows current progress value
⎕NA           R('GuiProgressBarRetPtr'    (('=',i) rectangle str str ('=',f) f f                   )) ⍝ bounds textLeft textRight value minValue maxValue              ⍝ Progress Bar control, shows current progress value
⎕NA i         R('GuiStatusBar'            (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Status Bar control, shows info text
⎕NA           R('GuiStatusBarRetPtr'      (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Status Bar control, shows info text
⎕NA i         R('GuiDummyRec'             (rectangle str                                           )) ⍝ bounds text                                                    ⍝ Dummy control for placeholders
⎕NA           R('GuiDummyRecRetPtr'       (('=',i) rectangle str                                   )) ⍝ bounds text                                                    ⍝ Dummy control for placeholders
⎕NA i         R('GuiGrid'                 (rectangle str f i ('=',v2)                              )) ⍝ bounds text spacing subdivs mouseCell                          ⍝ Grid control, returns mouse cell position
⎕NA           R('GuiGridRetPtr'           (('=',i) rectangle str f i ('=',v2)                      )) ⍝ bounds text spacing subdivs mouseCell                          ⍝ Grid control, returns mouse cell position
⎕NA i         R('GuiListView'             (rectangle str ('=',i) ('=',i)                           )) ⍝ bounds text scrollIndex active                                 ⍝ List View control, returns selected list item index
⎕NA           R('GuiListViewRetPtr'       (('=',i) rectangle str ('=',i) ('=',i)                   )) ⍝ bounds text scrollIndex active                                 ⍝ List View control, returns selected list item index
⎕NA i         R('GuiListViewEx'           (rectangle ('=',str) i ('=',i) ('=',i) ('=',i)           )) ⍝ bounds text count scrollIndex active focus                     ⍝ List View with extended parameters
⎕NA           R('GuiListViewExRetPtr'     (('=',i) rectangle ('=',str) i ('=',i) ('=',i) ('=',i)   )) ⍝ bounds text count scrollIndex active focus                     ⍝ List View with extended parameters
⎕NA i         R('GuiMessageBox'           (rectangle str str str                                   )) ⍝ bounds title message buttons                                   ⍝ Message Box control, displays a message
⎕NA           R('GuiMessageBoxRetPtr'     (('=',i) rectangle str str str                           )) ⍝ bounds title message buttons                                   ⍝ Message Box control, displays a message
⎕NA i         R('GuiTextInputBox'         (rectangle str str str str i ('=',bool)                  )) ⍝ bounds title message buttons text textMaxSize secretViewActive ⍝ Text Input Box control, ask for text, supports secret
⎕NA           R('GuiTextInputBoxRetPtr'   (('=',i) rectangle str str str str i ('=',bool)          )) ⍝ bounds title message buttons text textMaxSize secretViewActive ⍝ Text Input Box control, ask for text, supports secret
⎕NA i         R('GuiColorPicker'          (rectangle str ('=',color)                               )) ⍝ bounds text color                                              ⍝ Color Picker control (multiple color controls)
⎕NA           R('GuiColorPickerRetPtr'    (('=',i) rectangle str ('=',color)                       )) ⍝ bounds text color                                              ⍝ Color Picker control (multiple color controls)
⎕NA i         R('GuiColorPanel'           (rectangle str ('=',color)                               )) ⍝ bounds text color                                              ⍝ Color Panel control
⎕NA           R('GuiColorPanelRetPtr'     (('=',i) rectangle str ('=',color)                       )) ⍝ bounds text color                                              ⍝ Color Panel control
⎕NA i         R('GuiColorBarAlpha'        (rectangle str ('=',f)                                   )) ⍝ bounds text alpha                                              ⍝ Color Bar Alpha control
⎕NA           R('GuiColorBarAlphaRetPtr'  (('=',i) rectangle str ('=',f)                           )) ⍝ bounds text alpha                                              ⍝ Color Bar Alpha control
⎕NA i         R('GuiColorBarHue'          (rectangle str ('=',f)                                   )) ⍝ bounds text value                                              ⍝ Color Bar Hue control
⎕NA           R('GuiColorBarHueRetPtr'    (('=',i) rectangle str ('=',f)                           )) ⍝ bounds text value                                              ⍝ Color Bar Hue control
⎕NA i         R('GuiColorPickerHSV'       (rectangle str ('=',v3)                                  )) ⍝ bounds text colorHsv                                           ⍝ Color Picker control that avoids conversion to RGB on each call (multiple color controls)
⎕NA           R('GuiColorPickerHSVRetPtr' (('=',i) rectangle str ('=',v3)                          )) ⍝ bounds text colorHsv                                           ⍝ Color Picker control that avoids conversion to RGB on each call (multiple color controls)
⎕NA i         R('GuiColorPanelHSV'        (rectangle str ('=',v3)                                  )) ⍝ bounds text colorHsv                                           ⍝ Color Panel control that returns HSV color value, used by GuiColorPickerHSV()
⎕NA           R('GuiColorPanelHSVRetPtr'  (('=',i) rectangle str ('=',v3)                          )) ⍝ bounds text colorHsv                                           ⍝ Color Panel control that returns HSV color value, used by GuiColorPickerHSV()
∇
:EndNamespace