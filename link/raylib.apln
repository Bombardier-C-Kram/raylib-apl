
⍝ THIS TEXT HAS BEEN AUTOGENERATED

:Namespace raylib
⍝ Makes an importer that improves the ffi function creation syntax
∇ OutputStr ← {outType} MakeImporter (pathToBin funcName inpTypes)
    ;NestedStructToStr ;NestedStructToStrReturn
  ⍝ outType's default is ''
  :If 0=⎕NC'outType'
    outType←''
  :EndIf

  NestedStructToStr ← {
    2=+/∧\'<=>'∊⍨⍵ : '=P'
    1≥|≡⍵:⍵
    types←∇¨⍵/⍨m←×|≡¨⍵
    mask←'<=>'∊⍨⊃¨types
    types ← (,'P')@(mask⍨)types
    (left right) ← {n←⍵∊'[]',⎕D⋄((~n)/⍵)(n/⍵)}(~m)/⍵
    left,right,⍨'{','}',⍨1↓⊃,/' ',¨types
  }
  NestedStructToStrReturn ← {
    ((,'*')≢1↑⍵)∧1≥|≡⍵:⍵
    ptr
  }

  OutputStr ← (NestedStructToStrReturn outType),' ',pathToBin,'|',funcName,⊃,/' ',¨NestedStructToStr¨inpTypes
∇

⍝ predefined C types
bool ← 'I1'
c    ← 'I1'
i    ← 'I4'
f    ← 'F4'
u    ← 'U4'
i8   ← 'I1'
u8   ← 'U1'
str  ← '=0C1'
ustr ← '=C1'
ptr  ← ,'P'

R ← {⍺←''⋄⍺ MakeImporter (⊂pathToRaylibBinary),⍵}

⍝ ┌────────────────────────────────┐
⍝ │ End of setup for easy ffi.     │
⍝ │ Begining of autogenerated ffi. │
⍝ └────────────────────────────────┘
rAYLIB_VERSION_MAJOR ← 5     ⍝
rAYLIB_VERSION_MINOR ← 0     ⍝
rAYLIB_VERSION_PATCH ← 0     ⍝
rAYLIB_VERSION       ← '5.0' ⍝

:Namespace configFlags ⍝ System/Window config flags
  fLAG_VSYNC_HINT               ← 64     ⍝ Set to try enabling V-Sync on GPU
  fLAG_FULLSCREEN_MODE          ← 2      ⍝ Set to run program in fullscreen
  fLAG_WINDOW_RESIZABLE         ← 4      ⍝ Set to allow resizable window
  fLAG_WINDOW_UNDECORATED       ← 8      ⍝ Set to disable window decoration (frame and buttons)
  fLAG_WINDOW_HIDDEN            ← 128    ⍝ Set to hide window
  fLAG_WINDOW_MINIMIZED         ← 512    ⍝ Set to minimize window (iconify)
  fLAG_WINDOW_MAXIMIZED         ← 1024   ⍝ Set to maximize window (expanded to monitor)
  fLAG_WINDOW_UNFOCUSED         ← 2048   ⍝ Set to window non focused
  fLAG_WINDOW_TOPMOST           ← 4096   ⍝ Set to window always on top
  fLAG_WINDOW_ALWAYS_RUN        ← 256    ⍝ Set to allow windows running while minimized
  fLAG_WINDOW_TRANSPARENT       ← 16     ⍝ Set to allow transparent framebuffer
  fLAG_WINDOW_HIGHDPI           ← 8192   ⍝ Set to support HighDPI
  fLAG_WINDOW_MOUSE_PASSTHROUGH ← 16384  ⍝ Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
  fLAG_BORDERLESS_WINDOWED_MODE ← 32768  ⍝ Set to run program in borderless windowed mode
  fLAG_MSAA_4X_HINT             ← 32     ⍝ Set to try enabling MSAA 4X
  fLAG_INTERLACED_HINT          ← 65536  ⍝ Set to try enabling interlaced video format (for V3D)
:EndNamespace

:Namespace traceLogLevel ⍝ Trace log level
  lOG_ALL     ← 0  ⍝ Display all logs
  lOG_TRACE   ← 1  ⍝ Trace logging, intended for internal use only
  lOG_DEBUG   ← 2  ⍝ Debug logging, used for internal debugging, it should be disabled on release builds
  lOG_INFO    ← 3  ⍝ Info logging, used for program execution info
  lOG_WARNING ← 4  ⍝ Warning logging, used on recoverable failures
  lOG_ERROR   ← 5  ⍝ Error logging, used on unrecoverable failures
  lOG_FATAL   ← 6  ⍝ Fatal logging, used to abort program: exit(EXIT_FAILURE)
  lOG_NONE    ← 7  ⍝ Disable logging
:EndNamespace

:Namespace keyboardKey ⍝ Keyboard keys (US keyboard layout)
  kEY_NULL          ← 0    ⍝ Key: NULL, used for no key pressed
  kEY_APOSTROPHE    ← 39   ⍝ Key: '
  kEY_COMMA         ← 44   ⍝ Key: ,
  kEY_MINUS         ← 45   ⍝ Key: -
  kEY_PERIOD        ← 46   ⍝ Key: .
  kEY_SLASH         ← 47   ⍝ Key: /
  kEY_ZERO          ← 48   ⍝ Key: 0
  kEY_ONE           ← 49   ⍝ Key: 1
  kEY_TWO           ← 50   ⍝ Key: 2
  kEY_THREE         ← 51   ⍝ Key: 3
  kEY_FOUR          ← 52   ⍝ Key: 4
  kEY_FIVE          ← 53   ⍝ Key: 5
  kEY_SIX           ← 54   ⍝ Key: 6
  kEY_SEVEN         ← 55   ⍝ Key: 7
  kEY_EIGHT         ← 56   ⍝ Key: 8
  kEY_NINE          ← 57   ⍝ Key: 9
  kEY_SEMICOLON     ← 59   ⍝ Key: ;
  kEY_EQUAL         ← 61   ⍝ Key: =
  kEY_A             ← 65   ⍝ Key: A | a
  kEY_B             ← 66   ⍝ Key: B | b
  kEY_C             ← 67   ⍝ Key: C | c
  kEY_D             ← 68   ⍝ Key: D | d
  kEY_E             ← 69   ⍝ Key: E | e
  kEY_F             ← 70   ⍝ Key: F | f
  kEY_G             ← 71   ⍝ Key: G | g
  kEY_H             ← 72   ⍝ Key: H | h
  kEY_I             ← 73   ⍝ Key: I | i
  kEY_J             ← 74   ⍝ Key: J | j
  kEY_K             ← 75   ⍝ Key: K | k
  kEY_L             ← 76   ⍝ Key: L | l
  kEY_M             ← 77   ⍝ Key: M | m
  kEY_N             ← 78   ⍝ Key: N | n
  kEY_O             ← 79   ⍝ Key: O | o
  kEY_P             ← 80   ⍝ Key: P | p
  kEY_Q             ← 81   ⍝ Key: Q | q
  kEY_R             ← 82   ⍝ Key: R | r
  kEY_S             ← 83   ⍝ Key: S | s
  kEY_T             ← 84   ⍝ Key: T | t
  kEY_U             ← 85   ⍝ Key: U | u
  kEY_V             ← 86   ⍝ Key: V | v
  kEY_W             ← 87   ⍝ Key: W | w
  kEY_X             ← 88   ⍝ Key: X | x
  kEY_Y             ← 89   ⍝ Key: Y | y
  kEY_Z             ← 90   ⍝ Key: Z | z
  kEY_LEFT_BRACKET  ← 91   ⍝ Key: [
  kEY_BACKSLASH     ← 92   ⍝ Key: '\'
  kEY_RIGHT_BRACKET ← 93   ⍝ Key: ]
  kEY_GRAVE         ← 96   ⍝ Key: `
  kEY_SPACE         ← 32   ⍝ Key: Space
  kEY_ESCAPE        ← 256  ⍝ Key: Esc
  kEY_ENTER         ← 257  ⍝ Key: Enter
  kEY_TAB           ← 258  ⍝ Key: Tab
  kEY_BACKSPACE     ← 259  ⍝ Key: Backspace
  kEY_INSERT        ← 260  ⍝ Key: Ins
  kEY_DELETE        ← 261  ⍝ Key: Del
  kEY_RIGHT         ← 262  ⍝ Key: Cursor right
  kEY_LEFT          ← 263  ⍝ Key: Cursor left
  kEY_DOWN          ← 264  ⍝ Key: Cursor down
  kEY_UP            ← 265  ⍝ Key: Cursor up
  kEY_PAGE_UP       ← 266  ⍝ Key: Page up
  kEY_PAGE_DOWN     ← 267  ⍝ Key: Page down
  kEY_HOME          ← 268  ⍝ Key: Home
  kEY_END           ← 269  ⍝ Key: End
  kEY_CAPS_LOCK     ← 280  ⍝ Key: Caps lock
  kEY_SCROLL_LOCK   ← 281  ⍝ Key: Scroll down
  kEY_NUM_LOCK      ← 282  ⍝ Key: Num lock
  kEY_PRINT_SCREEN  ← 283  ⍝ Key: Print screen
  kEY_PAUSE         ← 284  ⍝ Key: Pause
  kEY_F1            ← 290  ⍝ Key: F1
  kEY_F2            ← 291  ⍝ Key: F2
  kEY_F3            ← 292  ⍝ Key: F3
  kEY_F4            ← 293  ⍝ Key: F4
  kEY_F5            ← 294  ⍝ Key: F5
  kEY_F6            ← 295  ⍝ Key: F6
  kEY_F7            ← 296  ⍝ Key: F7
  kEY_F8            ← 297  ⍝ Key: F8
  kEY_F9            ← 298  ⍝ Key: F9
  kEY_F10           ← 299  ⍝ Key: F10
  kEY_F11           ← 300  ⍝ Key: F11
  kEY_F12           ← 301  ⍝ Key: F12
  kEY_LEFT_SHIFT    ← 340  ⍝ Key: Shift left
  kEY_LEFT_CONTROL  ← 341  ⍝ Key: Control left
  kEY_LEFT_ALT      ← 342  ⍝ Key: Alt left
  kEY_LEFT_SUPER    ← 343  ⍝ Key: Super left
  kEY_RIGHT_SHIFT   ← 344  ⍝ Key: Shift right
  kEY_RIGHT_CONTROL ← 345  ⍝ Key: Control right
  kEY_RIGHT_ALT     ← 346  ⍝ Key: Alt right
  kEY_RIGHT_SUPER   ← 347  ⍝ Key: Super right
  kEY_KB_MENU       ← 348  ⍝ Key: KB menu
  kEY_KP_0          ← 320  ⍝ Key: Keypad 0
  kEY_KP_1          ← 321  ⍝ Key: Keypad 1
  kEY_KP_2          ← 322  ⍝ Key: Keypad 2
  kEY_KP_3          ← 323  ⍝ Key: Keypad 3
  kEY_KP_4          ← 324  ⍝ Key: Keypad 4
  kEY_KP_5          ← 325  ⍝ Key: Keypad 5
  kEY_KP_6          ← 326  ⍝ Key: Keypad 6
  kEY_KP_7          ← 327  ⍝ Key: Keypad 7
  kEY_KP_8          ← 328  ⍝ Key: Keypad 8
  kEY_KP_9          ← 329  ⍝ Key: Keypad 9
  kEY_KP_DECIMAL    ← 330  ⍝ Key: Keypad .
  kEY_KP_DIVIDE     ← 331  ⍝ Key: Keypad /
  kEY_KP_MULTIPLY   ← 332  ⍝ Key: Keypad *
  kEY_KP_SUBTRACT   ← 333  ⍝ Key: Keypad -
  kEY_KP_ADD        ← 334  ⍝ Key: Keypad +
  kEY_KP_ENTER      ← 335  ⍝ Key: Keypad Enter
  kEY_KP_EQUAL      ← 336  ⍝ Key: Keypad =
  kEY_BACK          ← 4    ⍝ Key: Android back button
  kEY_MENU          ← 82   ⍝ Key: Android menu button
  kEY_VOLUME_UP     ← 24   ⍝ Key: Android volume up button
  kEY_VOLUME_DOWN   ← 25   ⍝ Key: Android volume down button
:EndNamespace

:Namespace mouseButton ⍝ Mouse buttons
  mOUSE_BUTTON_LEFT    ← 0  ⍝ Mouse button left
  mOUSE_BUTTON_RIGHT   ← 1  ⍝ Mouse button right
  mOUSE_BUTTON_MIDDLE  ← 2  ⍝ Mouse button middle (pressed wheel)
  mOUSE_BUTTON_SIDE    ← 3  ⍝ Mouse button side (advanced mouse device)
  mOUSE_BUTTON_EXTRA   ← 4  ⍝ Mouse button extra (advanced mouse device)
  mOUSE_BUTTON_FORWARD ← 5  ⍝ Mouse button forward (advanced mouse device)
  mOUSE_BUTTON_BACK    ← 6  ⍝ Mouse button back (advanced mouse device)
:EndNamespace

:Namespace mouseCursor ⍝ Mouse cursor
  mOUSE_CURSOR_DEFAULT       ← 0   ⍝ Default pointer shape
  mOUSE_CURSOR_ARROW         ← 1   ⍝ Arrow shape
  mOUSE_CURSOR_IBEAM         ← 2   ⍝ Text writing cursor shape
  mOUSE_CURSOR_CROSSHAIR     ← 3   ⍝ Cross shape
  mOUSE_CURSOR_POINTING_HAND ← 4   ⍝ Pointing hand cursor
  mOUSE_CURSOR_RESIZE_EW     ← 5   ⍝ Horizontal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NS     ← 6   ⍝ Vertical resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NWSE   ← 7   ⍝ Top-left to bottom-right diagonal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_NESW   ← 8   ⍝ The top-right to bottom-left diagonal resize/move arrow shape
  mOUSE_CURSOR_RESIZE_ALL    ← 9   ⍝ The omnidirectional resize/move cursor shape
  mOUSE_CURSOR_NOT_ALLOWED   ← 10  ⍝ The operation-not-allowed shape
:EndNamespace

:Namespace gamepadButton ⍝ Gamepad buttons
  gAMEPAD_BUTTON_UNKNOWN          ← 0   ⍝ Unknown button, just for error checking
  gAMEPAD_BUTTON_LEFT_FACE_UP     ← 1   ⍝ Gamepad left DPAD up button
  gAMEPAD_BUTTON_LEFT_FACE_RIGHT  ← 2   ⍝ Gamepad left DPAD right button
  gAMEPAD_BUTTON_LEFT_FACE_DOWN   ← 3   ⍝ Gamepad left DPAD down button
  gAMEPAD_BUTTON_LEFT_FACE_LEFT   ← 4   ⍝ Gamepad left DPAD left button
  gAMEPAD_BUTTON_RIGHT_FACE_UP    ← 5   ⍝ Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  gAMEPAD_BUTTON_RIGHT_FACE_RIGHT ← 6   ⍝ Gamepad right button right (i.e. PS3: Square, Xbox: X)
  gAMEPAD_BUTTON_RIGHT_FACE_DOWN  ← 7   ⍝ Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  gAMEPAD_BUTTON_RIGHT_FACE_LEFT  ← 8   ⍝ Gamepad right button left (i.e. PS3: Circle, Xbox: B)
  gAMEPAD_BUTTON_LEFT_TRIGGER_1   ← 9   ⍝ Gamepad top/back trigger left (first), it could be a trailing button
  gAMEPAD_BUTTON_LEFT_TRIGGER_2   ← 10  ⍝ Gamepad top/back trigger left (second), it could be a trailing button
  gAMEPAD_BUTTON_RIGHT_TRIGGER_1  ← 11  ⍝ Gamepad top/back trigger right (one), it could be a trailing button
  gAMEPAD_BUTTON_RIGHT_TRIGGER_2  ← 12  ⍝ Gamepad top/back trigger right (second), it could be a trailing button
  gAMEPAD_BUTTON_MIDDLE_LEFT      ← 13  ⍝ Gamepad center buttons, left one (i.e. PS3: Select)
  gAMEPAD_BUTTON_MIDDLE           ← 14  ⍝ Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  gAMEPAD_BUTTON_MIDDLE_RIGHT     ← 15  ⍝ Gamepad center buttons, right one (i.e. PS3: Start)
  gAMEPAD_BUTTON_LEFT_THUMB       ← 16  ⍝ Gamepad joystick pressed button left
  gAMEPAD_BUTTON_RIGHT_THUMB      ← 17  ⍝ Gamepad joystick pressed button right
:EndNamespace

:Namespace gamepadAxis ⍝ Gamepad axis
  gAMEPAD_AXIS_LEFT_X        ← 0  ⍝ Gamepad left stick X axis
  gAMEPAD_AXIS_LEFT_Y        ← 1  ⍝ Gamepad left stick Y axis
  gAMEPAD_AXIS_RIGHT_X       ← 2  ⍝ Gamepad right stick X axis
  gAMEPAD_AXIS_RIGHT_Y       ← 3  ⍝ Gamepad right stick Y axis
  gAMEPAD_AXIS_LEFT_TRIGGER  ← 4  ⍝ Gamepad back trigger left, pressure level: [1..-1]
  gAMEPAD_AXIS_RIGHT_TRIGGER ← 5  ⍝ Gamepad back trigger right, pressure level: [1..-1]
:EndNamespace

:Namespace materialMapIndex ⍝ Material map index
  mATERIAL_MAP_ALBEDO     ← 0   ⍝ Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  mATERIAL_MAP_METALNESS  ← 1   ⍝ Metalness material (same as: MATERIAL_MAP_SPECULAR)
  mATERIAL_MAP_NORMAL     ← 2   ⍝ Normal material
  mATERIAL_MAP_ROUGHNESS  ← 3   ⍝ Roughness material
  mATERIAL_MAP_OCCLUSION  ← 4   ⍝ Ambient occlusion material
  mATERIAL_MAP_EMISSION   ← 5   ⍝ Emission material
  mATERIAL_MAP_HEIGHT     ← 6   ⍝ Heightmap material
  mATERIAL_MAP_CUBEMAP    ← 7   ⍝ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_IRRADIANCE ← 8   ⍝ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_PREFILTER  ← 9   ⍝ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  mATERIAL_MAP_BRDF       ← 10  ⍝ Brdf material
:EndNamespace

:Namespace shaderLocationIndex ⍝ Shader location index
  sHADER_LOC_VERTEX_POSITION   ← 0   ⍝ Shader location: vertex attribute: position
  sHADER_LOC_VERTEX_TEXCOORD01 ← 1   ⍝ Shader location: vertex attribute: texcoord01
  sHADER_LOC_VERTEX_TEXCOORD02 ← 2   ⍝ Shader location: vertex attribute: texcoord02
  sHADER_LOC_VERTEX_NORMAL     ← 3   ⍝ Shader location: vertex attribute: normal
  sHADER_LOC_VERTEX_TANGENT    ← 4   ⍝ Shader location: vertex attribute: tangent
  sHADER_LOC_VERTEX_COLOR      ← 5   ⍝ Shader location: vertex attribute: color
  sHADER_LOC_MATRIX_MVP        ← 6   ⍝ Shader location: matrix uniform: model-view-projection
  sHADER_LOC_MATRIX_VIEW       ← 7   ⍝ Shader location: matrix uniform: view (camera transform)
  sHADER_LOC_MATRIX_PROJECTION ← 8   ⍝ Shader location: matrix uniform: projection
  sHADER_LOC_MATRIX_MODEL      ← 9   ⍝ Shader location: matrix uniform: model (transform)
  sHADER_LOC_MATRIX_NORMAL     ← 10  ⍝ Shader location: matrix uniform: normal
  sHADER_LOC_VECTOR_VIEW       ← 11  ⍝ Shader location: vector uniform: view
  sHADER_LOC_COLOR_DIFFUSE     ← 12  ⍝ Shader location: vector uniform: diffuse color
  sHADER_LOC_COLOR_SPECULAR    ← 13  ⍝ Shader location: vector uniform: specular color
  sHADER_LOC_COLOR_AMBIENT     ← 14  ⍝ Shader location: vector uniform: ambient color
  sHADER_LOC_MAP_ALBEDO        ← 15  ⍝ Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  sHADER_LOC_MAP_METALNESS     ← 16  ⍝ Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  sHADER_LOC_MAP_NORMAL        ← 17  ⍝ Shader location: sampler2d texture: normal
  sHADER_LOC_MAP_ROUGHNESS     ← 18  ⍝ Shader location: sampler2d texture: roughness
  sHADER_LOC_MAP_OCCLUSION     ← 19  ⍝ Shader location: sampler2d texture: occlusion
  sHADER_LOC_MAP_EMISSION      ← 20  ⍝ Shader location: sampler2d texture: emission
  sHADER_LOC_MAP_HEIGHT        ← 21  ⍝ Shader location: sampler2d texture: height
  sHADER_LOC_MAP_CUBEMAP       ← 22  ⍝ Shader location: samplerCube texture: cubemap
  sHADER_LOC_MAP_IRRADIANCE    ← 23  ⍝ Shader location: samplerCube texture: irradiance
  sHADER_LOC_MAP_PREFILTER     ← 24  ⍝ Shader location: samplerCube texture: prefilter
  sHADER_LOC_MAP_BRDF          ← 25  ⍝ Shader location: sampler2d texture: brdf
:EndNamespace

:Namespace shaderUniformDataType ⍝ Shader uniform data type
  sHADER_UNIFORM_FLOAT     ← 0  ⍝ Shader uniform type: float
  sHADER_UNIFORM_VEC2      ← 1  ⍝ Shader uniform type: vec2 (2 float)
  sHADER_UNIFORM_VEC3      ← 2  ⍝ Shader uniform type: vec3 (3 float)
  sHADER_UNIFORM_VEC4      ← 3  ⍝ Shader uniform type: vec4 (4 float)
  sHADER_UNIFORM_INT       ← 4  ⍝ Shader uniform type: int
  sHADER_UNIFORM_IVEC2     ← 5  ⍝ Shader uniform type: ivec2 (2 int)
  sHADER_UNIFORM_IVEC3     ← 6  ⍝ Shader uniform type: ivec3 (3 int)
  sHADER_UNIFORM_IVEC4     ← 7  ⍝ Shader uniform type: ivec4 (4 int)
  sHADER_UNIFORM_SAMPLER2D ← 8  ⍝ Shader uniform type: sampler2d
:EndNamespace

:Namespace shaderAttributeDataType ⍝ Shader attribute data types
  sHADER_ATTRIB_FLOAT ← 0  ⍝ Shader attribute type: float
  sHADER_ATTRIB_VEC2  ← 1  ⍝ Shader attribute type: vec2 (2 float)
  sHADER_ATTRIB_VEC3  ← 2  ⍝ Shader attribute type: vec3 (3 float)
  sHADER_ATTRIB_VEC4  ← 3  ⍝ Shader attribute type: vec4 (4 float)
:EndNamespace

:Namespace pixelFormat ⍝ Pixel formats
  pIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ← 1   ⍝ 8 bit per pixel (no alpha)
  pIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ← 2   ⍝ 8*2 bpp (2 channels)
  pIXELFORMAT_UNCOMPRESSED_R5G6B5       ← 3   ⍝ 16 bpp
  pIXELFORMAT_UNCOMPRESSED_R8G8B8       ← 4   ⍝ 24 bpp
  pIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ← 5   ⍝ 16 bpp (1 bit alpha)
  pIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ← 6   ⍝ 16 bpp (4 bit alpha)
  pIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ← 7   ⍝ 32 bpp
  pIXELFORMAT_UNCOMPRESSED_R32          ← 8   ⍝ 32 bpp (1 channel - float)
  pIXELFORMAT_UNCOMPRESSED_R32G32B32    ← 9   ⍝ 32*3 bpp (3 channels - float)
  pIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ← 10  ⍝ 32*4 bpp (4 channels - float)
  pIXELFORMAT_UNCOMPRESSED_R16          ← 11  ⍝ 16 bpp (1 channel - half float)
  pIXELFORMAT_UNCOMPRESSED_R16G16B16    ← 12  ⍝ 16*3 bpp (3 channels - half float)
  pIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ← 13  ⍝ 16*4 bpp (4 channels - half float)
  pIXELFORMAT_COMPRESSED_DXT1_RGB       ← 14  ⍝ 4 bpp (no alpha)
  pIXELFORMAT_COMPRESSED_DXT1_RGBA      ← 15  ⍝ 4 bpp (1 bit alpha)
  pIXELFORMAT_COMPRESSED_DXT3_RGBA      ← 16  ⍝ 8 bpp
  pIXELFORMAT_COMPRESSED_DXT5_RGBA      ← 17  ⍝ 8 bpp
  pIXELFORMAT_COMPRESSED_ETC1_RGB       ← 18  ⍝ 4 bpp
  pIXELFORMAT_COMPRESSED_ETC2_RGB       ← 19  ⍝ 4 bpp
  pIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ← 20  ⍝ 8 bpp
  pIXELFORMAT_COMPRESSED_PVRT_RGB       ← 21  ⍝ 4 bpp
  pIXELFORMAT_COMPRESSED_PVRT_RGBA      ← 22  ⍝ 4 bpp
  pIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ← 23  ⍝ 8 bpp
  pIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ← 24  ⍝ 2 bpp
:EndNamespace

:Namespace textureFilter ⍝ Texture parameters: filter mode
  tEXTURE_FILTER_POINT           ← 0  ⍝ No filter, just pixel approximation
  tEXTURE_FILTER_BILINEAR        ← 1  ⍝ Linear filtering
  tEXTURE_FILTER_TRILINEAR       ← 2  ⍝ Trilinear filtering (linear with mipmaps)
  tEXTURE_FILTER_ANISOTROPIC_4X  ← 3  ⍝ Anisotropic filtering 4x
  tEXTURE_FILTER_ANISOTROPIC_8X  ← 4  ⍝ Anisotropic filtering 8x
  tEXTURE_FILTER_ANISOTROPIC_16X ← 5  ⍝ Anisotropic filtering 16x
:EndNamespace

:Namespace textureWrap ⍝ Texture parameters: wrap mode
  tEXTURE_WRAP_REPEAT        ← 0  ⍝ Repeats texture in tiled mode
  tEXTURE_WRAP_CLAMP         ← 1  ⍝ Clamps texture to edge pixel in tiled mode
  tEXTURE_WRAP_MIRROR_REPEAT ← 2  ⍝ Mirrors and repeats the texture in tiled mode
  tEXTURE_WRAP_MIRROR_CLAMP  ← 3  ⍝ Mirrors and clamps to border the texture in tiled mode
:EndNamespace

:Namespace cubemapLayout ⍝ Cubemap layouts
  cUBEMAP_LAYOUT_AUTO_DETECT         ← 0  ⍝ Automatically detect layout type
  cUBEMAP_LAYOUT_LINE_VERTICAL       ← 1  ⍝ Layout is defined by a vertical line with faces
  cUBEMAP_LAYOUT_LINE_HORIZONTAL     ← 2  ⍝ Layout is defined by a horizontal line with faces
  cUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR ← 3  ⍝ Layout is defined by a 3x4 cross with cubemap faces
  cUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE ← 4  ⍝ Layout is defined by a 4x3 cross with cubemap faces
  cUBEMAP_LAYOUT_PANORAMA            ← 5  ⍝ Layout is defined by a panorama image (equirrectangular map)
:EndNamespace

:Namespace fontType ⍝ Font type, defines generation method
  fONT_DEFAULT ← 0  ⍝ Default font generation, anti-aliased
  fONT_BITMAP  ← 1  ⍝ Bitmap font generation, no anti-aliasing
  fONT_SDF     ← 2  ⍝ SDF font generation, requires external shader
:EndNamespace

:Namespace blendMode ⍝ Color blending modes (pre-defined)
  bLEND_ALPHA             ← 0  ⍝ Blend textures considering alpha (default)
  bLEND_ADDITIVE          ← 1  ⍝ Blend textures adding colors
  bLEND_MULTIPLIED        ← 2  ⍝ Blend textures multiplying colors
  bLEND_ADD_COLORS        ← 3  ⍝ Blend textures adding colors (alternative)
  bLEND_SUBTRACT_COLORS   ← 4  ⍝ Blend textures subtracting colors (alternative)
  bLEND_ALPHA_PREMULTIPLY ← 5  ⍝ Blend premultiplied textures considering alpha
  bLEND_CUSTOM            ← 6  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactors())
  bLEND_CUSTOM_SEPARATE   ← 7  ⍝ Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
:EndNamespace

:Namespace gesture ⍝ Gesture
  gESTURE_NONE        ← 0    ⍝ No gesture
  gESTURE_TAP         ← 1    ⍝ Tap gesture
  gESTURE_DOUBLETAP   ← 2    ⍝ Double tap gesture
  gESTURE_HOLD        ← 4    ⍝ Hold gesture
  gESTURE_DRAG        ← 8    ⍝ Drag gesture
  gESTURE_SWIPE_RIGHT ← 16   ⍝ Swipe right gesture
  gESTURE_SWIPE_LEFT  ← 32   ⍝ Swipe left gesture
  gESTURE_SWIPE_UP    ← 64   ⍝ Swipe up gesture
  gESTURE_SWIPE_DOWN  ← 128  ⍝ Swipe down gesture
  gESTURE_PINCH_IN    ← 256  ⍝ Pinch in gesture
  gESTURE_PINCH_OUT   ← 512  ⍝ Pinch out gesture
:EndNamespace

:Namespace cameraMode ⍝ Camera system modes
  cAMERA_CUSTOM       ← 0  ⍝ Custom camera
  cAMERA_FREE         ← 1  ⍝ Free camera
  cAMERA_ORBITAL      ← 2  ⍝ Orbital camera
  cAMERA_FIRST_PERSON ← 3  ⍝ First person camera
  cAMERA_THIRD_PERSON ← 4  ⍝ Third person camera
:EndNamespace

:Namespace cameraProjection ⍝ Camera projection
  cAMERA_PERSPECTIVE  ← 0  ⍝ Perspective projection
  cAMERA_ORTHOGRAPHIC ← 1  ⍝ Orthographic projection
:EndNamespace

:Namespace nPatchLayout ⍝ N-patch layout
  nPATCH_NINE_PATCH             ← 0  ⍝ Npatch layout: 3x3 tiles
  nPATCH_THREE_PATCH_VERTICAL   ← 1  ⍝ Npatch layout: 1x3 tiles
  nPATCH_THREE_PATCH_HORIZONTAL ← 2  ⍝ Npatch layout: 3x1 tiles
:EndNamespace



v2 ← ⍬ ⍝ Vector2, 2 components
  v2,←⊂ f ⍝ x  ⍝ Vector x component
  v2,←⊂ f ⍝ y  ⍝ Vector y component

v3 ← ⍬ ⍝ Vector3, 3 components
  v3,←⊂ f ⍝ x  ⍝ Vector x component
  v3,←⊂ f ⍝ y  ⍝ Vector y component
  v3,←⊂ f ⍝ z  ⍝ Vector z component

v4 ← ⍬ ⍝ Vector4, 4 components
  v4,←⊂ f ⍝ x  ⍝ Vector x component
  v4,←⊂ f ⍝ y  ⍝ Vector y component
  v4,←⊂ f ⍝ z  ⍝ Vector z component
  v4,←⊂ f ⍝ w  ⍝ Vector w component
quaternion ← v4 ⍝ Quaternion, 4 components (Vector4 alias)

matrix ← ⍬ ⍝ Matrix, 4x4 components, column major, OpenGL style, right-handed
  matrix,←⊂ f ⍝ m0   ⍝ Matrix first row (4 components)
  matrix,←⊂ f ⍝ m4   ⍝ Matrix first row (4 components)
  matrix,←⊂ f ⍝ m8   ⍝ Matrix first row (4 components)
  matrix,←⊂ f ⍝ m12  ⍝ Matrix first row (4 components)
  matrix,←⊂ f ⍝ m1   ⍝ Matrix second row (4 components)
  matrix,←⊂ f ⍝ m5   ⍝ Matrix second row (4 components)
  matrix,←⊂ f ⍝ m9   ⍝ Matrix second row (4 components)
  matrix,←⊂ f ⍝ m13  ⍝ Matrix second row (4 components)
  matrix,←⊂ f ⍝ m2   ⍝ Matrix third row (4 components)
  matrix,←⊂ f ⍝ m6   ⍝ Matrix third row (4 components)
  matrix,←⊂ f ⍝ m10  ⍝ Matrix third row (4 components)
  matrix,←⊂ f ⍝ m14  ⍝ Matrix third row (4 components)
  matrix,←⊂ f ⍝ m3   ⍝ Matrix fourth row (4 components)
  matrix,←⊂ f ⍝ m7   ⍝ Matrix fourth row (4 components)
  matrix,←⊂ f ⍝ m11  ⍝ Matrix fourth row (4 components)
  matrix,←⊂ f ⍝ m15  ⍝ Matrix fourth row (4 components)

color ← ⍬ ⍝ Color, 4 components, R8G8B8A8 (32bit)
  color,←⊂ u8 ⍝ r  ⍝ Color red value
  color,←⊂ u8 ⍝ g  ⍝ Color green value
  color,←⊂ u8 ⍝ b  ⍝ Color blue value
  color,←⊂ u8 ⍝ a  ⍝ Color alpha value

rectangle ← ⍬ ⍝ Rectangle, 4 components
  rectangle,←⊂ f ⍝ x       ⍝ Rectangle top-left corner position x
  rectangle,←⊂ f ⍝ y       ⍝ Rectangle top-left corner position y
  rectangle,←⊂ f ⍝ width   ⍝ Rectangle width
  rectangle,←⊂ f ⍝ height  ⍝ Rectangle height

image ← ⍬ ⍝ Image, pixel data stored in CPU memory (RAM)
  image,←⊂ ptr ⍝ data     ⍝ Image raw data
  image,←⊂ i   ⍝ width    ⍝ Image base width
  image,←⊂ i   ⍝ height   ⍝ Image base height
  image,←⊂ i   ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  image,←⊂ i   ⍝ format   ⍝ Data format (PixelFormat type)

texture ← ⍬ ⍝ Texture, tex data stored in GPU memory (VRAM)
  texture,←⊂ u ⍝ id       ⍝ OpenGL texture id
  texture,←⊂ i ⍝ width    ⍝ Texture base width
  texture,←⊂ i ⍝ height   ⍝ Texture base height
  texture,←⊂ i ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  texture,←⊂ i ⍝ format   ⍝ Data format (PixelFormat type)
texture2D ← texture ⍝ Texture2D, same as Texture
textureCubemap ← texture ⍝ TextureCubemap, same as Texture

renderTexture ← ⍬ ⍝ RenderTexture, fbo for texture rendering
  renderTexture,←⊂ u       ⍝ id       ⍝ OpenGL framebuffer object id
  renderTexture,←⊂ texture ⍝ texture  ⍝ Color buffer attachment texture
  renderTexture,←⊂ texture ⍝ depth    ⍝ Depth buffer attachment texture
renderTexture2D ← renderTexture ⍝ RenderTexture2D, same as RenderTexture

nPatchInfo ← ⍬ ⍝ NPatchInfo, n-patch layout info
  nPatchInfo,←⊂ rectangle ⍝ source  ⍝ Texture source rectangle
  nPatchInfo,←⊂ i         ⍝ left    ⍝ Left border offset
  nPatchInfo,←⊂ i         ⍝ top     ⍝ Top border offset
  nPatchInfo,←⊂ i         ⍝ right   ⍝ Right border offset
  nPatchInfo,←⊂ i         ⍝ bottom  ⍝ Bottom border offset
  nPatchInfo,←⊂ i         ⍝ layout  ⍝ Layout of the n-patch: 3x3, 1x3 or 3x1

glyphInfo ← ⍬ ⍝ GlyphInfo, font characters glyphs info
  glyphInfo,←⊂ i     ⍝ value     ⍝ Character value (Unicode)
  glyphInfo,←⊂ i     ⍝ offsetX   ⍝ Character offset X when drawing
  glyphInfo,←⊂ i     ⍝ offsetY   ⍝ Character offset Y when drawing
  glyphInfo,←⊂ i     ⍝ advanceX  ⍝ Character advance position X
  glyphInfo,←⊂ image ⍝ image     ⍝ Character image data

font ← ⍬ ⍝ Font, font texture and GlyphInfo array data
  font,←⊂ i             ⍝ baseSize      ⍝ Base size (default chars height)
  font,←⊂ i             ⍝ glyphCount    ⍝ Number of glyph characters
  font,←⊂ i             ⍝ glyphPadding  ⍝ Padding around the glyph characters
  font,←⊂ texture2D     ⍝ texture       ⍝ Texture atlas containing the glyphs
  font,←⊂ '=',rectangle ⍝ recs          ⍝ Rectangles in texture for the glyphs
  font,←⊂ '=',glyphInfo ⍝ glyphs        ⍝ Glyphs info data

camera3D ← ⍬ ⍝ Camera, defines position/orientation in 3d space
  camera3D,←⊂ v3 ⍝ position    ⍝ Camera position
  camera3D,←⊂ v3 ⍝ target      ⍝ Camera target it looks-at
  camera3D,←⊂ v3 ⍝ up          ⍝ Camera up vector (rotation over its axis)
  camera3D,←⊂ f  ⍝ fovy        ⍝ Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  camera3D,←⊂ i  ⍝ projection  ⍝ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
camera ← camera3D ⍝ Camera type fallback, defaults to Camera3D

camera2D ← ⍬ ⍝ Camera2D, defines position/orientation in 2d space
  camera2D,←⊂ v2 ⍝ offset    ⍝ Camera offset (displacement from target)
  camera2D,←⊂ v2 ⍝ target    ⍝ Camera target (rotation and zoom origin)
  camera2D,←⊂ f  ⍝ rotation  ⍝ Camera rotation in degrees
  camera2D,←⊂ f  ⍝ zoom      ⍝ Camera zoom (scaling), should be 1.0f by default

mesh ← ⍬ ⍝ Mesh, vertex data and vao/vbo
  mesh,←⊂ i     ⍝ vertexCount    ⍝ Number of vertices stored in arrays
  mesh,←⊂ i     ⍝ triangleCount  ⍝ Number of triangles stored (indexed or not)
  mesh,←⊂ '=',f ⍝ vertices       ⍝ Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  mesh,←⊂ '=',f ⍝ texcoords      ⍝ Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  mesh,←⊂ '=',f ⍝ texcoords2     ⍝ Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  mesh,←⊂ '=',f ⍝ normals        ⍝ Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  mesh,←⊂ '=',f ⍝ tangents       ⍝ Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  mesh,←⊂ ustr  ⍝ colors         ⍝ Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  mesh,←⊂ '=U2' ⍝ indices        ⍝ Vertex indices (in case vertex data comes indexed)
  mesh,←⊂ '=',f ⍝ animVertices   ⍝ Animated vertex positions (after bones transformations)
  mesh,←⊂ '=',f ⍝ animNormals    ⍝ Animated normals (after bones transformations)
  mesh,←⊂ ustr  ⍝ boneIds        ⍝ Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
  mesh,←⊂ '=',f ⍝ boneWeights    ⍝ Vertex bone weight, up to 4 bones influence by vertex (skinning)
  mesh,←⊂ u     ⍝ vaoId          ⍝ OpenGL Vertex Array Object id
  mesh,←⊂ '=',u ⍝ vboId          ⍝ OpenGL Vertex Buffer Objects id (default vertex data)

shader ← ⍬ ⍝ Shader
  shader,←⊂ u     ⍝ id    ⍝ Shader program id
  shader,←⊂ '=',i ⍝ locs  ⍝ Shader locations array (RL_MAX_SHADER_LOCATIONS)

materialMap ← ⍬ ⍝ MaterialMap
  materialMap,←⊂ texture2D ⍝ texture  ⍝ Material map texture
  materialMap,←⊂ color     ⍝ color    ⍝ Material map color
  materialMap,←⊂ f         ⍝ value    ⍝ Material map value

material ← ⍬ ⍝ Material, includes shader and maps
  material,←⊂ shader          ⍝ shader  ⍝ Material shader
  material,←⊂ '=',materialMap ⍝ maps    ⍝ Material maps array (MAX_MATERIAL_MAPS)
  material,←⊂ f,'[4]'         ⍝ params  ⍝ Material generic parameters (if required)

transform ← ⍬ ⍝ Transform, vertex transformation data
  transform,←⊂ v3         ⍝ translation  ⍝ Translation
  transform,←⊂ quaternion ⍝ rotation     ⍝ Rotation
  transform,←⊂ v3         ⍝ scale        ⍝ Scale

boneInfo ← ⍬ ⍝ Bone, skeletal animation bone
  boneInfo,←⊂ u8,'[32]' ⍝ name    ⍝ Bone name
  boneInfo,←⊂ i         ⍝ parent  ⍝ Bone parent

model ← ⍬ ⍝ Model, meshes, materials and animation data
  model,←⊂ matrix        ⍝ transform      ⍝ Local transform matrix
  model,←⊂ i             ⍝ meshCount      ⍝ Number of meshes
  model,←⊂ i             ⍝ materialCount  ⍝ Number of materials
  model,←⊂ '=',mesh      ⍝ meshes         ⍝ Meshes array
  model,←⊂ '=',material  ⍝ materials      ⍝ Materials array
  model,←⊂ '=',i         ⍝ meshMaterial   ⍝ Mesh material number
  model,←⊂ i             ⍝ boneCount      ⍝ Number of bones
  model,←⊂ '=',boneInfo  ⍝ bones          ⍝ Bones information (skeleton)
  model,←⊂ '=',transform ⍝ bindPose       ⍝ Bones base transformation (pose)

modelAnimation ← ⍬ ⍝ ModelAnimation
  modelAnimation,←⊂ i              ⍝ boneCount   ⍝ Number of bones
  modelAnimation,←⊂ i              ⍝ frameCount  ⍝ Number of animation frames
  modelAnimation,←⊂ '=',boneInfo   ⍝ bones       ⍝ Bones information (skeleton)
  modelAnimation,←⊂ '==',transform ⍝ framePoses  ⍝ Poses array by frame
  modelAnimation,←⊂ u8,'[32]'      ⍝ name        ⍝ Animation name

ray ← ⍬ ⍝ Ray, ray for raycasting
  ray,←⊂ v3 ⍝ position   ⍝ Ray position (origin)
  ray,←⊂ v3 ⍝ direction  ⍝ Ray direction

rayCollision ← ⍬ ⍝ RayCollision, ray hit information
  rayCollision,←⊂ bool ⍝ hit       ⍝ Did the ray hit something?
  rayCollision,←⊂ f    ⍝ distance  ⍝ Distance to the nearest hit
  rayCollision,←⊂ v3   ⍝ point     ⍝ Point of the nearest hit
  rayCollision,←⊂ v3   ⍝ normal    ⍝ Surface normal of hit

boundingBox ← ⍬ ⍝ BoundingBox
  boundingBox,←⊂ v3 ⍝ min  ⍝ Minimum vertex box-corner
  boundingBox,←⊂ v3 ⍝ max  ⍝ Maximum vertex box-corner

wave ← ⍬ ⍝ Wave, audio wave data
  wave,←⊂ u   ⍝ frameCount  ⍝ Total number of frames (considering channels)
  wave,←⊂ u   ⍝ sampleRate  ⍝ Frequency (samples per second)
  wave,←⊂ u   ⍝ sampleSize  ⍝ Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  wave,←⊂ u   ⍝ channels    ⍝ Number of channels (1-mono, 2-stereo, ...)
  wave,←⊂ ptr ⍝ data        ⍝ Buffer data pointer

audioStream ← ⍬ ⍝ AudioStream, custom audio stream
  audioStream,←⊂ ptr ⍝ buffer      ⍝ Pointer to internal data used by the audio system
  audioStream,←⊂ ptr ⍝ processor   ⍝ Pointer to internal data processor, useful for audio effects
  audioStream,←⊂ u   ⍝ sampleRate  ⍝ Frequency (samples per second)
  audioStream,←⊂ u   ⍝ sampleSize  ⍝ Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  audioStream,←⊂ u   ⍝ channels    ⍝ Number of channels (1-mono, 2-stereo, ...)

sound ← ⍬ ⍝ Sound
  sound,←⊂ audioStream ⍝ stream      ⍝ Audio stream
  sound,←⊂ u           ⍝ frameCount  ⍝ Total number of frames (considering channels)

music ← ⍬ ⍝ Music, audio stream, anything longer than ~10 seconds should be streamed
  music,←⊂ audioStream ⍝ stream      ⍝ Audio stream
  music,←⊂ u           ⍝ frameCount  ⍝ Total number of frames (considering channels)
  music,←⊂ bool        ⍝ looping     ⍝ Music looping enable
  music,←⊂ i           ⍝ ctxType     ⍝ Type of music context (audio filetype)
  music,←⊂ ptr         ⍝ ctxData     ⍝ Audio context data, depends on type

vrDeviceInfo ← ⍬ ⍝ VrDeviceInfo, Head-Mounted-Display device parameters
  vrDeviceInfo,←⊂ i       ⍝ hResolution             ⍝ Horizontal resolution in pixels
  vrDeviceInfo,←⊂ i       ⍝ vResolution             ⍝ Vertical resolution in pixels
  vrDeviceInfo,←⊂ f       ⍝ hScreenSize             ⍝ Horizontal size in meters
  vrDeviceInfo,←⊂ f       ⍝ vScreenSize             ⍝ Vertical size in meters
  vrDeviceInfo,←⊂ f       ⍝ vScreenCenter           ⍝ Screen center in meters
  vrDeviceInfo,←⊂ f       ⍝ eyeToScreenDistance     ⍝ Distance between eye and display in meters
  vrDeviceInfo,←⊂ f       ⍝ lensSeparationDistance  ⍝ Lens separation distance in meters
  vrDeviceInfo,←⊂ f       ⍝ interpupillaryDistance  ⍝ IPD (distance between pupils) in meters
  vrDeviceInfo,←⊂ f,'[4]' ⍝ lensDistortionValues    ⍝ Lens distortion constant parameters
  vrDeviceInfo,←⊂ f,'[4]' ⍝ chromaAbCorrection      ⍝ Chromatic aberration correction parameters

vrStereoConfig ← ⍬ ⍝ VrStereoConfig, VR stereo rendering configuration for simulator
  vrStereoConfig,←⊂ matrix,'[2]' ⍝ projection         ⍝ VR projection matrices (per eye)
  vrStereoConfig,←⊂ matrix,'[2]' ⍝ viewOffset         ⍝ VR view offset matrices (per eye)
  vrStereoConfig,←⊂ f,'[2]'      ⍝ leftLensCenter     ⍝ VR left lens center
  vrStereoConfig,←⊂ f,'[2]'      ⍝ rightLensCenter    ⍝ VR right lens center
  vrStereoConfig,←⊂ f,'[2]'      ⍝ leftScreenCenter   ⍝ VR left screen center
  vrStereoConfig,←⊂ f,'[2]'      ⍝ rightScreenCenter  ⍝ VR right screen center
  vrStereoConfig,←⊂ f,'[2]'      ⍝ scale              ⍝ VR distortion scale
  vrStereoConfig,←⊂ f,'[2]'      ⍝ scaleIn            ⍝ VR distortion scale in

filePathList ← ⍬ ⍝ File path list
  filePathList,←⊂ u       ⍝ capacity  ⍝ Filepaths max entries
  filePathList,←⊂ u       ⍝ count     ⍝ Filepaths entries count
  filePathList,←⊂ '=',str ⍝ paths     ⍝ Filepaths entries

automationEvent ← ⍬ ⍝ Automation event
  automationEvent,←⊂ u       ⍝ frame   ⍝ Event frame
  automationEvent,←⊂ u       ⍝ type    ⍝ Event type (AutomationEventType)
  automationEvent,←⊂ i,'[4]' ⍝ params  ⍝ Event parameters (if required)

automationEventList ← ⍬ ⍝ Automation event list
  automationEventList,←⊂ u                   ⍝ capacity  ⍝ Events max entries (MAX_AUTOMATION_EVENTS)
  automationEventList,←⊂ u                   ⍝ count     ⍝ Events entries count
  automationEventList,←⊂ '=',automationEvent ⍝ events    ⍝ Events entries

∇Start pathToRaylibBinaryArg
:If ⍬≡pathToRaylibBinaryArg
  pathToRaylibBinaryArg ← {⍵:'../libraylib.so.5.0.0'⋄'raylib.dll'}'Linux'≡'-64'~⍨⊃#⎕WG'APLVersion'
:Endif
pathToRaylibBinary ← pathToRaylibBinaryArg
⎕NA                     R('InitWindow'                       (i i str                                       )) ⍝ width height title                                                ⍝ Initialize window and OpenGL context
⎕NA                     R('CloseWindow'                      (⍬                                             )) ⍝                                                                   ⍝ Close window and unload OpenGL context
⎕NA bool                R('WindowShouldClose'                (⍬                                             )) ⍝                                                                   ⍝ Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
⎕NA bool                R('IsWindowReady'                    (⍬                                             )) ⍝                                                                   ⍝ Check if window has been initialized successfully
⎕NA bool                R('IsWindowFullscreen'               (⍬                                             )) ⍝                                                                   ⍝ Check if window is currently fullscreen
⎕NA bool                R('IsWindowHidden'                   (⍬                                             )) ⍝                                                                   ⍝ Check if window is currently hidden (only PLATFORM_DESKTOP)
⎕NA bool                R('IsWindowMinimized'                (⍬                                             )) ⍝                                                                   ⍝ Check if window is currently minimized (only PLATFORM_DESKTOP)
⎕NA bool                R('IsWindowMaximized'                (⍬                                             )) ⍝                                                                   ⍝ Check if window is currently maximized (only PLATFORM_DESKTOP)
⎕NA bool                R('IsWindowFocused'                  (⍬                                             )) ⍝                                                                   ⍝ Check if window is currently focused (only PLATFORM_DESKTOP)
⎕NA bool                R('IsWindowResized'                  (⍬                                             )) ⍝                                                                   ⍝ Check if window has been resized last frame
⎕NA bool                R('IsWindowState'                    (,⊂ u                                          )) ⍝ flag                                                              ⍝ Check if one specific window flag is enabled
⎕NA                     R('SetWindowState'                   (,⊂ u                                          )) ⍝ flags                                                             ⍝ Set window configuration state using flags (only PLATFORM_DESKTOP)
⎕NA                     R('ClearWindowState'                 (,⊂ u                                          )) ⍝ flags                                                             ⍝ Clear window configuration state flags
⎕NA                     R('ToggleFullscreen'                 (⍬                                             )) ⍝                                                                   ⍝ Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
⎕NA                     R('ToggleBorderlessWindowed'         (⍬                                             )) ⍝                                                                   ⍝ Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
⎕NA                     R('MaximizeWindow'                   (⍬                                             )) ⍝                                                                   ⍝ Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
⎕NA                     R('MinimizeWindow'                   (⍬                                             )) ⍝                                                                   ⍝ Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
⎕NA                     R('RestoreWindow'                    (⍬                                             )) ⍝                                                                   ⍝ Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
⎕NA                     R('SetWindowIcon'                    (,⊂ image                                      )) ⍝ image                                                             ⍝ Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
⎕NA                     R('SetWindowIcons'                   (('=',image) i                                 )) ⍝ images count                                                      ⍝ Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
⎕NA                     R('SetWindowTitle'                   (,⊂ str                                        )) ⍝ title                                                             ⍝ Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
⎕NA                     R('SetWindowPosition'                (i i                                           )) ⍝ x y                                                               ⍝ Set window position on screen (only PLATFORM_DESKTOP)
⎕NA                     R('SetWindowMonitor'                 (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Set monitor for the current window
⎕NA                     R('SetWindowMinSize'                 (i i                                           )) ⍝ width height                                                      ⍝ Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
⎕NA                     R('SetWindowMaxSize'                 (i i                                           )) ⍝ width height                                                      ⍝ Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
⎕NA                     R('SetWindowSize'                    (i i                                           )) ⍝ width height                                                      ⍝ Set window dimensions
⎕NA                     R('SetWindowOpacity'                 (,⊂ f                                          )) ⍝ opacity                                                           ⍝ Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
⎕NA                     R('SetWindowFocused'                 (⍬                                             )) ⍝                                                                   ⍝ Set window focused (only PLATFORM_DESKTOP)
⎕NA ptr                 R('GetWindowHandle'                  (⍬                                             )) ⍝                                                                   ⍝ Get native window handle
⎕NA i                   R('GetScreenWidth'                   (⍬                                             )) ⍝                                                                   ⍝ Get current screen width
⎕NA i                   R('GetScreenHeight'                  (⍬                                             )) ⍝                                                                   ⍝ Get current screen height
⎕NA i                   R('GetRenderWidth'                   (⍬                                             )) ⍝                                                                   ⍝ Get current render width (it considers HiDPI)
⎕NA i                   R('GetRenderHeight'                  (⍬                                             )) ⍝                                                                   ⍝ Get current render height (it considers HiDPI)
⎕NA i                   R('GetMonitorCount'                  (⍬                                             )) ⍝                                                                   ⍝ Get number of connected monitors
⎕NA i                   R('GetCurrentMonitor'                (⍬                                             )) ⍝                                                                   ⍝ Get current connected monitor
⎕NA v2                  R('GetMonitorPosition'               (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor position
⎕NA i                   R('GetMonitorWidth'                  (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor width (current video mode used by monitor)
⎕NA i                   R('GetMonitorHeight'                 (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor height (current video mode used by monitor)
⎕NA i                   R('GetMonitorPhysicalWidth'          (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor physical width in millimetres
⎕NA i                   R('GetMonitorPhysicalHeight'         (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor physical height in millimetres
⎕NA i                   R('GetMonitorRefreshRate'            (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor refresh rate
⎕NA v2                  R('GetWindowPosition'                (⍬                                             )) ⍝                                                                   ⍝ Get window position XY on monitor
⎕NA v2                  R('GetWindowScaleDPI'                (⍬                                             )) ⍝                                                                   ⍝ Get window scale DPI factor
⎕NA (ptr⊣str)           R('GetMonitorName'                   (,⊂ i                                          )) ⍝ monitor                                                           ⍝ Get the human-readable, UTF-8 encoded name of the specified monitor
⎕NA                     R('SetClipboardText'                 (,⊂ str                                        )) ⍝ text                                                              ⍝ Set clipboard text content
⎕NA (ptr⊣str)           R('GetClipboardText'                 (⍬                                             )) ⍝                                                                   ⍝ Get clipboard text content
⎕NA                     R('EnableEventWaiting'               (⍬                                             )) ⍝                                                                   ⍝ Enable waiting for events on EndDrawing(), no automatic event polling
⎕NA                     R('DisableEventWaiting'              (⍬                                             )) ⍝                                                                   ⍝ Disable waiting for events on EndDrawing(), automatic events polling
⎕NA                     R('ShowCursor'                       (⍬                                             )) ⍝                                                                   ⍝ Shows cursor
⎕NA                     R('HideCursor'                       (⍬                                             )) ⍝                                                                   ⍝ Hides cursor
⎕NA bool                R('IsCursorHidden'                   (⍬                                             )) ⍝                                                                   ⍝ Check if cursor is not visible
⎕NA                     R('EnableCursor'                     (⍬                                             )) ⍝                                                                   ⍝ Enables cursor (unlock cursor)
⎕NA                     R('DisableCursor'                    (⍬                                             )) ⍝                                                                   ⍝ Disables cursor (lock cursor)
⎕NA bool                R('IsCursorOnScreen'                 (⍬                                             )) ⍝                                                                   ⍝ Check if cursor is on the screen
⎕NA                     R('ClearBackground'                  (,⊂ color                                      )) ⍝ color                                                             ⍝ Set background color (framebuffer clear color)
⎕NA                     R('BeginDrawing'                     (⍬                                             )) ⍝                                                                   ⍝ Setup canvas (framebuffer) to start drawing
⎕NA                     R('EndDrawing'                       (⍬                                             )) ⍝                                                                   ⍝ End canvas drawing and swap buffers (double buffering)
⎕NA                     R('BeginMode2D'                      (,⊂ camera2D                                   )) ⍝ camera                                                            ⍝ Begin 2D mode with custom camera (2D)
⎕NA                     R('EndMode2D'                        (⍬                                             )) ⍝                                                                   ⍝ Ends 2D mode with custom camera
⎕NA                     R('BeginMode3D'                      (,⊂ camera3D                                   )) ⍝ camera                                                            ⍝ Begin 3D mode with custom camera (3D)
⎕NA                     R('EndMode3D'                        (⍬                                             )) ⍝                                                                   ⍝ Ends 3D mode and returns to default 2D orthographic mode
⎕NA                     R('BeginTextureMode'                 (,⊂ renderTexture2D                            )) ⍝ target                                                            ⍝ Begin drawing to render texture
⎕NA                     R('EndTextureMode'                   (⍬                                             )) ⍝                                                                   ⍝ Ends drawing to render texture
⎕NA                     R('BeginShaderMode'                  (,⊂ shader                                     )) ⍝ shader                                                            ⍝ Begin custom shader drawing
⎕NA                     R('EndShaderMode'                    (⍬                                             )) ⍝                                                                   ⍝ End custom shader drawing (use default shader)
⎕NA                     R('BeginBlendMode'                   (,⊂ i                                          )) ⍝ mode                                                              ⍝ Begin blending mode (alpha, additive, multiplied, subtract, custom)
⎕NA                     R('EndBlendMode'                     (⍬                                             )) ⍝                                                                   ⍝ End blending mode (reset to default: alpha blending)
⎕NA                     R('BeginScissorMode'                 (i i i i                                       )) ⍝ x y width height                                                  ⍝ Begin scissor mode (define screen area for following drawing)
⎕NA                     R('EndScissorMode'                   (⍬                                             )) ⍝                                                                   ⍝ End scissor mode
⎕NA                     R('BeginVrStereoMode'                (,⊂ vrStereoConfig                             )) ⍝ config                                                            ⍝ Begin stereo rendering (requires VR simulator)
⎕NA                     R('EndVrStereoMode'                  (⍬                                             )) ⍝                                                                   ⍝ End stereo rendering (requires VR simulator)
⎕NA vrStereoConfig      R('LoadVrStereoConfig'               (,⊂ vrDeviceInfo                               )) ⍝ device                                                            ⍝ Load VR stereo config for VR simulator device parameters
⎕NA                     R('UnloadVrStereoConfig'             (,⊂ vrStereoConfig                             )) ⍝ config                                                            ⍝ Unload VR stereo config
⎕NA shader              R('LoadShader'                       (str str                                       )) ⍝ vsFileName fsFileName                                             ⍝ Load shader from files and bind default locations
⎕NA shader              R('LoadShaderFromMemory'             (str str                                       )) ⍝ vsCode fsCode                                                     ⍝ Load shader from code strings and bind default locations
⎕NA bool                R('IsShaderReady'                    (,⊂ shader                                     )) ⍝ shader                                                            ⍝ Check if a shader is ready
⎕NA i                   R('GetShaderLocation'                (shader str                                    )) ⍝ shader uniformName                                                ⍝ Get shader uniform location
⎕NA i                   R('GetShaderLocationAttrib'          (shader str                                    )) ⍝ shader attribName                                                 ⍝ Get shader attribute location
⎕NA                     R('SetShaderValue'                   (shader i ptr i                                )) ⍝ shader locIndex value uniformType                                 ⍝ Set shader uniform value
⎕NA                     R('SetShaderValueV'                  (shader i ptr i i                              )) ⍝ shader locIndex value uniformType count                           ⍝ Set shader uniform value vector
⎕NA                     R('SetShaderValueMatrix'             (shader i matrix                               )) ⍝ shader locIndex mat                                               ⍝ Set shader uniform value (matrix 4x4)
⎕NA                     R('SetShaderValueTexture'            (shader i texture2D                            )) ⍝ shader locIndex texture                                           ⍝ Set shader uniform value for texture (sampler2d)
⎕NA                     R('UnloadShader'                     (,⊂ shader                                     )) ⍝ shader                                                            ⍝ Unload shader from GPU memory (VRAM)
⎕NA ray                 R('GetMouseRay'                      (v2 camera                                     )) ⍝ mousePosition camera                                              ⍝ Get a ray trace from mouse position
⎕NA matrix              R('GetCameraMatrix'                  (,⊂ camera                                     )) ⍝ camera                                                            ⍝ Get camera transform matrix (view matrix)
⎕NA matrix              R('GetCameraMatrix2D'                (,⊂ camera2D                                   )) ⍝ camera                                                            ⍝ Get camera 2d transform matrix
⎕NA v2                  R('GetWorldToScreen'                 (v3 camera                                     )) ⍝ position camera                                                   ⍝ Get the screen space position for a 3d world space position
⎕NA v2                  R('GetScreenToWorld2D'               (v2 camera2D                                   )) ⍝ position camera                                                   ⍝ Get the world space position for a 2d camera screen space position
⎕NA v2                  R('GetWorldToScreenEx'               (v3 camera i i                                 )) ⍝ position camera width height                                      ⍝ Get size position for a 3d world space position
⎕NA v2                  R('GetWorldToScreen2D'               (v2 camera2D                                   )) ⍝ position camera                                                   ⍝ Get the screen space position for a 2d camera world space position
⎕NA                     R('SetTargetFPS'                     (,⊂ i                                          )) ⍝ fps                                                               ⍝ Set target FPS (maximum)
⎕NA f                   R('GetFrameTime'                     (⍬                                             )) ⍝                                                                   ⍝ Get time in seconds for last frame drawn (delta time)
⎕NA 'F8'                R('GetTime'                          (⍬                                             )) ⍝                                                                   ⍝ Get elapsed time in seconds since InitWindow()
⎕NA i                   R('GetFPS'                           (⍬                                             )) ⍝                                                                   ⍝ Get current FPS
⎕NA                     R('SwapScreenBuffer'                 (⍬                                             )) ⍝                                                                   ⍝ Swap back buffer with front buffer (screen drawing)
⎕NA                     R('PollInputEvents'                  (⍬                                             )) ⍝                                                                   ⍝ Register all input events
⎕NA                     R('WaitTime'                         (,⊂ 'F8'                                       )) ⍝ seconds                                                           ⍝ Wait for some time (halt program execution)
⎕NA                     R('SetRandomSeed'                    (,⊂ u                                          )) ⍝ seed                                                              ⍝ Set the seed for the random number generator
⎕NA i                   R('GetRandomValue'                   (i i                                           )) ⍝ min max                                                           ⍝ Get a random value between min and max (both included)
⎕NA ('*',i)             R('LoadRandomSequence'               (u i i                                         )) ⍝ count min max                                                     ⍝ Load random values sequence, no values repeated
⎕NA                     R('UnloadRandomSequence'             (,⊂ ('=',i)                                    )) ⍝ sequence                                                          ⍝ Unload random values sequence
⎕NA                     R('TakeScreenshot'                   (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Takes a screenshot of current screen (filename extension defines format)
⎕NA                     R('SetConfigFlags'                   (,⊂ u                                          )) ⍝ flags                                                             ⍝ Setup init configuration flags (view FLAGS)
⎕NA                     R('OpenURL'                          (,⊂ str                                        )) ⍝ url                                                               ⍝ Open URL with default system browser (if available)
⎕NA                     R('TraceLog'                         (i str ptr                                     )) ⍝ logLevel text args                                                ⍝ Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
⎕NA                     R('SetTraceLogLevel'                 (,⊂ i                                          )) ⍝ logLevel                                                          ⍝ Set the current threshold (minimum) log level
⎕NA ptr                 R('MemAlloc'                         (,⊂ u                                          )) ⍝ size                                                              ⍝ Internal memory allocator
⎕NA ptr                 R('MemRealloc'                       (ptr u                                         )) ⍝ ptr size                                                          ⍝ Internal memory reallocator
⎕NA                     R('MemFree'                          (,⊂ ptr                                        )) ⍝ ptr                                                               ⍝ Internal memory free
⎕NA                     R('SetTraceLogCallback'              (,⊂ ptr                                        )) ⍝ callback                                                          ⍝ Set custom trace log
⎕NA                     R('SetLoadFileDataCallback'          (,⊂ ptr                                        )) ⍝ callback                                                          ⍝ Set custom file binary data loader
⎕NA                     R('SetSaveFileDataCallback'          (,⊂ ptr                                        )) ⍝ callback                                                          ⍝ Set custom file binary data saver
⎕NA                     R('SetLoadFileTextCallback'          (,⊂ ptr                                        )) ⍝ callback                                                          ⍝ Set custom file text data loader
⎕NA                     R('SetSaveFileTextCallback'          (,⊂ ptr                                        )) ⍝ callback                                                          ⍝ Set custom file text data saver
⎕NA (ptr⊣ustr)          R('LoadFileData'                     (str ('=',i)                                   )) ⍝ fileName dataSize                                                 ⍝ Load file data as byte array (read)
⎕NA                     R('UnloadFileData'                   (,⊂ ustr                                       )) ⍝ data                                                              ⍝ Unload file data allocated by LoadFileData()
⎕NA bool                R('SaveFileData'                     (str ptr i                                     )) ⍝ fileName data dataSize                                            ⍝ Save data to file from byte array (write), returns true on success
⎕NA bool                R('ExportDataAsCode'                 (ustr i str                                    )) ⍝ data dataSize fileName                                            ⍝ Export data to code (.h), returns true on success
⎕NA (ptr⊣str)           R('LoadFileText'                     (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load text data from file (read), returns a '\0' terminated string
⎕NA                     R('UnloadFileText'                   (,⊂ str                                        )) ⍝ text                                                              ⍝ Unload file text data allocated by LoadFileText()
⎕NA bool                R('SaveFileText'                     (str str                                       )) ⍝ fileName text                                                     ⍝ Save text data to file (write), string must be '\0' terminated, returns true on success
⎕NA bool                R('FileExists'                       (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Check if file exists
⎕NA bool                R('DirectoryExists'                  (,⊂ str                                        )) ⍝ dirPath                                                           ⍝ Check if a directory path exists
⎕NA bool                R('IsFileExtension'                  (str str                                       )) ⍝ fileName ext                                                      ⍝ Check file extension (including point: .png, .wav)
⎕NA i                   R('GetFileLength'                    (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
⎕NA (ptr⊣str)           R('GetFileExtension'                 (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Get pointer to extension for a filename string (includes dot: '.png')
⎕NA (ptr⊣str)           R('GetFileName'                      (,⊂ str                                        )) ⍝ filePath                                                          ⍝ Get pointer to filename for a path string
⎕NA (ptr⊣str)           R('GetFileNameWithoutExt'            (,⊂ str                                        )) ⍝ filePath                                                          ⍝ Get filename string without extension (uses static string)
⎕NA (ptr⊣str)           R('GetDirectoryPath'                 (,⊂ str                                        )) ⍝ filePath                                                          ⍝ Get full path for a given fileName with path (uses static string)
⎕NA (ptr⊣str)           R('GetPrevDirectoryPath'             (,⊂ str                                        )) ⍝ dirPath                                                           ⍝ Get previous directory path for a given path (uses static string)
⎕NA (ptr⊣str)           R('GetWorkingDirectory'              (⍬                                             )) ⍝                                                                   ⍝ Get current working directory (uses static string)
⎕NA (ptr⊣str)           R('GetApplicationDirectory'          (⍬                                             )) ⍝                                                                   ⍝ Get the directory of the running application (uses static string)
⎕NA bool                R('ChangeDirectory'                  (,⊂ str                                        )) ⍝ dir                                                               ⍝ Change working directory, return true on success
⎕NA bool                R('IsPathFile'                       (,⊂ str                                        )) ⍝ path                                                              ⍝ Check if a given path is a file or a directory
⎕NA filePathList        R('LoadDirectoryFiles'               (,⊂ str                                        )) ⍝ dirPath                                                           ⍝ Load directory filepaths
⎕NA filePathList        R('LoadDirectoryFilesEx'             (str str bool                                  )) ⍝ basePath filter scanSubdirs                                       ⍝ Load directory filepaths with extension filtering and recursive directory scan
⎕NA                     R('UnloadDirectoryFiles'             (,⊂ filePathList                               )) ⍝ files                                                             ⍝ Unload filepaths
⎕NA bool                R('IsFileDropped'                    (⍬                                             )) ⍝                                                                   ⍝ Check if a file has been dropped into window
⎕NA filePathList        R('LoadDroppedFiles'                 (⍬                                             )) ⍝                                                                   ⍝ Load dropped filepaths
⎕NA                     R('UnloadDroppedFiles'               (,⊂ filePathList                               )) ⍝ files                                                             ⍝ Unload dropped filepaths
⎕NA 'I8'                R('GetFileModTime'                   (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Get file modification time (last write time)
⎕NA (ptr⊣ustr)          R('CompressData'                     (ustr i ('=',i)                                )) ⍝ data dataSize compDataSize                                        ⍝ Compress data (DEFLATE algorithm), memory must be MemFree()
⎕NA (ptr⊣ustr)          R('DecompressData'                   (ustr i ('=',i)                                )) ⍝ compData compDataSize dataSize                                    ⍝ Decompress data (DEFLATE algorithm), memory must be MemFree()
⎕NA (ptr⊣str)           R('EncodeDataBase64'                 (ustr i ('=',i)                                )) ⍝ data dataSize outputSize                                          ⍝ Encode data to Base64 string, memory must be MemFree()
⎕NA (ptr⊣ustr)          R('DecodeDataBase64'                 (ustr ('=',i)                                  )) ⍝ data outputSize                                                   ⍝ Decode Base64 string data, memory must be MemFree()
⎕NA automationEventList R('LoadAutomationEventList'          (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
⎕NA                     R('UnloadAutomationEventList'        (,⊂ ('=',automationEventList)                  )) ⍝ list                                                              ⍝ Unload automation events list from file
⎕NA bool                R('ExportAutomationEventList'        (automationEventList str                       )) ⍝ list fileName                                                     ⍝ Export automation events list as text file
⎕NA                     R('SetAutomationEventList'           (,⊂ ('=',automationEventList)                  )) ⍝ list                                                              ⍝ Set automation event list to record to
⎕NA                     R('SetAutomationEventBaseFrame'      (,⊂ i                                          )) ⍝ frame                                                             ⍝ Set automation event internal base frame to start recording
⎕NA                     R('StartAutomationEventRecording'    (⍬                                             )) ⍝                                                                   ⍝ Start recording automation events (AutomationEventList must be set)
⎕NA                     R('StopAutomationEventRecording'     (⍬                                             )) ⍝                                                                   ⍝ Stop recording automation events
⎕NA                     R('PlayAutomationEvent'              (,⊂ automationEvent                            )) ⍝ event                                                             ⍝ Play a recorded automation event
⎕NA bool                R('IsKeyPressed'                     (,⊂ i                                          )) ⍝ key                                                               ⍝ Check if a key has been pressed once
⎕NA bool                R('IsKeyPressedRepeat'               (,⊂ i                                          )) ⍝ key                                                               ⍝ Check if a key has been pressed again (Only PLATFORM_DESKTOP)
⎕NA bool                R('IsKeyDown'                        (,⊂ i                                          )) ⍝ key                                                               ⍝ Check if a key is being pressed
⎕NA bool                R('IsKeyReleased'                    (,⊂ i                                          )) ⍝ key                                                               ⍝ Check if a key has been released once
⎕NA bool                R('IsKeyUp'                          (,⊂ i                                          )) ⍝ key                                                               ⍝ Check if a key is NOT being pressed
⎕NA i                   R('GetKeyPressed'                    (⍬                                             )) ⍝                                                                   ⍝ Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
⎕NA i                   R('GetCharPressed'                   (⍬                                             )) ⍝                                                                   ⍝ Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
⎕NA                     R('SetExitKey'                       (,⊂ i                                          )) ⍝ key                                                               ⍝ Set a custom key to exit program (default is ESC)
⎕NA bool                R('IsGamepadAvailable'               (,⊂ i                                          )) ⍝ gamepad                                                           ⍝ Check if a gamepad is available
⎕NA (ptr⊣str)           R('GetGamepadName'                   (,⊂ i                                          )) ⍝ gamepad                                                           ⍝ Get gamepad internal name id
⎕NA bool                R('IsGamepadButtonPressed'           (i i                                           )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button has been pressed once
⎕NA bool                R('IsGamepadButtonDown'              (i i                                           )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button is being pressed
⎕NA bool                R('IsGamepadButtonReleased'          (i i                                           )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button has been released once
⎕NA bool                R('IsGamepadButtonUp'                (i i                                           )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button is NOT being pressed
⎕NA i                   R('GetGamepadButtonPressed'          (⍬                                             )) ⍝                                                                   ⍝ Get the last gamepad button pressed
⎕NA i                   R('GetGamepadAxisCount'              (,⊂ i                                          )) ⍝ gamepad                                                           ⍝ Get gamepad axis count for a gamepad
⎕NA f                   R('GetGamepadAxisMovement'           (i i                                           )) ⍝ gamepad axis                                                      ⍝ Get axis movement value for a gamepad axis
⎕NA i                   R('SetGamepadMappings'               (,⊂ str                                        )) ⍝ mappings                                                          ⍝ Set internal gamepad mappings (SDL_GameControllerDB)
⎕NA bool                R('IsMouseButtonPressed'             (,⊂ i                                          )) ⍝ button                                                            ⍝ Check if a mouse button has been pressed once
⎕NA bool                R('IsMouseButtonDown'                (,⊂ i                                          )) ⍝ button                                                            ⍝ Check if a mouse button is being pressed
⎕NA bool                R('IsMouseButtonReleased'            (,⊂ i                                          )) ⍝ button                                                            ⍝ Check if a mouse button has been released once
⎕NA bool                R('IsMouseButtonUp'                  (,⊂ i                                          )) ⍝ button                                                            ⍝ Check if a mouse button is NOT being pressed
⎕NA i                   R('GetMouseX'                        (⍬                                             )) ⍝                                                                   ⍝ Get mouse position X
⎕NA i                   R('GetMouseY'                        (⍬                                             )) ⍝                                                                   ⍝ Get mouse position Y
⎕NA v2                  R('GetMousePosition'                 (⍬                                             )) ⍝                                                                   ⍝ Get mouse position XY
⎕NA v2                  R('GetMouseDelta'                    (⍬                                             )) ⍝                                                                   ⍝ Get mouse delta between frames
⎕NA                     R('SetMousePosition'                 (i i                                           )) ⍝ x y                                                               ⍝ Set mouse position XY
⎕NA                     R('SetMouseOffset'                   (i i                                           )) ⍝ offsetX offsetY                                                   ⍝ Set mouse offset
⎕NA                     R('SetMouseScale'                    (f f                                           )) ⍝ scaleX scaleY                                                     ⍝ Set mouse scaling
⎕NA f                   R('GetMouseWheelMove'                (⍬                                             )) ⍝                                                                   ⍝ Get mouse wheel movement for X or Y, whichever is larger
⎕NA v2                  R('GetMouseWheelMoveV'               (⍬                                             )) ⍝                                                                   ⍝ Get mouse wheel movement for both X and Y
⎕NA                     R('SetMouseCursor'                   (,⊂ i                                          )) ⍝ cursor                                                            ⍝ Set mouse cursor
⎕NA i                   R('GetTouchX'                        (⍬                                             )) ⍝                                                                   ⍝ Get touch position X for touch point 0 (relative to screen size)
⎕NA i                   R('GetTouchY'                        (⍬                                             )) ⍝                                                                   ⍝ Get touch position Y for touch point 0 (relative to screen size)
⎕NA v2                  R('GetTouchPosition'                 (,⊂ i                                          )) ⍝ index                                                             ⍝ Get touch position XY for a touch point index (relative to screen size)
⎕NA i                   R('GetTouchPointId'                  (,⊂ i                                          )) ⍝ index                                                             ⍝ Get touch point identifier for given index
⎕NA i                   R('GetTouchPointCount'               (⍬                                             )) ⍝                                                                   ⍝ Get number of touch points
⎕NA                     R('SetGesturesEnabled'               (,⊂ u                                          )) ⍝ flags                                                             ⍝ Enable a set of gestures using flags
⎕NA bool                R('IsGestureDetected'                (,⊂ u                                          )) ⍝ gesture                                                           ⍝ Check if a gesture have been detected
⎕NA i                   R('GetGestureDetected'               (⍬                                             )) ⍝                                                                   ⍝ Get latest detected gesture
⎕NA f                   R('GetGestureHoldDuration'           (⍬                                             )) ⍝                                                                   ⍝ Get gesture hold time in milliseconds
⎕NA v2                  R('GetGestureDragVector'             (⍬                                             )) ⍝                                                                   ⍝ Get gesture drag vector
⎕NA f                   R('GetGestureDragAngle'              (⍬                                             )) ⍝                                                                   ⍝ Get gesture drag angle
⎕NA v2                  R('GetGesturePinchVector'            (⍬                                             )) ⍝                                                                   ⍝ Get gesture pinch delta
⎕NA f                   R('GetGesturePinchAngle'             (⍬                                             )) ⍝                                                                   ⍝ Get gesture pinch angle
⎕NA                     R('UpdateCamera'                     (('=',camera) i                                )) ⍝ camera mode                                                       ⍝ Update camera position for selected mode
⎕NA                     R('UpdateCameraPro'                  (('=',camera) v3 v3 f                          )) ⍝ camera movement rotation zoom                                     ⍝ Update camera movement/rotation
⎕NA                     R('SetShapesTexture'                 (texture2D rectangle                           )) ⍝ texture source                                                    ⍝ Set texture and rectangle to be used on shapes drawing
⎕NA                     R('DrawPixel'                        (i i color                                     )) ⍝ posX posY color                                                   ⍝ Draw a pixel
⎕NA                     R('DrawPixelV'                       (v2 color                                      )) ⍝ position color                                                    ⍝ Draw a pixel (Vector version)
⎕NA                     R('DrawLine'                         (i i i i color                                 )) ⍝ startPosX startPosY endPosX endPosY color                         ⍝ Draw a line
⎕NA                     R('DrawLineV'                        (v2 v2 color                                   )) ⍝ startPos endPos color                                             ⍝ Draw a line (using gl lines)
⎕NA                     R('DrawLineEx'                       (v2 v2 f color                                 )) ⍝ startPos endPos thick color                                       ⍝ Draw a line (using triangles/quads)
⎕NA                     R('DrawLineStrip'                    (('=',v2) i color                              )) ⍝ points pointCount color                                           ⍝ Draw lines sequence (using gl lines)
⎕NA                     R('DrawLineBezier'                   (v2 v2 f color                                 )) ⍝ startPos endPos thick color                                       ⍝ Draw line segment cubic-bezier in-out interpolation
⎕NA                     R('DrawCircle'                       (i i f color                                   )) ⍝ centerX centerY radius color                                      ⍝ Draw a color-filled circle
⎕NA                     R('DrawCircleSector'                 (v2 f f f i color                              )) ⍝ center radius startAngle endAngle segments color                  ⍝ Draw a piece of a circle
⎕NA                     R('DrawCircleSectorLines'            (v2 f f f i color                              )) ⍝ center radius startAngle endAngle segments color                  ⍝ Draw circle sector outline
⎕NA                     R('DrawCircleGradient'               (i i f color color                             )) ⍝ centerX centerY radius color1 color2                              ⍝ Draw a gradient-filled circle
⎕NA                     R('DrawCircleV'                      (v2 f color                                    )) ⍝ center radius color                                               ⍝ Draw a color-filled circle (Vector version)
⎕NA                     R('DrawCircleLines'                  (i i f color                                   )) ⍝ centerX centerY radius color                                      ⍝ Draw circle outline
⎕NA                     R('DrawCircleLinesV'                 (v2 f color                                    )) ⍝ center radius color                                               ⍝ Draw circle outline (Vector version)
⎕NA                     R('DrawEllipse'                      (i i f f color                                 )) ⍝ centerX centerY radiusH radiusV color                             ⍝ Draw ellipse
⎕NA                     R('DrawEllipseLines'                 (i i f f color                                 )) ⍝ centerX centerY radiusH radiusV color                             ⍝ Draw ellipse outline
⎕NA                     R('DrawRing'                         (v2 f f f f i color                            )) ⍝ center innerRadius outerRadius startAngle endAngle segments color ⍝ Draw ring
⎕NA                     R('DrawRingLines'                    (v2 f f f f i color                            )) ⍝ center innerRadius outerRadius startAngle endAngle segments color ⍝ Draw ring outline
⎕NA                     R('DrawRectangle'                    (i i i i color                                 )) ⍝ posX posY width height color                                      ⍝ Draw a color-filled rectangle
⎕NA                     R('DrawRectangleV'                   (v2 v2 color                                   )) ⍝ position size color                                               ⍝ Draw a color-filled rectangle (Vector version)
⎕NA                     R('DrawRectangleRec'                 (rectangle color                               )) ⍝ rec color                                                         ⍝ Draw a color-filled rectangle
⎕NA                     R('DrawRectanglePro'                 (rectangle v2 f color                          )) ⍝ rec origin rotation color                                         ⍝ Draw a color-filled rectangle with pro parameters
⎕NA                     R('DrawRectangleGradientV'           (i i i i color color                           )) ⍝ posX posY width height color1 color2                              ⍝ Draw a vertical-gradient-filled rectangle
⎕NA                     R('DrawRectangleGradientH'           (i i i i color color                           )) ⍝ posX posY width height color1 color2                              ⍝ Draw a horizontal-gradient-filled rectangle
⎕NA                     R('DrawRectangleGradientEx'          (rectangle color color color color             )) ⍝ rec col1 col2 col3 col4                                           ⍝ Draw a gradient-filled rectangle with custom vertex colors
⎕NA                     R('DrawRectangleLines'               (i i i i color                                 )) ⍝ posX posY width height color                                      ⍝ Draw rectangle outline
⎕NA                     R('DrawRectangleLinesEx'             (rectangle f color                             )) ⍝ rec lineThick color                                               ⍝ Draw rectangle outline with extended parameters
⎕NA                     R('DrawRectangleRounded'             (rectangle f i color                           )) ⍝ rec roundness segments color                                      ⍝ Draw rectangle with rounded edges
⎕NA                     R('DrawRectangleRoundedLines'        (rectangle f i f color                         )) ⍝ rec roundness segments lineThick color                            ⍝ Draw rectangle with rounded edges outline
⎕NA                     R('DrawTriangle'                     (v2 v2 v2 color                                )) ⍝ v1 v2 v3 color                                                    ⍝ Draw a color-filled triangle (vertex in counter-clockwise order!)
⎕NA                     R('DrawTriangleLines'                (v2 v2 v2 color                                )) ⍝ v1 v2 v3 color                                                    ⍝ Draw triangle outline (vertex in counter-clockwise order!)
⎕NA                     R('DrawTriangleFan'                  (('=',v2) i color                              )) ⍝ points pointCount color                                           ⍝ Draw a triangle fan defined by points (first vertex is the center)
⎕NA                     R('DrawTriangleStrip'                (('=',v2) i color                              )) ⍝ points pointCount color                                           ⍝ Draw a triangle strip defined by points
⎕NA                     R('DrawPoly'                         (v2 i f f color                                )) ⍝ center sides radius rotation color                                ⍝ Draw a regular polygon (Vector version)
⎕NA                     R('DrawPolyLines'                    (v2 i f f color                                )) ⍝ center sides radius rotation color                                ⍝ Draw a polygon outline of n sides
⎕NA                     R('DrawPolyLinesEx'                  (v2 i f f f color                              )) ⍝ center sides radius rotation lineThick color                      ⍝ Draw a polygon outline of n sides with extended parameters
⎕NA                     R('DrawSplineLinear'                 (('=',v2) i f color                            )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Linear, minimum 2 points
⎕NA                     R('DrawSplineBasis'                  (('=',v2) i f color                            )) ⍝ points pointCount thick color                                     ⍝ Draw spline: B-Spline, minimum 4 points
⎕NA                     R('DrawSplineCatmullRom'             (('=',v2) i f color                            )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Catmull-Rom, minimum 4 points
⎕NA                     R('DrawSplineBezierQuadratic'        (('=',v2) i f color                            )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
⎕NA                     R('DrawSplineBezierCubic'            (('=',v2) i f color                            )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
⎕NA                     R('DrawSplineSegmentLinear'          (v2 v2 f color                                 )) ⍝ p1 p2 thick color                                                 ⍝ Draw spline segment: Linear, 2 points
⎕NA                     R('DrawSplineSegmentBasis'           (v2 v2 v2 v2 f color                           )) ⍝ p1 p2 p3 p4 thick color                                           ⍝ Draw spline segment: B-Spline, 4 points
⎕NA                     R('DrawSplineSegmentCatmullRom'      (v2 v2 v2 v2 f color                           )) ⍝ p1 p2 p3 p4 thick color                                           ⍝ Draw spline segment: Catmull-Rom, 4 points
⎕NA                     R('DrawSplineSegmentBezierQuadratic' (v2 v2 v2 f color                              )) ⍝ p1 c2 p3 thick color                                              ⍝ Draw spline segment: Quadratic Bezier, 2 points, 1 control point
⎕NA                     R('DrawSplineSegmentBezierCubic'     (v2 v2 v2 v2 f color                           )) ⍝ p1 c2 c3 p4 thick color                                           ⍝ Draw spline segment: Cubic Bezier, 2 points, 2 control points
⎕NA v2                  R('GetSplinePointLinear'             (v2 v2 f                                       )) ⍝ startPos endPos t                                                 ⍝ Get (evaluate) spline point: Linear
⎕NA v2                  R('GetSplinePointBasis'              (v2 v2 v2 v2 f                                 )) ⍝ p1 p2 p3 p4 t                                                     ⍝ Get (evaluate) spline point: B-Spline
⎕NA v2                  R('GetSplinePointCatmullRom'         (v2 v2 v2 v2 f                                 )) ⍝ p1 p2 p3 p4 t                                                     ⍝ Get (evaluate) spline point: Catmull-Rom
⎕NA v2                  R('GetSplinePointBezierQuad'         (v2 v2 v2 f                                    )) ⍝ p1 c2 p3 t                                                        ⍝ Get (evaluate) spline point: Quadratic Bezier
⎕NA v2                  R('GetSplinePointBezierCubic'        (v2 v2 v2 v2 f                                 )) ⍝ p1 c2 c3 p4 t                                                     ⍝ Get (evaluate) spline point: Cubic Bezier
⎕NA bool                R('CheckCollisionRecs'               (rectangle rectangle                           )) ⍝ rec1 rec2                                                         ⍝ Check collision between two rectangles
⎕NA bool                R('CheckCollisionCircles'            (v2 f v2 f                                     )) ⍝ center1 radius1 center2 radius2                                   ⍝ Check collision between two circles
⎕NA bool                R('CheckCollisionCircleRec'          (v2 f rectangle                                )) ⍝ center radius rec                                                 ⍝ Check collision between circle and rectangle
⎕NA bool                R('CheckCollisionPointRec'           (v2 rectangle                                  )) ⍝ point rec                                                         ⍝ Check if point is inside rectangle
⎕NA bool                R('CheckCollisionPointCircle'        (v2 v2 f                                       )) ⍝ point center radius                                               ⍝ Check if point is inside circle
⎕NA bool                R('CheckCollisionPointTriangle'      (v2 v2 v2 v2                                   )) ⍝ point p1 p2 p3                                                    ⍝ Check if point is inside a triangle
⎕NA bool                R('CheckCollisionPointPoly'          (v2 ('=',v2) i                                 )) ⍝ point points pointCount                                           ⍝ Check if point is within a polygon described by array of vertices
⎕NA bool                R('CheckCollisionLines'              (v2 v2 v2 v2 ('=',v2)                          )) ⍝ startPos1 endPos1 startPos2 endPos2 collisionPoint                ⍝ Check the collision between two lines defined by two points each, returns collision point by reference
⎕NA bool                R('CheckCollisionPointLine'          (v2 v2 v2 i                                    )) ⍝ point p1 p2 threshold                                             ⍝ Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
⎕NA rectangle           R('GetCollisionRec'                  (rectangle rectangle                           )) ⍝ rec1 rec2                                                         ⍝ Get collision rectangle for two rectangles collision
⎕NA image               R('LoadImage'                        (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load image from file into CPU memory (RAM)
⎕NA image               R('LoadImageRaw'                     (str i i i i                                   )) ⍝ fileName width height format headerSize                           ⍝ Load image from RAW file data
⎕NA image               R('LoadImageSvg'                     (str i i                                       )) ⍝ fileNameOrString width height                                     ⍝ Load image from SVG file data or string with specified size
⎕NA image               R('LoadImageAnim'                    (str ('=',i)                                   )) ⍝ fileName frames                                                   ⍝ Load image sequence from file (frames appended to image.data)
⎕NA image               R('LoadImageFromMemory'              (str ustr i                                    )) ⍝ fileType fileData dataSize                                        ⍝ Load image from memory buffer, fileType refers to extension: i.e. '.png'
⎕NA image               R('LoadImageFromTexture'             (,⊂ texture2D                                  )) ⍝ texture                                                           ⍝ Load image from GPU texture data
⎕NA image               R('LoadImageFromScreen'              (⍬                                             )) ⍝                                                                   ⍝ Load image from screen buffer and (screenshot)
⎕NA bool                R('IsImageReady'                     (,⊂ image                                      )) ⍝ image                                                             ⍝ Check if an image is ready
⎕NA                     R('UnloadImage'                      (,⊂ image                                      )) ⍝ image                                                             ⍝ Unload image from CPU memory (RAM)
⎕NA bool                R('ExportImage'                      (image str                                     )) ⍝ image fileName                                                    ⍝ Export image data to file, returns true on success
⎕NA (ptr⊣ustr)          R('ExportImageToMemory'              (image str ('=',i)                             )) ⍝ image fileType fileSize                                           ⍝ Export image to memory buffer
⎕NA bool                R('ExportImageAsCode'                (image str                                     )) ⍝ image fileName                                                    ⍝ Export image as code file defining an array of bytes, returns true on success
⎕NA image               R('GenImageColor'                    (i i color                                     )) ⍝ width height color                                                ⍝ Generate image: plain color
⎕NA image               R('GenImageGradientLinear'           (i i i color color                             )) ⍝ width height direction start end                                  ⍝ Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
⎕NA image               R('GenImageGradientRadial'           (i i f color color                             )) ⍝ width height density inner outer                                  ⍝ Generate image: radial gradient
⎕NA image               R('GenImageGradientSquare'           (i i f color color                             )) ⍝ width height density inner outer                                  ⍝ Generate image: square gradient
⎕NA image               R('GenImageChecked'                  (i i i i color color                           )) ⍝ width height checksX checksY col1 col2                            ⍝ Generate image: checked
⎕NA image               R('GenImageWhiteNoise'               (i i f                                         )) ⍝ width height factor                                               ⍝ Generate image: white noise
⎕NA image               R('GenImagePerlinNoise'              (i i i i f                                     )) ⍝ width height offsetX offsetY scale                                ⍝ Generate image: perlin noise
⎕NA image               R('GenImageCellular'                 (i i i                                         )) ⍝ width height tileSize                                             ⍝ Generate image: cellular algorithm, bigger tileSize means bigger cells
⎕NA image               R('GenImageText'                     (i i str                                       )) ⍝ width height text                                                 ⍝ Generate image: grayscale image from text data
⎕NA image               R('ImageCopy'                        (,⊂ image                                      )) ⍝ image                                                             ⍝ Create an image duplicate (useful for transformations)
⎕NA image               R('ImageFromImage'                   (image rectangle                               )) ⍝ image rec                                                         ⍝ Create an image from another image piece
⎕NA image               R('ImageText'                        (str i color                                   )) ⍝ text fontSize color                                               ⍝ Create an image from text (default font)
⎕NA image               R('ImageTextEx'                      (font str f f color                            )) ⍝ font text fontSize spacing tint                                   ⍝ Create an image from text (custom sprite font)
⎕NA                     R('ImageFormat'                      (('=',image) i                                 )) ⍝ image newFormat                                                   ⍝ Convert image data to desired format
⎕NA                     R('ImageToPOT'                       (('=',image) color                             )) ⍝ image fill                                                        ⍝ Convert image to POT (power-of-two)
⎕NA                     R('ImageCrop'                        (('=',image) rectangle                         )) ⍝ image crop                                                        ⍝ Crop an image to a defined rectangle
⎕NA                     R('ImageAlphaCrop'                   (('=',image) f                                 )) ⍝ image threshold                                                   ⍝ Crop image depending on alpha value
⎕NA                     R('ImageAlphaClear'                  (('=',image) color f                           )) ⍝ image color threshold                                             ⍝ Clear alpha channel to desired color
⎕NA                     R('ImageAlphaMask'                   (('=',image) image                             )) ⍝ image alphaMask                                                   ⍝ Apply alpha mask to image
⎕NA                     R('ImageAlphaPremultiply'            (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Premultiply alpha channel
⎕NA                     R('ImageBlurGaussian'                (('=',image) i                                 )) ⍝ image blurSize                                                    ⍝ Apply Gaussian blur using a box blur approximation
⎕NA                     R('ImageResize'                      (('=',image) i i                               )) ⍝ image newWidth newHeight                                          ⍝ Resize image (Bicubic scaling algorithm)
⎕NA                     R('ImageResizeNN'                    (('=',image) i i                               )) ⍝ image newWidth newHeight                                          ⍝ Resize image (Nearest-Neighbor scaling algorithm)
⎕NA                     R('ImageResizeCanvas'                (('=',image) i i i i color                     )) ⍝ image newWidth newHeight offsetX offsetY fill                     ⍝ Resize canvas and fill with color
⎕NA                     R('ImageMipmaps'                     (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Compute all mipmap levels for a provided image
⎕NA                     R('ImageDither'                      (('=',image) i i i i                           )) ⍝ image rBpp gBpp bBpp aBpp                                         ⍝ Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
⎕NA                     R('ImageFlipVertical'                (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Flip image vertically
⎕NA                     R('ImageFlipHorizontal'              (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Flip image horizontally
⎕NA                     R('ImageRotate'                      (('=',image) i                                 )) ⍝ image degrees                                                     ⍝ Rotate image by input angle in degrees (-359 to 359)
⎕NA                     R('ImageRotateCW'                    (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Rotate image clockwise 90deg
⎕NA                     R('ImageRotateCCW'                   (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Rotate image counter-clockwise 90deg
⎕NA                     R('ImageColorTint'                   (('=',image) color                             )) ⍝ image color                                                       ⍝ Modify image color: tint
⎕NA                     R('ImageColorInvert'                 (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Modify image color: invert
⎕NA                     R('ImageColorGrayscale'              (,⊂ ('=',image)                                )) ⍝ image                                                             ⍝ Modify image color: grayscale
⎕NA                     R('ImageColorContrast'               (('=',image) f                                 )) ⍝ image contrast                                                    ⍝ Modify image color: contrast (-100 to 100)
⎕NA                     R('ImageColorBrightness'             (('=',image) i                                 )) ⍝ image brightness                                                  ⍝ Modify image color: brightness (-255 to 255)
⎕NA                     R('ImageColorReplace'                (('=',image) color color                       )) ⍝ image color replace                                               ⍝ Modify image color: replace color
⎕NA ('*',color)         R('LoadImageColors'                  (,⊂ image                                      )) ⍝ image                                                             ⍝ Load color data from image as a Color array (RGBA - 32bit)
⎕NA ('*',color)         R('LoadImagePalette'                 (image i ('=',i)                               )) ⍝ image maxPaletteSize colorCount                                   ⍝ Load colors palette from image as a Color array (RGBA - 32bit)
⎕NA                     R('UnloadImageColors'                (,⊂ ('=',color)                                )) ⍝ colors                                                            ⍝ Unload color data loaded with LoadImageColors()
⎕NA                     R('UnloadImagePalette'               (,⊂ ('=',color)                                )) ⍝ colors                                                            ⍝ Unload colors palette loaded with LoadImagePalette()
⎕NA rectangle           R('GetImageAlphaBorder'              (image f                                       )) ⍝ image threshold                                                   ⍝ Get image alpha border rectangle
⎕NA color               R('GetImageColor'                    (image i i                                     )) ⍝ image x y                                                         ⍝ Get image pixel color at (x, y) position
⎕NA                     R('ImageClearBackground'             (('=',image) color                             )) ⍝ dst color                                                         ⍝ Clear image background with given color
⎕NA                     R('ImageDrawPixel'                   (('=',image) i i color                         )) ⍝ dst posX posY color                                               ⍝ Draw pixel within an image
⎕NA                     R('ImageDrawPixelV'                  (('=',image) v2 color                          )) ⍝ dst position color                                                ⍝ Draw pixel within an image (Vector version)
⎕NA                     R('ImageDrawLine'                    (('=',image) i i i i color                     )) ⍝ dst startPosX startPosY endPosX endPosY color                     ⍝ Draw line within an image
⎕NA                     R('ImageDrawLineV'                   (('=',image) v2 v2 color                       )) ⍝ dst start end color                                               ⍝ Draw line within an image (Vector version)
⎕NA                     R('ImageDrawCircle'                  (('=',image) i i i color                       )) ⍝ dst centerX centerY radius color                                  ⍝ Draw a filled circle within an image
⎕NA                     R('ImageDrawCircleV'                 (('=',image) v2 i color                        )) ⍝ dst center radius color                                           ⍝ Draw a filled circle within an image (Vector version)
⎕NA                     R('ImageDrawCircleLines'             (('=',image) i i i color                       )) ⍝ dst centerX centerY radius color                                  ⍝ Draw circle outline within an image
⎕NA                     R('ImageDrawCircleLinesV'            (('=',image) v2 i color                        )) ⍝ dst center radius color                                           ⍝ Draw circle outline within an image (Vector version)
⎕NA                     R('ImageDrawRectangle'               (('=',image) i i i i color                     )) ⍝ dst posX posY width height color                                  ⍝ Draw rectangle within an image
⎕NA                     R('ImageDrawRectangleV'              (('=',image) v2 v2 color                       )) ⍝ dst position size color                                           ⍝ Draw rectangle within an image (Vector version)
⎕NA                     R('ImageDrawRectangleRec'            (('=',image) rectangle color                   )) ⍝ dst rec color                                                     ⍝ Draw rectangle within an image
⎕NA                     R('ImageDrawRectangleLines'          (('=',image) rectangle i color                 )) ⍝ dst rec thick color                                               ⍝ Draw rectangle lines within an image
⎕NA                     R('ImageDraw'                        (('=',image) image rectangle rectangle color   )) ⍝ dst src srcRec dstRec tint                                        ⍝ Draw a source image within a destination image (tint applied to source)
⎕NA                     R('ImageDrawText'                    (('=',image) str i i i color                   )) ⍝ dst text posX posY fontSize color                                 ⍝ Draw text (using default font) within an image (destination)
⎕NA                     R('ImageDrawTextEx'                  (('=',image) font str v2 f f color             )) ⍝ dst font text position fontSize spacing tint                      ⍝ Draw text (custom sprite font) within an image (destination)
⎕NA texture2D           R('LoadTexture'                      (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load texture from file into GPU memory (VRAM)
⎕NA texture2D           R('LoadTextureFromImage'             (,⊂ image                                      )) ⍝ image                                                             ⍝ Load texture from image data
⎕NA textureCubemap      R('LoadTextureCubemap'               (image i                                       )) ⍝ image layout                                                      ⍝ Load cubemap from image, multiple image cubemap layouts supported
⎕NA renderTexture2D     R('LoadRenderTexture'                (i i                                           )) ⍝ width height                                                      ⍝ Load texture for rendering (framebuffer)
⎕NA bool                R('IsTextureReady'                   (,⊂ texture2D                                  )) ⍝ texture                                                           ⍝ Check if a texture is ready
⎕NA                     R('UnloadTexture'                    (,⊂ texture2D                                  )) ⍝ texture                                                           ⍝ Unload texture from GPU memory (VRAM)
⎕NA bool                R('IsRenderTextureReady'             (,⊂ renderTexture2D                            )) ⍝ target                                                            ⍝ Check if a render texture is ready
⎕NA                     R('UnloadRenderTexture'              (,⊂ renderTexture2D                            )) ⍝ target                                                            ⍝ Unload render texture from GPU memory (VRAM)
⎕NA                     R('UpdateTexture'                    (texture2D ptr                                 )) ⍝ texture pixels                                                    ⍝ Update GPU texture with new data
⎕NA                     R('UpdateTextureRec'                 (texture2D rectangle ptr                       )) ⍝ texture rec pixels                                                ⍝ Update GPU texture rectangle with new data
⎕NA                     R('GenTextureMipmaps'                (,⊂ ('=',texture2D)                            )) ⍝ texture                                                           ⍝ Generate GPU mipmaps for a texture
⎕NA                     R('SetTextureFilter'                 (texture2D i                                   )) ⍝ texture filter                                                    ⍝ Set texture scaling filter mode
⎕NA                     R('SetTextureWrap'                   (texture2D i                                   )) ⍝ texture wrap                                                      ⍝ Set texture wrapping mode
⎕NA                     R('DrawTexture'                      (texture2D i i color                           )) ⍝ texture posX posY tint                                            ⍝ Draw a Texture2D
⎕NA                     R('DrawTextureV'                     (texture2D v2 color                            )) ⍝ texture position tint                                             ⍝ Draw a Texture2D with position defined as Vector2
⎕NA                     R('DrawTextureEx'                    (texture2D v2 f f color                        )) ⍝ texture position rotation scale tint                              ⍝ Draw a Texture2D with extended parameters
⎕NA                     R('DrawTextureRec'                   (texture2D rectangle v2 color                  )) ⍝ texture source position tint                                      ⍝ Draw a part of a texture defined by a rectangle
⎕NA                     R('DrawTexturePro'                   (texture2D rectangle rectangle v2 f color      )) ⍝ texture source dest origin rotation tint                          ⍝ Draw a part of a texture defined by a rectangle with 'pro' parameters
⎕NA                     R('DrawTextureNPatch'                (texture2D nPatchInfo rectangle v2 f color     )) ⍝ texture nPatchInfo dest origin rotation tint                      ⍝ Draws a texture (or part of it) that stretches or shrinks nicely
⎕NA color               R('Fade'                             (color f                                       )) ⍝ color alpha                                                       ⍝ Get color with alpha applied, alpha goes from 0.0f to 1.0f
⎕NA i                   R('ColorToInt'                       (,⊂ color                                      )) ⍝ color                                                             ⍝ Get hexadecimal value for a Color
⎕NA v4                  R('ColorNormalize'                   (,⊂ color                                      )) ⍝ color                                                             ⍝ Get Color normalized as float [0..1]
⎕NA color               R('ColorFromNormalized'              (,⊂ v4                                         )) ⍝ normalized                                                        ⍝ Get Color from normalized values [0..1]
⎕NA v3                  R('ColorToHSV'                       (,⊂ color                                      )) ⍝ color                                                             ⍝ Get HSV values for a Color, hue [0..360], saturation/value [0..1]
⎕NA color               R('ColorFromHSV'                     (f f f                                         )) ⍝ hue saturation value                                              ⍝ Get a Color from HSV values, hue [0..360], saturation/value [0..1]
⎕NA color               R('ColorTint'                        (color color                                   )) ⍝ color tint                                                        ⍝ Get color multiplied with another color
⎕NA color               R('ColorBrightness'                  (color f                                       )) ⍝ color factor                                                      ⍝ Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
⎕NA color               R('ColorContrast'                    (color f                                       )) ⍝ color contrast                                                    ⍝ Get color with contrast correction, contrast values between -1.0f and 1.0f
⎕NA color               R('ColorAlpha'                       (color f                                       )) ⍝ color alpha                                                       ⍝ Get color with alpha applied, alpha goes from 0.0f to 1.0f
⎕NA color               R('ColorAlphaBlend'                  (color color color                             )) ⍝ dst src tint                                                      ⍝ Get src alpha-blended into dst color with tint
⎕NA color               R('GetColor'                         (,⊂ u                                          )) ⍝ hexValue                                                          ⍝ Get Color structure from hexadecimal value
⎕NA color               R('GetPixelColor'                    (ptr i                                         )) ⍝ srcPtr format                                                     ⍝ Get Color from a source pixel pointer of certain format
⎕NA                     R('SetPixelColor'                    (ptr color i                                   )) ⍝ dstPtr color format                                               ⍝ Set color formatted into destination pixel pointer
⎕NA i                   R('GetPixelDataSize'                 (i i i                                         )) ⍝ width height format                                               ⍝ Get pixel data size in bytes for certain format
⎕NA font                R('GetFontDefault'                   (⍬                                             )) ⍝                                                                   ⍝ Get the default Font
⎕NA font                R('LoadFont'                         (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load font from file into GPU memory (VRAM)
⎕NA font                R('LoadFontEx'                       (str i ('=',i) i                               )) ⍝ fileName fontSize codepoints codepointCount                       ⍝ Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set
⎕NA font                R('LoadFontFromImage'                (image color i                                 )) ⍝ image key firstChar                                               ⍝ Load font from Image (XNA style)
⎕NA font                R('LoadFontFromMemory'               (str ustr i i ('=',i) i                        )) ⍝ fileType fileData dataSize fontSize codepoints codepointCount     ⍝ Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
⎕NA bool                R('IsFontReady'                      (,⊂ font                                       )) ⍝ font                                                              ⍝ Check if a font is ready
⎕NA ('*',glyphInfo)     R('LoadFontData'                     (ustr i i ('=',i) i i                          )) ⍝ fileData dataSize fontSize codepoints codepointCount type         ⍝ Load font data for further use
⎕NA image               R('GenImageFontAtlas'                (('=',glyphInfo) ('==',rectangle) i i i i      )) ⍝ glyphs glyphRecs glyphCount fontSize padding packMethod           ⍝ Generate image font atlas using chars info
⎕NA                     R('UnloadFontData'                   (('=',glyphInfo) i                             )) ⍝ glyphs glyphCount                                                 ⍝ Unload font chars info data (RAM)
⎕NA                     R('UnloadFont'                       (,⊂ font                                       )) ⍝ font                                                              ⍝ Unload font from GPU memory (VRAM)
⎕NA bool                R('ExportFontAsCode'                 (font str                                      )) ⍝ font fileName                                                     ⍝ Export font as code file, returns true on success
⎕NA                     R('DrawFPS'                          (i i                                           )) ⍝ posX posY                                                         ⍝ Draw current FPS
⎕NA                     R('DrawText'                         (str i i i color                               )) ⍝ text posX posY fontSize color                                     ⍝ Draw text (using default font)
⎕NA                     R('DrawTextEx'                       (font str v2 f f color                         )) ⍝ font text position fontSize spacing tint                          ⍝ Draw text using font and additional parameters
⎕NA                     R('DrawTextPro'                      (font str v2 v2 f f f color                    )) ⍝ font text position origin rotation fontSize spacing tint          ⍝ Draw text using Font and pro parameters (rotation)
⎕NA                     R('DrawTextCodepoint'                (font i v2 f color                             )) ⍝ font codepoint position fontSize tint                             ⍝ Draw one character (codepoint)
⎕NA                     R('DrawTextCodepoints'               (font ('=',i) i v2 f f color                   )) ⍝ font codepoints codepointCount position fontSize spacing tint     ⍝ Draw multiple character (codepoint)
⎕NA                     R('SetTextLineSpacing'               (,⊂ i                                          )) ⍝ spacing                                                           ⍝ Set vertical line spacing when drawing with line-breaks
⎕NA i                   R('MeasureText'                      (str i                                         )) ⍝ text fontSize                                                     ⍝ Measure string width for default font
⎕NA v2                  R('MeasureTextEx'                    (font str f f                                  )) ⍝ font text fontSize spacing                                        ⍝ Measure string size for Font
⎕NA i                   R('GetGlyphIndex'                    (font i                                        )) ⍝ font codepoint                                                    ⍝ Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
⎕NA glyphInfo           R('GetGlyphInfo'                     (font i                                        )) ⍝ font codepoint                                                    ⍝ Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
⎕NA rectangle           R('GetGlyphAtlasRec'                 (font i                                        )) ⍝ font codepoint                                                    ⍝ Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
⎕NA (ptr⊣str)           R('LoadUTF8'                         (('=',i) i                                     )) ⍝ codepoints length                                                 ⍝ Load UTF-8 text encoded from codepoints array
⎕NA                     R('UnloadUTF8'                       (,⊂ str                                        )) ⍝ text                                                              ⍝ Unload UTF-8 text encoded from codepoints array
⎕NA ('*',i)             R('LoadCodepoints'                   (str ('=',i)                                   )) ⍝ text count                                                        ⍝ Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
⎕NA                     R('UnloadCodepoints'                 (,⊂ ('=',i)                                    )) ⍝ codepoints                                                        ⍝ Unload codepoints data from memory
⎕NA i                   R('GetCodepointCount'                (,⊂ str                                        )) ⍝ text                                                              ⍝ Get total number of codepoints in a UTF-8 encoded string
⎕NA i                   R('GetCodepoint'                     (str ('=',i)                                   )) ⍝ text codepointSize                                                ⍝ Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
⎕NA i                   R('GetCodepointNext'                 (str ('=',i)                                   )) ⍝ text codepointSize                                                ⍝ Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
⎕NA i                   R('GetCodepointPrevious'             (str ('=',i)                                   )) ⍝ text codepointSize                                                ⍝ Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
⎕NA (ptr⊣str)           R('CodepointToUTF8'                  (i ('=',i)                                     )) ⍝ codepoint utf8Size                                                ⍝ Encode one codepoint into UTF-8 byte array (array length returned as parameter)
⎕NA i                   R('TextCopy'                         (str str                                       )) ⍝ dst src                                                           ⍝ Copy one string to another, returns bytes copied
⎕NA bool                R('TextIsEqual'                      (str str                                       )) ⍝ text1 text2                                                       ⍝ Check if two text string are equal
⎕NA u                   R('TextLength'                       (,⊂ str                                        )) ⍝ text                                                              ⍝ Get text length, checks for '\0' ending
⎕NA (ptr⊣str)           R('TextFormat'                       (str ptr                                       )) ⍝ text args                                                         ⍝ Text formatting with variables (sprintf() style)
⎕NA (ptr⊣str)           R('TextSubtext'                      (str i i                                       )) ⍝ text position length                                              ⍝ Get a piece of a text string
⎕NA (ptr⊣str)           R('TextReplace'                      (str str str                                   )) ⍝ text replace by                                                   ⍝ Replace text string (WARNING: memory must be freed!)
⎕NA (ptr⊣str)           R('TextInsert'                       (str str i                                     )) ⍝ text insert position                                              ⍝ Insert text in a position (WARNING: memory must be freed!)
⎕NA (ptr⊣str)           R('TextJoin'                         (('=',str) i str                               )) ⍝ textList count delimiter                                          ⍝ Join text strings with delimiter
⎕NA (ptr⊣'*',str)       R('TextSplit'                        (str u8 ('=',i)                                )) ⍝ text delimiter count                                              ⍝ Split text into multiple strings
⎕NA                     R('TextAppend'                       (str str ('=',i)                               )) ⍝ text append position                                              ⍝ Append text at specific position and move cursor!
⎕NA i                   R('TextFindIndex'                    (str str                                       )) ⍝ text find                                                         ⍝ Find first text occurrence within a string
⎕NA (ptr⊣str)           R('TextToUpper'                      (,⊂ str                                        )) ⍝ text                                                              ⍝ Get upper case version of provided string
⎕NA (ptr⊣str)           R('TextToLower'                      (,⊂ str                                        )) ⍝ text                                                              ⍝ Get lower case version of provided string
⎕NA (ptr⊣str)           R('TextToPascal'                     (,⊂ str                                        )) ⍝ text                                                              ⍝ Get Pascal case notation version of provided string
⎕NA i                   R('TextToInteger'                    (,⊂ str                                        )) ⍝ text                                                              ⍝ Get integer value from text (negative values not supported)
⎕NA                     R('DrawLine3D'                       (v3 v3 color                                   )) ⍝ startPos endPos color                                             ⍝ Draw a line in 3D world space
⎕NA                     R('DrawPoint3D'                      (v3 color                                      )) ⍝ position color                                                    ⍝ Draw a point in 3D space, actually a small line
⎕NA                     R('DrawCircle3D'                     (v3 f v3 f color                               )) ⍝ center radius rotationAxis rotationAngle color                    ⍝ Draw a circle in 3D world space
⎕NA                     R('DrawTriangle3D'                   (v3 v3 v3 color                                )) ⍝ v1 v2 v3 color                                                    ⍝ Draw a color-filled triangle (vertex in counter-clockwise order!)
⎕NA                     R('DrawTriangleStrip3D'              (('=',v3) i color                              )) ⍝ points pointCount color                                           ⍝ Draw a triangle strip defined by points
⎕NA                     R('DrawCube'                         (v3 f f f color                                )) ⍝ position width height length color                                ⍝ Draw cube
⎕NA                     R('DrawCubeV'                        (v3 v3 color                                   )) ⍝ position size color                                               ⍝ Draw cube (Vector version)
⎕NA                     R('DrawCubeWires'                    (v3 f f f color                                )) ⍝ position width height length color                                ⍝ Draw cube wires
⎕NA                     R('DrawCubeWiresV'                   (v3 v3 color                                   )) ⍝ position size color                                               ⍝ Draw cube wires (Vector version)
⎕NA                     R('DrawSphere'                       (v3 f color                                    )) ⍝ centerPos radius color                                            ⍝ Draw sphere
⎕NA                     R('DrawSphereEx'                     (v3 f i i color                                )) ⍝ centerPos radius rings slices color                               ⍝ Draw sphere with extended parameters
⎕NA                     R('DrawSphereWires'                  (v3 f i i color                                )) ⍝ centerPos radius rings slices color                               ⍝ Draw sphere wires
⎕NA                     R('DrawCylinder'                     (v3 f f f i color                              )) ⍝ position radiusTop radiusBottom height slices color               ⍝ Draw a cylinder/cone
⎕NA                     R('DrawCylinderEx'                   (v3 v3 f f i color                             )) ⍝ startPos endPos startRadius endRadius sides color                 ⍝ Draw a cylinder with base at startPos and top at endPos
⎕NA                     R('DrawCylinderWires'                (v3 f f f i color                              )) ⍝ position radiusTop radiusBottom height slices color               ⍝ Draw a cylinder/cone wires
⎕NA                     R('DrawCylinderWiresEx'              (v3 v3 f f i color                             )) ⍝ startPos endPos startRadius endRadius sides color                 ⍝ Draw a cylinder wires with base at startPos and top at endPos
⎕NA                     R('DrawCapsule'                      (v3 v3 f i i color                             )) ⍝ startPos endPos radius slices rings color                         ⍝ Draw a capsule with the center of its sphere caps at startPos and endPos
⎕NA                     R('DrawCapsuleWires'                 (v3 v3 f i i color                             )) ⍝ startPos endPos radius slices rings color                         ⍝ Draw capsule wireframe with the center of its sphere caps at startPos and endPos
⎕NA                     R('DrawPlane'                        (v3 v2 color                                   )) ⍝ centerPos size color                                              ⍝ Draw a plane XZ
⎕NA                     R('DrawRay'                          (ray color                                     )) ⍝ ray color                                                         ⍝ Draw a ray line
⎕NA                     R('DrawGrid'                         (i f                                           )) ⍝ slices spacing                                                    ⍝ Draw a grid (centered at (0, 0, 0))
⎕NA model               R('LoadModel'                        (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load model from files (meshes and materials)
⎕NA model               R('LoadModelFromMesh'                (,⊂ mesh                                       )) ⍝ mesh                                                              ⍝ Load model from generated mesh (default material)
⎕NA bool                R('IsModelReady'                     (,⊂ model                                      )) ⍝ model                                                             ⍝ Check if a model is ready
⎕NA                     R('UnloadModel'                      (,⊂ model                                      )) ⍝ model                                                             ⍝ Unload model (including meshes) from memory (RAM and/or VRAM)
⎕NA boundingBox         R('GetModelBoundingBox'              (,⊂ model                                      )) ⍝ model                                                             ⍝ Compute model bounding box limits (considers all meshes)
⎕NA                     R('DrawModel'                        (model v3 f color                              )) ⍝ model position scale tint                                         ⍝ Draw a model (with texture if set)
⎕NA                     R('DrawModelEx'                      (model v3 v3 f v3 color                        )) ⍝ model position rotationAxis rotationAngle scale tint              ⍝ Draw a model with extended parameters
⎕NA                     R('DrawModelWires'                   (model v3 f color                              )) ⍝ model position scale tint                                         ⍝ Draw a model wires (with texture if set)
⎕NA                     R('DrawModelWiresEx'                 (model v3 v3 f v3 color                        )) ⍝ model position rotationAxis rotationAngle scale tint              ⍝ Draw a model wires (with texture if set) with extended parameters
⎕NA                     R('DrawBoundingBox'                  (boundingBox color                             )) ⍝ box color                                                         ⍝ Draw bounding box (wires)
⎕NA                     R('DrawBillboard'                    (camera texture2D v3 f color                   )) ⍝ camera texture position size tint                                 ⍝ Draw a billboard texture
⎕NA                     R('DrawBillboardRec'                 (camera texture2D rectangle v3 v2 color        )) ⍝ camera texture source position size tint                          ⍝ Draw a billboard texture defined by source
⎕NA                     R('DrawBillboardPro'                 (camera texture2D rectangle v3 v3 v2 v2 f color)) ⍝ camera texture source position up size origin rotation tint       ⍝ Draw a billboard texture defined by source and rotation
⎕NA                     R('UploadMesh'                       (('=',mesh) bool                               )) ⍝ mesh dynamic                                                      ⍝ Upload mesh vertex data in GPU and provide VAO/VBO ids
⎕NA                     R('UpdateMeshBuffer'                 (mesh i ptr i i                                )) ⍝ mesh index data dataSize offset                                   ⍝ Update mesh vertex data in GPU for a specific buffer index
⎕NA                     R('UnloadMesh'                       (,⊂ mesh                                       )) ⍝ mesh                                                              ⍝ Unload mesh data from CPU and GPU
⎕NA                     R('DrawMesh'                         (mesh material matrix                          )) ⍝ mesh material transform                                           ⍝ Draw a 3d mesh with material and transform
⎕NA                     R('DrawMeshInstanced'                (mesh material ('=',matrix) i                  )) ⍝ mesh material transforms instances                                ⍝ Draw multiple mesh instances with material and different transforms
⎕NA bool                R('ExportMesh'                       (mesh str                                      )) ⍝ mesh fileName                                                     ⍝ Export mesh data to file, returns true on success
⎕NA boundingBox         R('GetMeshBoundingBox'               (,⊂ mesh                                       )) ⍝ mesh                                                              ⍝ Compute mesh bounding box limits
⎕NA                     R('GenMeshTangents'                  (,⊂ ('=',mesh)                                 )) ⍝ mesh                                                              ⍝ Compute mesh tangents
⎕NA mesh                R('GenMeshPoly'                      (i f                                           )) ⍝ sides radius                                                      ⍝ Generate polygonal mesh
⎕NA mesh                R('GenMeshPlane'                     (f f i i                                       )) ⍝ width length resX resZ                                            ⍝ Generate plane mesh (with subdivisions)
⎕NA mesh                R('GenMeshCube'                      (f f f                                         )) ⍝ width height length                                               ⍝ Generate cuboid mesh
⎕NA mesh                R('GenMeshSphere'                    (f i i                                         )) ⍝ radius rings slices                                               ⍝ Generate sphere mesh (standard sphere)
⎕NA mesh                R('GenMeshHemiSphere'                (f i i                                         )) ⍝ radius rings slices                                               ⍝ Generate half-sphere mesh (no bottom cap)
⎕NA mesh                R('GenMeshCylinder'                  (f f i                                         )) ⍝ radius height slices                                              ⍝ Generate cylinder mesh
⎕NA mesh                R('GenMeshCone'                      (f f i                                         )) ⍝ radius height slices                                              ⍝ Generate cone/pyramid mesh
⎕NA mesh                R('GenMeshTorus'                     (f f i i                                       )) ⍝ radius size radSeg sides                                          ⍝ Generate torus mesh
⎕NA mesh                R('GenMeshKnot'                      (f f i i                                       )) ⍝ radius size radSeg sides                                          ⍝ Generate trefoil knot mesh
⎕NA mesh                R('GenMeshHeightmap'                 (image v3                                      )) ⍝ heightmap size                                                    ⍝ Generate heightmap mesh from image data
⎕NA mesh                R('GenMeshCubicmap'                  (image v3                                      )) ⍝ cubicmap cubeSize                                                 ⍝ Generate cubes-based map mesh from image data
⎕NA ('*',material)      R('LoadMaterials'                    (str ('=',i)                                   )) ⍝ fileName materialCount                                            ⍝ Load materials from model file
⎕NA material            R('LoadMaterialDefault'              (⍬                                             )) ⍝                                                                   ⍝ Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
⎕NA bool                R('IsMaterialReady'                  (,⊂ material                                   )) ⍝ material                                                          ⍝ Check if a material is ready
⎕NA                     R('UnloadMaterial'                   (,⊂ material                                   )) ⍝ material                                                          ⍝ Unload material from GPU memory (VRAM)
⎕NA                     R('SetMaterialTexture'               (('=',material) i texture2D                    )) ⍝ material mapType texture                                          ⍝ Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
⎕NA                     R('SetModelMeshMaterial'             (('=',model) i i                               )) ⍝ model meshId materialId                                           ⍝ Set material for a mesh
⎕NA ('*',modelAnimation)R('LoadModelAnimations'              (str ('=',i)                                   )) ⍝ fileName animCount                                                ⍝ Load model animations from file
⎕NA                     R('UpdateModelAnimation'             (model modelAnimation i                        )) ⍝ model anim frame                                                  ⍝ Update model animation pose
⎕NA                     R('UnloadModelAnimation'             (,⊂ modelAnimation                             )) ⍝ anim                                                              ⍝ Unload animation data
⎕NA                     R('UnloadModelAnimations'            (('=',modelAnimation) i                        )) ⍝ animations animCount                                              ⍝ Unload animation array data
⎕NA bool                R('IsModelAnimationValid'            (model modelAnimation                          )) ⍝ model anim                                                        ⍝ Check model animation skeleton match
⎕NA bool                R('CheckCollisionSpheres'            (v3 f v3 f                                     )) ⍝ center1 radius1 center2 radius2                                   ⍝ Check collision between two spheres
⎕NA bool                R('CheckCollisionBoxes'              (boundingBox boundingBox                       )) ⍝ box1 box2                                                         ⍝ Check collision between two bounding boxes
⎕NA bool                R('CheckCollisionBoxSphere'          (boundingBox v3 f                              )) ⍝ box center radius                                                 ⍝ Check collision between box and sphere
⎕NA rayCollision        R('GetRayCollisionSphere'            (ray v3 f                                      )) ⍝ ray center radius                                                 ⍝ Get collision info between ray and sphere
⎕NA rayCollision        R('GetRayCollisionBox'               (ray boundingBox                               )) ⍝ ray box                                                           ⍝ Get collision info between ray and box
⎕NA rayCollision        R('GetRayCollisionMesh'              (ray mesh matrix                               )) ⍝ ray mesh transform                                                ⍝ Get collision info between ray and mesh
⎕NA rayCollision        R('GetRayCollisionTriangle'          (ray v3 v3 v3                                  )) ⍝ ray p1 p2 p3                                                      ⍝ Get collision info between ray and triangle
⎕NA rayCollision        R('GetRayCollisionQuad'              (ray v3 v3 v3 v3                               )) ⍝ ray p1 p2 p3 p4                                                   ⍝ Get collision info between ray and quad
⎕NA                     R('InitAudioDevice'                  (⍬                                             )) ⍝                                                                   ⍝ Initialize audio device and context
⎕NA                     R('CloseAudioDevice'                 (⍬                                             )) ⍝                                                                   ⍝ Close the audio device and context
⎕NA bool                R('IsAudioDeviceReady'               (⍬                                             )) ⍝                                                                   ⍝ Check if audio device has been initialized successfully
⎕NA                     R('SetMasterVolume'                  (,⊂ f                                          )) ⍝ volume                                                            ⍝ Set master volume (listener)
⎕NA f                   R('GetMasterVolume'                  (⍬                                             )) ⍝                                                                   ⍝ Get master volume (listener)
⎕NA wave                R('LoadWave'                         (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load wave data from file
⎕NA wave                R('LoadWaveFromMemory'               (str ustr i                                    )) ⍝ fileType fileData dataSize                                        ⍝ Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
⎕NA bool                R('IsWaveReady'                      (,⊂ wave                                       )) ⍝ wave                                                              ⍝ Checks if wave data is ready
⎕NA sound               R('LoadSound'                        (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load sound from file
⎕NA sound               R('LoadSoundFromWave'                (,⊂ wave                                       )) ⍝ wave                                                              ⍝ Load sound from wave data
⎕NA sound               R('LoadSoundAlias'                   (,⊂ sound                                      )) ⍝ source                                                            ⍝ Create a new sound that shares the same sample data as the source sound, does not own the sound data
⎕NA bool                R('IsSoundReady'                     (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Checks if a sound is ready
⎕NA                     R('UpdateSound'                      (sound ptr i                                   )) ⍝ sound data sampleCount                                            ⍝ Update sound buffer with new data
⎕NA                     R('UnloadWave'                       (,⊂ wave                                       )) ⍝ wave                                                              ⍝ Unload wave data
⎕NA                     R('UnloadSound'                      (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Unload sound
⎕NA                     R('UnloadSoundAlias'                 (,⊂ sound                                      )) ⍝ alias                                                             ⍝ Unload a sound alias (does not deallocate sample data)
⎕NA bool                R('ExportWave'                       (wave str                                      )) ⍝ wave fileName                                                     ⍝ Export wave data to file, returns true on success
⎕NA bool                R('ExportWaveAsCode'                 (wave str                                      )) ⍝ wave fileName                                                     ⍝ Export wave sample data to code (.h), returns true on success
⎕NA                     R('PlaySound'                        (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Play a sound
⎕NA                     R('StopSound'                        (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Stop playing a sound
⎕NA                     R('PauseSound'                       (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Pause a sound
⎕NA                     R('ResumeSound'                      (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Resume a paused sound
⎕NA bool                R('IsSoundPlaying'                   (,⊂ sound                                      )) ⍝ sound                                                             ⍝ Check if a sound is currently playing
⎕NA                     R('SetSoundVolume'                   (sound f                                       )) ⍝ sound volume                                                      ⍝ Set volume for a sound (1.0 is max level)
⎕NA                     R('SetSoundPitch'                    (sound f                                       )) ⍝ sound pitch                                                       ⍝ Set pitch for a sound (1.0 is base level)
⎕NA                     R('SetSoundPan'                      (sound f                                       )) ⍝ sound pan                                                         ⍝ Set pan for a sound (0.5 is center)
⎕NA wave                R('WaveCopy'                         (,⊂ wave                                       )) ⍝ wave                                                              ⍝ Copy a wave to a new wave
⎕NA                     R('WaveCrop'                         (('=',wave) i i                                )) ⍝ wave initSample finalSample                                       ⍝ Crop a wave to defined samples range
⎕NA                     R('WaveFormat'                       (('=',wave) i i i                              )) ⍝ wave sampleRate sampleSize channels                               ⍝ Convert wave data to desired format
⎕NA ('*',f)             R('LoadWaveSamples'                  (,⊂ wave                                       )) ⍝ wave                                                              ⍝ Load samples data from wave as a 32bit float data array
⎕NA                     R('UnloadWaveSamples'                (,⊂ ('=',f)                                    )) ⍝ samples                                                           ⍝ Unload samples data loaded with LoadWaveSamples()
⎕NA music               R('LoadMusicStream'                  (,⊂ str                                        )) ⍝ fileName                                                          ⍝ Load music stream from file
⎕NA music               R('LoadMusicStreamFromMemory'        (str ustr i                                    )) ⍝ fileType data dataSize                                            ⍝ Load music stream from data
⎕NA bool                R('IsMusicReady'                     (,⊂ music                                      )) ⍝ music                                                             ⍝ Checks if a music stream is ready
⎕NA                     R('UnloadMusicStream'                (,⊂ music                                      )) ⍝ music                                                             ⍝ Unload music stream
⎕NA                     R('PlayMusicStream'                  (,⊂ music                                      )) ⍝ music                                                             ⍝ Start music playing
⎕NA bool                R('IsMusicStreamPlaying'             (,⊂ music                                      )) ⍝ music                                                             ⍝ Check if music is playing
⎕NA                     R('UpdateMusicStream'                (,⊂ music                                      )) ⍝ music                                                             ⍝ Updates buffers for music streaming
⎕NA                     R('StopMusicStream'                  (,⊂ music                                      )) ⍝ music                                                             ⍝ Stop music playing
⎕NA                     R('PauseMusicStream'                 (,⊂ music                                      )) ⍝ music                                                             ⍝ Pause music playing
⎕NA                     R('ResumeMusicStream'                (,⊂ music                                      )) ⍝ music                                                             ⍝ Resume playing paused music
⎕NA                     R('SeekMusicStream'                  (music f                                       )) ⍝ music position                                                    ⍝ Seek music to a position (in seconds)
⎕NA                     R('SetMusicVolume'                   (music f                                       )) ⍝ music volume                                                      ⍝ Set volume for music (1.0 is max level)
⎕NA                     R('SetMusicPitch'                    (music f                                       )) ⍝ music pitch                                                       ⍝ Set pitch for a music (1.0 is base level)
⎕NA                     R('SetMusicPan'                      (music f                                       )) ⍝ music pan                                                         ⍝ Set pan for a music (0.5 is center)
⎕NA f                   R('GetMusicTimeLength'               (,⊂ music                                      )) ⍝ music                                                             ⍝ Get music time length (in seconds)
⎕NA f                   R('GetMusicTimePlayed'               (,⊂ music                                      )) ⍝ music                                                             ⍝ Get current music time played (in seconds)
⎕NA audioStream         R('LoadAudioStream'                  (u u u                                         )) ⍝ sampleRate sampleSize channels                                    ⍝ Load audio stream (to stream raw audio pcm data)
⎕NA bool                R('IsAudioStreamReady'               (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Checks if an audio stream is ready
⎕NA                     R('UnloadAudioStream'                (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Unload audio stream and free memory
⎕NA                     R('UpdateAudioStream'                (audioStream ptr i                             )) ⍝ stream data frameCount                                            ⍝ Update audio stream buffers with data
⎕NA bool                R('IsAudioStreamProcessed'           (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Check if any audio stream buffers requires refill
⎕NA                     R('PlayAudioStream'                  (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Play audio stream
⎕NA                     R('PauseAudioStream'                 (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Pause audio stream
⎕NA                     R('ResumeAudioStream'                (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Resume audio stream
⎕NA bool                R('IsAudioStreamPlaying'             (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Check if audio stream is playing
⎕NA                     R('StopAudioStream'                  (,⊂ audioStream                                )) ⍝ stream                                                            ⍝ Stop audio stream
⎕NA                     R('SetAudioStreamVolume'             (audioStream f                                 )) ⍝ stream volume                                                     ⍝ Set volume for audio stream (1.0 is max level)
⎕NA                     R('SetAudioStreamPitch'              (audioStream f                                 )) ⍝ stream pitch                                                      ⍝ Set pitch for audio stream (1.0 is base level)
⎕NA                     R('SetAudioStreamPan'                (audioStream f                                 )) ⍝ stream pan                                                        ⍝ Set pan for audio stream (0.5 is centered)
⎕NA                     R('SetAudioStreamBufferSizeDefault'  (,⊂ i                                          )) ⍝ size                                                              ⍝ Default size for new audio streams
⎕NA                     R('SetAudioStreamCallback'           (audioStream ptr                               )) ⍝ stream callback                                                   ⍝ Audio thread callback to request new data
⎕NA                     R('AttachAudioStreamProcessor'       (audioStream ptr                               )) ⍝ stream processor                                                  ⍝ Attach audio stream processor to stream, receives the samples as <float>s
⎕NA                     R('DetachAudioStreamProcessor'       (audioStream ptr                               )) ⍝ stream processor                                                  ⍝ Detach audio stream processor from stream
⎕NA                     R('AttachAudioMixedProcessor'        (,⊂ ptr                                        )) ⍝ processor                                                         ⍝ Attach audio stream processor to the entire audio pipeline, receives the samples as <float>s
⎕NA                     R('DetachAudioMixedProcessor'        (,⊂ ptr                                        )) ⍝ processor                                                         ⍝ Detach audio stream processor from the entire audio pipeline
∇
:EndNamespace