⍝ Makes an importer that improves the ffi function creation syntax
∇ OutputStr ← {outType} MakeImporter (pathToBin funcName inpTypes)
    ;NestedStructToStr ;NestedStructToStrReturn
  ⍝ outType's default is ''
  :If 0=⎕NC'outType'
    outType←''
  :EndIf

  NestedStructToStr ← {
    2=+/∧\'<=>'∊⍨⍵ : '=P'
    1≥|≡⍵:⍵
    types←∇¨⍵/⍨m←×|≡¨⍵
    mask←'<=>'∊⍨⊃¨types
    types ← (,'P')@(mask⍨)types
    (left right) ← {n←⍵∊'[]',⎕D⋄((~n)/⍵)(n/⍵)}(~m)/⍵
    left,right,⍨'{','}',⍨1↓⊃,/' ',¨types
  }
  NestedStructToStrReturn ← {
    ((,'*')≢1↑⍵)∧1≥|≡⍵:⍵
    ptr
  }

  OutputStr ← (NestedStructToStrReturn outType),' ',pathToBin,'|',funcName,⊃,/' ',¨NestedStructToStr¨inpTypes
∇

⍝ predefined C types
bool ← 'I1'
c    ← 'I1'
i    ← 'I4'
f    ← 'F4'
u    ← 'U4'
i8   ← 'I1'
u8   ← 'U1'
str  ← '=0C1'
ustr ← '=C1'
ptr  ← ,'P'

R ← {⍺←''⋄⍺ MakeImporter (⊂pathToRaylibBinary),⍵}

⍝ ┌────────────────────────────────┐
⍝ │ End of setup for easy ffi.     │
⍝ │ Begining of autogenerated ffi. │
⍝ └────────────────────────────────┘